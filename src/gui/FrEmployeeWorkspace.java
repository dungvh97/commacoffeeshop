/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import entities.*;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.CustomerDAO;
import model.FoodDAO;
import model.FoodMaterialDAO;
import model.SalaryNoteDAO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map.Entry;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class FrEmployeeWorkspace extends javax.swing.JFrame {

    /** Creates new form FrEmployeeWorkspace */
    public FrEmployeeWorkspace(Employee e) {
        if(e != null){
            this.working_emp.add(e);                                // Thêm nhân viên vào danh sách login
            String salaryid = SalaryNoteDAO.insert(e);
            if(salaryid == null){                        // tạo và lưu bảng lương trong tháng/năm cho nhân viên vào database
                // thất bại
                JOptionPane.showConfirmDialog(null, "Some problem cause! Can not create the new SalaryNote for Employee", "DATABASE WARNING", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                this.dispose();
                return;
            }else{
                // tạo mới thành công hoặc đã có sẵn
                EmpSchedule emschedule = new EmpSchedule();             // tạo lịch cho nv trong ngày hiện tại
                emschedule.setEm_id(e.getEm_id());
                this.setScheduleDate(emschedule);
                this.setScheduleTime(emschedule, true);
                emschedule.setResult_salary(salaryid);
                this.working_schedule.add(emschedule);
            }
        }
        
        this.setMenuPanelSize();        // thiết lập kích thước khung menu cho vừa với số menu item
        this.setTablePanelSize();       // thiết lập khích thước khung table cho vừa với số bàn
        this.initCustomer();
        this.initComponents();
        this.setLabelTextRoll_performed();
       
        this.setFrameIcon();
        
        this.setLocationRelativeTo(this);
        
        this.titleSetting();
        
        this.initMenu();
        this.showDrinkmenu("[\\w ]*");
        this.isDrinkshow = true;
        
        this.initOrderTable();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnShow = new javax.swing.JPanel();
        pnShowControl = new javax.swing.JPanel();
        btnMenu = new javax.swing.JToggleButton();
        btnEmployee = new javax.swing.JToggleButton();
        btnSetting = new javax.swing.JToggleButton();
        pnDisplay = new javax.swing.JPanel();
        pnBlank = new javax.swing.JPanel(){
            @Override
            protected void paintComponent(Graphics g) {
                BufferedImage image = null;
                try{
                    image = ImageIO.read(new File("src/image/blank_picture.jpg"));
                }catch(IOException ex){
                    ex.printStackTrace();
                }
                super.paintComponent(g);
                g.drawImage(image, 100, 0, this); // see javadoc for more info on the parameters
            }
        };
        pnDisplayMenu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        pnMenuSwitch = new javax.swing.JPanel();
        btnDrink = new javax.swing.JButton();
        btnEat = new javax.swing.JButton();
        btnOtherthing = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnAddnote = new javax.swing.JButton();
        pnMenuSkip = new javax.swing.JPanel();
        btnAll = new javax.swing.JButton();
        btnA = new javax.swing.JButton();
        btnB = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        btnD = new javax.swing.JButton();
        btnE = new javax.swing.JButton();
        btnF = new javax.swing.JButton();
        btnG = new javax.swing.JButton();
        btnH = new javax.swing.JButton();
        btnI = new javax.swing.JButton();
        btnJ = new javax.swing.JButton();
        btnK = new javax.swing.JButton();
        btnL = new javax.swing.JButton();
        btnM = new javax.swing.JButton();
        btnN = new javax.swing.JButton();
        btnO = new javax.swing.JButton();
        btnP = new javax.swing.JButton();
        btnQ = new javax.swing.JButton();
        btnR = new javax.swing.JButton();
        btnS = new javax.swing.JButton();
        btnT = new javax.swing.JButton();
        btnU = new javax.swing.JButton();
        btnV = new javax.swing.JButton();
        btnW = new javax.swing.JButton();
        btnX = new javax.swing.JButton();
        btnY = new javax.swing.JButton();
        btnZ = new javax.swing.JButton();
        pnMenuDisplayDetails = new javax.swing.JPanel();
        pnDrink = new javax.swing.JPanel();
        pnEat = new javax.swing.JPanel();
        pnOther = new javax.swing.JPanel();
        pnStock = new javax.swing.JPanel();
        pnWait = new javax.swing.JPanel();
        pnDisplayEmployee = new javax.swing.JPanel();
        pnDisplaySetting = new javax.swing.JPanel();
        pnUsing = new javax.swing.JPanel();
        pnOrderTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnShowTable = new javax.swing.JPanel();
        pnBill = new javax.swing.JPanel();
        pnBillBlank = new javax.swing.JPanel();
        pnOrderBill = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbShowOrderText = new javax.swing.JLabel();
        cboChooseCustomer = new javax.swing.JComboBox<>();
        lbCustomer = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbOrderFood = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOrderNote = new javax.swing.JTextArea();
        pnOrderControl = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        pnReceiptBill = new javax.swing.JPanel();
        mnbMain = new javax.swing.JMenuBar();
        mnEdit = new javax.swing.JMenu();
        mnSystem = new javax.swing.JMenu();
        miAddemp = new javax.swing.JMenuItem();
        miLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Workplace");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        pnShow.setBackground(new java.awt.Color(0, 153, 204));
        pnShow.setPreferredSize(new java.awt.Dimension(1000, 479));
        pnShow.setLayout(new javax.swing.BoxLayout(pnShow, javax.swing.BoxLayout.LINE_AXIS));

        pnShowControl.setBackground(new java.awt.Color(0, 0, 0));
        pnShowControl.setPreferredSize(new java.awt.Dimension(80, 487));
        pnShowControl.setLayout(new java.awt.GridLayout(3, 0));

        btnMenu.setBackground(new java.awt.Color(204, 204, 204));
        btnMenu.setToolTipText("menu display");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        pnShowControl.add(btnMenu);
        ImageIcon Menuicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/menu_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Menuicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnMenu.setIcon(Menuicon);

        btnEmployee.setBackground(new java.awt.Color(204, 204, 204));
        btnEmployee.setToolTipText("employee display");
        btnEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeActionPerformed(evt);
            }
        });
        pnShowControl.add(btnEmployee);
        ImageIcon Employeeicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/employee_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Employeeicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnEmployee.setIcon(Employeeicon);

        btnSetting.setBackground(new java.awt.Color(204, 204, 204));
        btnSetting.setToolTipText("setting display");
        btnSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingActionPerformed(evt);
            }
        });
        pnShowControl.add(btnSetting);
        ImageIcon Settingicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/setting_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Settingicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSetting.setIcon(Settingicon);

        pnShow.add(pnShowControl);

        pnDisplay.setBackground(new java.awt.Color(149, 175, 216));
        pnDisplay.setPreferredSize(new java.awt.Dimension(900, 487));
        pnDisplay.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnBlankLayout = new javax.swing.GroupLayout(pnBlank);
        pnBlank.setLayout(pnBlankLayout);
        pnBlankLayout.setHorizontalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        pnBlankLayout.setVerticalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        pnDisplay.add(pnBlank, "card5");

        pnDisplayMenu.setBackground(new java.awt.Color(11, 34, 66));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        pnMenuSwitch.setBackground(new java.awt.Color(51, 51, 51));
        pnMenuSwitch.setPreferredSize(new java.awt.Dimension(100, 32));
        pnMenuSwitch.setLayout(new java.awt.GridLayout(1, 0));

        btnDrink.setToolTipText("food");
        btnDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnDrink);
        ImageIcon Drinkicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/drink_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Drinkicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnDrink.setIcon(Drinkicon);

        btnEat.setToolTipText("drink");
        btnEat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEatActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnEat);
        ImageIcon Eaticon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/eat_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Eaticon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnEat.setIcon(Eaticon);

        btnOtherthing.setToolTipText("other");
        btnOtherthing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherthingActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnOtherthing);
        ImageIcon Othericon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/other_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Othericon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnOtherthing.setIcon(Othericon);

        btnStock.setToolTipText("stock materials");
        btnStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnStock);
        ImageIcon Stockicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/stock_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Stockicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnStock.setIcon(Stockicon);

        btnSearch.setToolTipText("search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnSearch);
        ImageIcon Searchicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/search_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Searchicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSearch.setIcon(Searchicon);

        btnAddnote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddnoteActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnAddnote);
        ImageIcon Addnoteicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/addnote_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Addnoteicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnAddnote.setIcon(Addnoteicon);

        jPanel1.add(pnMenuSwitch);

        pnMenuSkip.setBackground(new java.awt.Color(204, 204, 255));
        pnMenuSkip.setPreferredSize(new java.awt.Dimension(0, 30));
        pnMenuSkip.setLayout(new java.awt.GridLayout(1, 0));
        pnMenuSkip.add(btnAll);
        this.btnAll.setBorderPainted(false);
        this.btnAll.setFocusPainted(false);
        this.btnAll.setContentAreaFilled(false);

        ImageIcon Allicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/all_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Allicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnAll.setIcon(Allicon);

        this.btnAll.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "[\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnA);
        this.btnA.setBorderPainted(false);
        this.btnA.setFocusPainted(false);
        this.btnA.setContentAreaFilled(false);

        ImageIcon Aicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/a_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Aicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnA.setIcon(Aicon);

        this.btnA.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[aA][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnB);
        this.btnB.setBorderPainted(false);
        this.btnB.setFocusPainted(false);
        this.btnB.setContentAreaFilled(false);

        ImageIcon Bicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/b_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Bicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnB.setIcon(Bicon);

        this.btnB.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[bB][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnC);
        this.btnC.setBorderPainted(false);
        this.btnC.setFocusPainted(false);
        this.btnC.setContentAreaFilled(false);

        ImageIcon Cicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/c_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Cicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnC.setIcon(Cicon);

        this.btnC.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[cC][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnD);
        ImageIcon Dicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/d_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Dicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnD.setIcon(Dicon);

        this.btnD.setBorderPainted(false);
        this.btnD.setFocusPainted(false);
        this.btnD.setContentAreaFilled(false);

        this.btnD.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[dD][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnE);
        ImageIcon Eicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/e_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Eicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnE.setIcon(Eicon);
        this.btnE.setBorderPainted(false);
        this.btnE.setFocusPainted(false);
        this.btnE.setContentAreaFilled(false);

        this.btnE.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[eE][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnF);
        ImageIcon Ficon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/f_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ficon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnF.setIcon(Ficon);
        this.btnF.setBorderPainted(false);
        this.btnF.setFocusPainted(false);
        this.btnF.setContentAreaFilled(false);

        this.btnF.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[fF][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnG);
        ImageIcon Gicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/g_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Gicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnG.setIcon(Gicon);
        this.btnG.setBorderPainted(false);
        this.btnG.setFocusPainted(false);
        this.btnG.setContentAreaFilled(false);
        this.btnG.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[gG][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnH);
        ImageIcon Hicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/h_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Hicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnH.setIcon(Hicon);
        this.btnH.setBorderPainted(false);
        this.btnH.setFocusPainted(false);
        this.btnH.setContentAreaFilled(false);
        this.btnH.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[hH][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnI);
        ImageIcon Iicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/i_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Iicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnI.setIcon(Iicon);
        this.btnI.setBorderPainted(false);
        this.btnI.setFocusPainted(false);
        this.btnI.setContentAreaFilled(false);
        this.btnI.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[iI][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnJ);
        ImageIcon Jicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/j_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Jicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnJ.setIcon(Jicon);
        this.btnJ.setBorderPainted(false);
        this.btnJ.setFocusPainted(false);
        this.btnJ.setContentAreaFilled(false);
        this.btnJ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[jJ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnK);
        ImageIcon Kicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/k_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Kicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnK.setIcon(Kicon);
        this.btnK.setBorderPainted(false);
        this.btnK.setFocusPainted(false);
        this.btnK.setContentAreaFilled(false);
        this.btnK.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[kK][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnL);
        ImageIcon Licon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/l_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Licon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnL.setIcon(Licon);
        this.btnL.setBorderPainted(false);
        this.btnL.setFocusPainted(false);
        this.btnL.setContentAreaFilled(false);
        this.btnL.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[lL][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnM);
        ImageIcon Micon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/m_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Micon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnM.setIcon(Micon);
        this.btnM.setBorderPainted(false);
        this.btnM.setFocusPainted(false);
        this.btnM.setContentAreaFilled(false);
        this.btnM.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[mM][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnN);
        ImageIcon Nicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/n_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Nicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnN.setIcon(Nicon);
        this.btnN.setBorderPainted(false);
        this.btnN.setFocusPainted(false);
        this.btnN.setContentAreaFilled(false);
        this.btnN.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[nN][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnO);
        ImageIcon Oicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/o_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Oicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnO.setIcon(Oicon);
        this.btnO.setBorderPainted(false);
        this.btnO.setFocusPainted(false);
        this.btnO.setContentAreaFilled(false);
        this.btnO.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[oO][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnP);
        ImageIcon Picon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/p_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Picon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnP.setIcon(Picon);
        this.btnP.setBorderPainted(false);
        this.btnP.setFocusPainted(false);
        this.btnP.setContentAreaFilled(false);
        this.btnP.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[pP][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnQ);
        ImageIcon Qicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/q_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Qicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnQ.setIcon(Qicon);
        this.btnQ.setBorderPainted(false);
        this.btnQ.setFocusPainted(false);
        this.btnQ.setContentAreaFilled(false);
        this.btnQ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[qQ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnR);
        ImageIcon Ricon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/r_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ricon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnR.setIcon(Ricon);
        this.btnR.setBorderPainted(false);
        this.btnR.setFocusPainted(false);
        this.btnR.setContentAreaFilled(false);
        this.btnR.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[rR][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnS);
        ImageIcon Sicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/s_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Sicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnS.setIcon(Sicon);
        this.btnS.setBorderPainted(false);
        this.btnS.setFocusPainted(false);
        this.btnS.setContentAreaFilled(false);
        this.btnS.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[sS][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnT);
        ImageIcon Ticon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/t_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ticon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnT.setIcon(Ticon);
        this.btnT.setBorderPainted(false);
        this.btnT.setFocusPainted(false);
        this.btnT.setContentAreaFilled(false);
        this.btnT.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[tT][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnU);
        ImageIcon Uicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/u_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Uicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnU.setIcon(Uicon);
        this.btnU.setBorderPainted(false);
        this.btnU.setFocusPainted(false);
        this.btnU.setContentAreaFilled(false);
        this.btnU.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[uU][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnV);
        ImageIcon Vicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/v_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Vicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnV.setIcon(Vicon);
        this.btnV.setBorderPainted(false);
        this.btnV.setFocusPainted(false);
        this.btnV.setContentAreaFilled(false);
        this.btnV.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[vV][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnW);
        ImageIcon Wicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/w_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Wicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnW.setIcon(Wicon);
        this.btnW.setBorderPainted(false);
        this.btnW.setFocusPainted(false);
        this.btnW.setContentAreaFilled(false);
        this.btnW.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[wW][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnX);
        ImageIcon Xicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/x_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Xicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnX.setIcon(Xicon);
        this.btnX.setBorderPainted(false);
        this.btnX.setFocusPainted(false);
        this.btnX.setContentAreaFilled(false);
        this.btnX.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[xX][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnY);
        ImageIcon Yicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/y_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Yicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnY.setIcon(Yicon);
        this.btnY.setBorderPainted(false);
        this.btnY.setFocusPainted(false);
        this.btnY.setContentAreaFilled(false);
        this.btnY.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[yY][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnZ);
        ImageIcon Zicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/z_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Zicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnZ.setIcon(Zicon);
        this.btnZ.setBorderPainted(false);
        this.btnZ.setFocusPainted(false);
        this.btnZ.setContentAreaFilled(false);
        this.btnZ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[zZ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });

        jPanel1.add(pnMenuSkip);

        pnMenuDisplayDetails.setBackground(new java.awt.Color(204, 204, 204));
        pnMenuDisplayDetails.setPreferredSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnMenuDisplayDetails.setLayout(new java.awt.CardLayout());

        pnDrink.setBackground(new java.awt.Color(31, 11, 43));
        pnDrink.setPreferredSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnDrink.setMaximumSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnDrink.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnDrink, "card3");

        pnEat.setBackground(new java.awt.Color(31, 11, 43));
        pnEat.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnEat, "card2");

        pnOther.setBackground(new java.awt.Color(31, 11, 43));
        pnOther.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnOther, "card4");

        pnStock.setBackground(new java.awt.Color(0, 153, 102));
        pnStock.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnStock, "card5");

        javax.swing.GroupLayout pnWaitLayout = new javax.swing.GroupLayout(pnWait);
        pnWait.setLayout(pnWaitLayout);
        pnWaitLayout.setHorizontalGroup(
            pnWaitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );
        pnWaitLayout.setVerticalGroup(
            pnWaitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );

        pnMenuDisplayDetails.add(pnWait, "card7");

        jPanel1.add(pnMenuDisplayDetails);

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout pnDisplayMenuLayout = new javax.swing.GroupLayout(pnDisplayMenu);
        pnDisplayMenu.setLayout(pnDisplayMenuLayout);
        pnDisplayMenuLayout.setHorizontalGroup(
            pnDisplayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        pnDisplayMenuLayout.setVerticalGroup(
            pnDisplayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);

        pnDisplay.add(pnDisplayMenu, "card2");

        pnDisplayEmployee.setBackground(new java.awt.Color(11, 34, 66));

        javax.swing.GroupLayout pnDisplayEmployeeLayout = new javax.swing.GroupLayout(pnDisplayEmployee);
        pnDisplayEmployee.setLayout(pnDisplayEmployeeLayout);
        pnDisplayEmployeeLayout.setHorizontalGroup(
            pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        pnDisplayEmployeeLayout.setVerticalGroup(
            pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        pnDisplay.add(pnDisplayEmployee, "card3");

        pnDisplaySetting.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout pnDisplaySettingLayout = new javax.swing.GroupLayout(pnDisplaySetting);
        pnDisplaySetting.setLayout(pnDisplaySettingLayout);
        pnDisplaySettingLayout.setHorizontalGroup(
            pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        pnDisplaySettingLayout.setVerticalGroup(
            pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        pnDisplay.add(pnDisplaySetting, "card4");

        pnShow.add(pnDisplay);

        getContentPane().add(pnShow);

        pnUsing.setBackground(new java.awt.Color(0, 204, 153));
        pnUsing.setPreferredSize(new java.awt.Dimension(350, 400));
        pnUsing.setLayout(new javax.swing.BoxLayout(pnUsing, javax.swing.BoxLayout.PAGE_AXIS));

        pnOrderTable.setBackground(new java.awt.Color(76, 116, 181));
        pnOrderTable.setPreferredSize(new java.awt.Dimension(300, 250));

        pnShowTable.setBackground(new java.awt.Color(76, 116, 181));
        pnShowTable.setPreferredSize(new java.awt.Dimension(this.Tablepn_width, this.Tablepn_height));
        pnShowTable.setLayout(new java.awt.GridLayout(0, 3, 10, 10));
        jScrollPane2.setViewportView(pnShowTable);

        javax.swing.GroupLayout pnOrderTableLayout = new javax.swing.GroupLayout(pnOrderTable);
        pnOrderTable.setLayout(pnOrderTableLayout);
        pnOrderTableLayout.setHorizontalGroup(
            pnOrderTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );
        pnOrderTableLayout.setVerticalGroup(
            pnOrderTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(16);

        pnUsing.add(pnOrderTable);

        pnBill.setBackground(new java.awt.Color(45, 66, 99));
        pnBill.setPreferredSize(new java.awt.Dimension(100, 300));
        pnBill.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnBillBlankLayout = new javax.swing.GroupLayout(pnBillBlank);
        pnBillBlank.setLayout(pnBillBlankLayout);
        pnBillBlankLayout.setHorizontalGroup(
            pnBillBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );
        pnBillBlankLayout.setVerticalGroup(
            pnBillBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );

        pnBill.add(pnBillBlank, "card4");

        pnOrderBill.setLayout(new javax.swing.BoxLayout(pnOrderBill, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setBackground(new java.awt.Color(3, 22, 38));
        jPanel2.setPreferredSize(new java.awt.Dimension(201, 100));

        lbShowOrderText.setBackground(new java.awt.Color(0, 0, 0));
        lbShowOrderText.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbShowOrderText.setForeground(new java.awt.Color(0, 255, 51));
        lbShowOrderText.setText("Current Table: "+ this.cur_table +" ----- Day: " + this.today);
        this.str_labeltext = this.lbShowOrderText.getText();

        String[] cus_name = new String[this.cus_list.size()];
        for(int i = 0; i < this.cus_list.size(); i++){
            cus_name[i] = this.cus_list.get(i).getName();
        }
        cboChooseCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(cus_name));
        cboChooseCustomer.setToolTipText("customer for discount");
        this.cboChooseCustomer.setSelectedIndex(16);
        cboChooseCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChooseCustomerActionPerformed(evt);
            }
        });

        lbCustomer.setForeground(new java.awt.Color(204, 204, 204));
        lbCustomer.setText("Customer:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbShowOrderText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbCustomer)
                .addGap(18, 18, 18)
                .addComponent(cboChooseCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 175, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lbShowOrderText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboChooseCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCustomer))
                .addGap(0, 29, Short.MAX_VALUE))
        );

        pnOrderBill.add(jPanel2);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(453, 303));

        tbOrderFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Quantity", "Discount", "Price", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tbOrderFood);

        pnOrderBill.add(jScrollPane4);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(236, 150));

        txtOrderNote.setColumns(20);
        txtOrderNote.setRows(5);
        txtOrderNote.setPreferredSize(new java.awt.Dimension(220, 100));
        jScrollPane3.setViewportView(txtOrderNote);

        pnOrderBill.add(jScrollPane3);

        pnOrderControl.setPreferredSize(new java.awt.Dimension(201, 70));
        pnOrderControl.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setBackground(new java.awt.Color(0, 153, 0));
        jButton1.setText("PAY");
        jButton1.setToolTipText("pay");
        pnOrderControl.add(jButton1);

        jButton3.setBackground(new java.awt.Color(204, 204, 0));
        jButton3.setText("KITCHEN PRINT");
        jButton3.setToolTipText("kitchen print");
        pnOrderControl.add(jButton3);

        jButton4.setBackground(new java.awt.Color(204, 204, 0));
        jButton4.setText("PRINT");
        jButton4.setToolTipText("bar print");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        pnOrderControl.add(jButton4);

        jButton5.setBackground(new java.awt.Color(153, 0, 0));
        jButton5.setText("DELETE");
        pnOrderControl.add(jButton5);

        pnOrderBill.add(pnOrderControl);

        pnBill.add(pnOrderBill, "card2");

        javax.swing.GroupLayout pnReceiptBillLayout = new javax.swing.GroupLayout(pnReceiptBill);
        pnReceiptBill.setLayout(pnReceiptBillLayout);
        pnReceiptBillLayout.setHorizontalGroup(
            pnReceiptBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );
        pnReceiptBillLayout.setVerticalGroup(
            pnReceiptBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 476, Short.MAX_VALUE)
        );

        pnBill.add(pnReceiptBill, "card3");

        pnUsing.add(pnBill);

        getContentPane().add(pnUsing);

        mnEdit.setText("Edit");
        mnbMain.add(mnEdit);

        mnSystem.setText("System");

        miAddemp.setText("Add Employee");
        miAddemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddempActionPerformed(evt);
            }
        });
        mnSystem.add(miAddemp);

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        mnSystem.add(miLogout);

        mnbMain.add(mnSystem);

        setJMenuBar(mnbMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miAddempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddempActionPerformed
        // TODO add your handling code here:
        //new FrEmpLogin(this).setVisible(true);
        new DiaEmpLogin(this, true).setVisible(true);
        this.titleSetting();
    }//GEN-LAST:event_miAddempActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        // TODO add your handling code here:
        new DiaEmpLogout(this, true).setVisible(true);
        if(this.working_emp.isEmpty()){
            new FrLogin().setVisible(true);
            setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
            this.dispose();
            return;
        }
        this.titleSetting();
    }//GEN-LAST:event_miLogoutActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        if(this.btnMenu.isSelected()){
            this.btnMenu.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            this.btnSetting.setSelected(false);
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card2");
        }else{
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");
        }
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeActionPerformed
        // TODO add your handling code here:
        if(this.btnEmployee.isSelected()){
            this.btnEmployee.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnMenu.setSelected(false);
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            this.btnSetting.setSelected(false);
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card3");
            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }else{
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");
        }
    }//GEN-LAST:event_btnEmployeeActionPerformed

    private void btnSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingActionPerformed
        // TODO add your handling code here:
        if(this.btnSetting.isSelected()){
            this.btnSetting.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            this.btnMenu.setSelected(false);
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card4");
            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }else{
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");
        }
    }//GEN-LAST:event_btnSettingActionPerformed

    private void btnDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card3");
        this.isDrinkshow = true;
        this.isEatshow = false;
        this.isOthershow = false;
        this.isStockshow = false;
        
        this.pnDrink.removeAll();
        this.showDrinkmenu("[\\w ]*");
    }//GEN-LAST:event_btnDrinkActionPerformed

    private void btnEatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEatActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card2");
        this.isDrinkshow = false;
        this.isEatshow = true;
        this.isOthershow = false;
        this.isStockshow = false;
        
        this.pnEat.removeAll();
        this.showEatmenu("[\\w ]*");
    }//GEN-LAST:event_btnEatActionPerformed

    private void btnOtherthingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherthingActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card4");
        this.isDrinkshow = false;
        this.isEatshow = false;
        this.isOthershow = true;
        this.isStockshow = false;
        
        this.pnOther.removeAll();
        this.showOthermenu("[\\w ]*");
    }//GEN-LAST:event_btnOtherthingActionPerformed

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card5");
        this.isDrinkshow = false;
        this.isEatshow = false;
        this.isOthershow = false;
        this.isStockshow = true;
        
        this.pnStock.removeAll();
        this.showStockmenu("[\\w ]*");
    }//GEN-LAST:event_btnStockActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String regex = "[\\w ]*"; 
        String str = JOptionPane.showInputDialog("Input the name you want to search");
        if(str != null){
            regex += str;
            regex += "[\\w ]*";
        }
        
        if(isDrinkshow){
            pnDrink.removeAll();
            showDrinkmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card3");
        }
        if(isEatshow){
            pnEat.removeAll();
            showEatmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card2");
        }
        if(isOthershow){
            pnOther.removeAll();
            showOthermenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card4");
        }
        if(isStockshow){
            pnStock.removeAll();
            showStockmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card5");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cboChooseCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChooseCustomerActionPerformed
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0){
            this.cur_order = this.getOrderofTable(this.cur_table);
            this.cur_order.getKey().setCus_id(this.cus_list.get(this.cboChooseCustomer.getSelectedIndex()).getCus_id());
            
            this.ShowCurrentOrderBill();
        }
    }//GEN-LAST:event_cboChooseCustomerActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.setTableState(this.cur_table, 2);
        this.refreshTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnAddnoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddnoteActionPerformed
        // TODO add your handling code here:
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0){
            new DiaNote(this, true).setVisible(true);
            this.ShowCurrentOrderBill();
        }
    }//GEN-LAST:event_btnAddnoteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrEmployeeWorkspace(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnAddnote;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnB;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnD;
    private javax.swing.JButton btnDrink;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEat;
    private javax.swing.JToggleButton btnEmployee;
    private javax.swing.JButton btnF;
    private javax.swing.JButton btnG;
    private javax.swing.JButton btnH;
    private javax.swing.JButton btnI;
    private javax.swing.JButton btnJ;
    private javax.swing.JButton btnK;
    private javax.swing.JButton btnL;
    private javax.swing.JButton btnM;
    private javax.swing.JToggleButton btnMenu;
    private javax.swing.JButton btnN;
    private javax.swing.JButton btnO;
    private javax.swing.JButton btnOtherthing;
    private javax.swing.JButton btnP;
    private javax.swing.JButton btnQ;
    private javax.swing.JButton btnR;
    private javax.swing.JButton btnS;
    private javax.swing.JButton btnSearch;
    private javax.swing.JToggleButton btnSetting;
    private javax.swing.JButton btnStock;
    private javax.swing.JButton btnT;
    private javax.swing.JButton btnU;
    private javax.swing.JButton btnV;
    private javax.swing.JButton btnW;
    private javax.swing.JButton btnX;
    private javax.swing.JButton btnY;
    private javax.swing.JButton btnZ;
    private javax.swing.JComboBox<String> cboChooseCustomer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbCustomer;
    private javax.swing.JLabel lbShowOrderText;
    private javax.swing.JMenuItem miAddemp;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnSystem;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JPanel pnBill;
    private javax.swing.JPanel pnBillBlank;
    private javax.swing.JPanel pnBlank;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnDisplayEmployee;
    private javax.swing.JPanel pnDisplayMenu;
    private javax.swing.JPanel pnDisplaySetting;
    private javax.swing.JPanel pnDrink;
    private javax.swing.JPanel pnEat;
    private javax.swing.JPanel pnMenuDisplayDetails;
    private javax.swing.JPanel pnMenuSkip;
    private javax.swing.JPanel pnMenuSwitch;
    private javax.swing.JPanel pnOrderBill;
    private javax.swing.JPanel pnOrderControl;
    private javax.swing.JPanel pnOrderTable;
    private javax.swing.JPanel pnOther;
    private javax.swing.JPanel pnReceiptBill;
    private javax.swing.JPanel pnShow;
    private javax.swing.JPanel pnShowControl;
    private javax.swing.JPanel pnShowTable;
    private javax.swing.JPanel pnStock;
    private javax.swing.JPanel pnUsing;
    private javax.swing.JPanel pnWait;
    private javax.swing.JTable tbOrderFood;
    private javax.swing.JTextArea txtOrderNote;
    // End of variables declaration//GEN-END:variables

    
    
//  CUSTOM DECLARATION
    int discountevent = 0;
    
    ArrayList<Employee> working_emp = new ArrayList<>();
    ArrayList<EmpSchedule> working_schedule = new ArrayList<>();
    ArrayList<Food> menufood_list = new ArrayList<>();
    ArrayList<FoodMaterial> menumaterial_list = new ArrayList<>();
    ArrayList<Customer> cus_list = new ArrayList<>();
    boolean isDrinkshow = false;
    boolean isEatshow = false;
    boolean isOthershow = false;
    boolean isStockshow = false;
    
    // Điều chỉnh xuất các nút table
    int tableitem_number = 40;      // số bàn mặc định của quán
    int tablerow_number;       // số dòng
    int tablecol_number = 3;            // số cột
    int Tablepn_width;              // kích thước khung table được điều chỉnh cho phù hợp với số dòng số cột
    int Tablepn_height;
    
    // Điều chỉnh xuất các nút menu
    int menuitem_number = 50;      // số sản phẩm mặc định cho một menu
    int row_number;                // số dòng
    int col_number = 6;            // số cột
    int Menupn_width;              // kích thước khung menu được điều chỉnh cho phù hợp với số dòng số cột
    int Menupn_height;
    
    
    
    ArrayList<JButton> tablebtn_list = new ArrayList<>();                       // danh sách bàn
    ArrayList<Integer> tablestate_list = new ArrayList<>();                     // 0: chưa order, 1: đã order, 2: đã lưu
    ArrayList<String> tablesnote_list = new ArrayList<>();
    HashMap<Order, ArrayList<OrderDetails>> order_list = new HashMap<>();
    boolean isOrdershow = false;
    boolean isReceiptshow = false;
    DefaultTableModel tbmodel;
    
    LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    int cur_table = 0;
    Entry<Order, ArrayList<OrderDetails>> cur_order;
//  END CUSTOM DECLARATION
    
    
// CUSTOM CODE
    private void setFrameIcon() {
        Image scaled = null;
        try{
            scaled = ImageIO.read(new File("src/image/comma_icon.jpg")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.setIconImage(scaled);
    }

    private void titleSetting() {
        String title = "Employee: ";
        for(Employee iter : this.working_emp){
            title += iter.getName();
            title += ", ";
        }
        this.setTitle(title);
    }
    
    public void setScheduleTime(EmpSchedule schedule, boolean isstart){
        if(isstart){
            Calendar calendar = Calendar.getInstance();
            int hours = calendar.get(Calendar.HOUR_OF_DAY);
            int minutes = calendar.get(Calendar.MINUTE);
            
            schedule.setStarthour(hours);
            schedule.setStartminute(minutes);
        }else{
            Calendar calendar = Calendar.getInstance();
            int hours = calendar.get(Calendar.HOUR_OF_DAY);
            int minutes = calendar.get(Calendar.MINUTE);
            
            schedule.setEndhour(hours);
            schedule.setEndminute(minutes);
        }
    }
    
    public void setScheduleDate(EmpSchedule schedule){
        LocalDate todayLocalDate = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
        java.sql.Date workDate = java.sql.Date.valueOf( todayLocalDate );
        
        schedule.setWorkday(workDate);
    }
    
    private void initCustomer(){
        this.cus_list = (ArrayList<Customer>) CustomerDAO.getList();
    }

    private void initMenu() {
        this.menufood_list = (ArrayList<Food>) FoodDAO.getList();
        this.menumaterial_list = (ArrayList<FoodMaterial>) FoodMaterialDAO.getList();
    }
    
    
    private void setMenuPanelSize(){
        if(this.menuitem_number % 6 != 0){
            this.row_number = (this.menuitem_number/6) + 1;
        }else{
            this.row_number = this.menuitem_number/6;
        }
        
        Menupn_width = (this.col_number * 100) + ((this.col_number-1) * 20);
        Menupn_height = (this.row_number * 100) + ((this.row_number-1) * 20);
    }
    
    private void showDrinkmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 0 && m.matches()){
                JButton b = new JButton();
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = b.getText();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                    }
                    
                });
                b.setText(itemfood.getName());
                b.setSize(40, 40);
                
                this.pnDrink.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnDrink.add(l);
        }
    }
    
    private void showEatmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 1 && m.matches()){
                JButton b = new JButton();
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = b.getText();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                    }
                });
                b.setText(itemfood.getName());
                b.setSize(40, 40);
                this.pnEat.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnEat.add(l);
        }
    }
    
    private void showOthermenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 2 && m.matches()){
                JButton b = new JButton();
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = b.getText();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                    }
                });
                b.setText(itemfood.getName());
                b.setSize(40, 40);
                this.pnOther.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnOther.add(l);
        }
    }
    
    private void showStockmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(FoodMaterial itemmaterial : this.menumaterial_list){
            Matcher m = p.matcher(itemmaterial.getName());
            if(m.matches()){
                JButton b = new JButton();
                b.addActionListener((ActionEvent e) -> {
                    
                });
                b.setText(itemmaterial.getName());
                b.setSize(40, 40);
                this.pnStock.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnStock.add(l);
        }
    }
    
    
    private void setTablePanelSize(){
        if(this.tableitem_number % 3 != 0){
            this.tablerow_number = (this.tableitem_number/3) + 1;
        }else{
            this.tablerow_number = this.tableitem_number/3;
        }

        this.Tablepn_width = (this.tablecol_number * 100) + ((this.tablecol_number-1) * 10);
        this.Tablepn_height = (this.tablerow_number * 50) + ((this.tablerow_number-1) * 10);
    }
    
    private void initOrderTable() {
        for(int i = 1; i <= this.menuitem_number; i++){
            JButton b = new JButton();
            b.addActionListener((ActionEvent e) -> {
                this.refreshTable();                                                    // làm mới mỗi lần bấm bàn mới
                this.cur_table = Integer.parseInt(b.getText());                         // lấy bàn hiện tại vừa bấm
                int state = this.getTableState(this.cur_table);                         // lấy trạng thái của bàn đó
                if(state == 0){
                    b.setBackground(new Color(5, 22, 8));
                    int rs = JOptionPane.showConfirmDialog(null, "Are you sure to create a new Order?");
                    if(rs == JOptionPane.YES_OPTION){
                        CardLayout c1 = (CardLayout) this.pnDisplay.getLayout();
                        CardLayout c2 = (CardLayout) this.pnMenuDisplayDetails.getLayout();
                        CardLayout c3 = (CardLayout) this.pnBill.getLayout();

                        c1.show(this.pnDisplay, "card2");

                        c2.show(this.pnMenuDisplayDetails, "card3");                    // hiện màn hình menu drink
                        this.isDrinkshow = true;
                        this.isEatshow = false;
                        this.isStockshow = false;
                        this.isOthershow = false;

                        c3.show(this.pnBill, "card2");                                  // hiện màn hình nhập Orderbill
                        this.isOrdershow =true;
                        this.isReceiptshow = false;
                    }else{
                        this.setBackground(new Color(18, 2, 28));
                    }
                }else{
                    if(state == 1 || state == 2){
                        CardLayout c1 = (CardLayout) this.pnDisplay.getLayout();
                        CardLayout c2 = (CardLayout) this.pnMenuDisplayDetails.getLayout();
                        CardLayout c3 = (CardLayout) this.pnBill.getLayout();

                        c1.show(this.pnDisplay, "card2");

                        c2.show(this.pnMenuDisplayDetails, "card3");                    // hiện màn hình menu drink
                        this.isDrinkshow = true;
                        this.isEatshow = false;
                        this.isStockshow = false;
                        this.isOthershow = false;

                        c3.show(this.pnBill, "card2");                                  // hiện màn hình nhập Orderbill
                        this.isOrdershow =true;
                        this.isReceiptshow = false;
                    }
                }
                
   
                this.ShowCurrentOrderBill();
            });
            b.setText(String.valueOf(i));
            b.setSize(100, 50);
            b.setBackground(new Color(18, 2, 28));
            b.setForeground(new Color(106, 158, 237));
            this.pnShowTable.add(b);
            
            this.tablebtn_list.add(b);
            this.tablestate_list.add(0);
            this.tablesnote_list.add("");
            this.order_list.put(new Order("", this.cus_list.get(16).getCus_id(), Integer.parseInt(b.getText()), java.sql.Date.valueOf(this.today), 0, 0, 0), new ArrayList<>());
        }
    }
// END CUSTOM CODE



// ORDER PROCESSION
    private int getTableState(int tablenumber){
        return this.tablestate_list.get(tablenumber-1);
    }
    
    private void setTableState(int tablenumber, int newstate){
        this.tablestate_list.set(tablenumber-1, newstate);
    }
    
    public String getTableNote(int tablenumber){
        return this.tablesnote_list.get(tablenumber-1);
    }
    
    public void setTableNote(int tablenumber, String newnote){
        this.tablesnote_list.set(tablenumber-1, newnote);
    }
    
    private Entry<Order, ArrayList<OrderDetails>> getOrderofTable(int tablenumber){
        for(Entry<Order, ArrayList<OrderDetails>> iter : this.order_list.entrySet()){
            if(iter.getKey().getOrdertable() == tablenumber)
                return iter;
        }
        
        return null;
    }
    
    private void refreshTable(){
        for(int i = 0; i < this.tablestate_list.size(); i++){
            switch(this.tablestate_list.get(i)){
                case 0:
                    this.tablebtn_list.get(i).setBackground(new Color(18, 2, 28));
                    break;
                case 1:
                    this.tablebtn_list.get(i).setBackground(new Color(5, 22, 8));
                    break;
                case 2:
                    this.tablebtn_list.get(i).setBackground(new Color(175, 17, 17));
            }
        }
    }
    
    private void ShowCurrentOrderBill(){
        if(this.cur_table != 0){
            this.cur_order = this.getOrderofTable(this.cur_table);
            
            // xuất trạng thái của order
            switch(this.getTableState(this.cur_table)){
                case 0:
                    this.lbShowOrderText.setText("Current Table: "+ this.cur_table + ", State: EMPTY" + " ----- Day: " + this.today);
                    this.str_labeltext = this.lbShowOrderText.getText();
                    break;
                case 1:
                    this.lbShowOrderText.setText("Current Table: "+ this.cur_table + ", State: ORDERRING" + " ----- Day: " + this.today);
                    this.str_labeltext = this.lbShowOrderText.getText();
                    break;
                case 2:
                    this.lbShowOrderText.setText("Current Table: "+ this.cur_table + ", State: PRINTED" + " ----- Day: " + this.today);
                    this.str_labeltext = this.lbShowOrderText.getText();
            }
            
            
            // xuất khách hàng của order
            for(int i = 0; i < this.cus_list.size(); i++){
                if(this.cus_list.get(i).getCus_id().equals(this.cur_order.getKey().getCus_id())){
                    this.cboChooseCustomer.setSelectedIndex(i);
                }
            }
            
            // xuất danh sách món của order
            this.tbmodel = (DefaultTableModel) this.tbOrderFood.getModel();
            this.tbmodel.setRowCount(0);
            for(OrderDetails iter : this.cur_order.getValue()){
                for(Food fiter : this.menufood_list){
                    if(fiter.getFood_id().equals(iter.getFood_id())){
                        Object[] newrow = {fiter.getName(), iter.getQuan(), this.discountevent, fiter.getPrice()};
                        this.tbmodel.addRow(newrow);
                    }
                }
            }
            
            // xuất tổng giá của order
            this.updateOrderPrice();
            String noteshow = "Total Price: " + this.cur_order.getKey().getPrice() + "\n";
            noteshow += "--------------------------------------\n";
            noteshow += "NOTE: \n";
            noteshow += this.getTableNote(this.cur_table);
            this.txtOrderNote.setText(noteshow);
        }
    }
    
    private void updateOrderPrice(){
        float totalprice = 0;
        for(int i = 0; i < this.tbmodel.getRowCount(); i++){
            int item_discount = (int)this.tbmodel.getValueAt(i, 2);
            float item_price = (float)this.tbmodel.getValueAt(i, 3);
            totalprice += new Float(((100 - item_discount)/100) * item_price);
        }
        
        float cus_discount = new Float((100 - this.cus_list.get(this.cboChooseCustomer.getSelectedIndex()).getDiscount())/100.0);
        totalprice *= cus_discount;
        this.cur_order.getKey().setPrice(totalprice);
    }
// END ORDER PROCESSION

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

/*
    *AUTHOR: Luu Duc Trung
    *WARNING:
        - Add setLabelTextRoll() method in JFrame constructor after create the GUI components
        - the JLabel size always smaller than the text size
        - You can modify the str_space's length, Timer delay if you need
        - JLabel lbShow is the components you want to roll the text
        - You must add code: get the text and assign to str_labeltext after lbShow.setText()
*/
    private Timer tm;

    // Method set timer and add actionlistener
    private void setLabelTextRoll_performed() {
        this.tm = new Timer(80, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                TimerActionPerformed(e);
            }
        });
        this.tm.start();
    }


    private String str_labeltext; // str_labeltext == this.lbShow.getText().trim()
    private int ibegintext = 0;

    private String str_space = "                                                                      ";
    private int ibeginspace = 0;

    boolean istextroll = true;
    boolean isspaceroll = false;
    // The Jlabel text roll action
    private void TimerActionPerformed(ActionEvent e){
        if(((int)this.ibegintext) == this.str_labeltext.length()){
            this.ibegintext = 0;
            this.isspaceroll = true;
            this.istextroll = false;
        }
        if(((int)this.ibeginspace) == this.str_space.length()){
            this.ibeginspace = 0;
            istextroll = true;
            isspaceroll = false;
        }

        if(this.istextroll){
            String subtext = this.str_labeltext.substring((int) this.ibegintext);
            this.lbShowOrderText.setText(subtext);
            this.ibegintext+=1;
        }else{
            if(this.isspaceroll){
                String subtext = this.str_space.substring((int) this.ibeginspace);
                this.lbShowOrderText.setText(subtext+this.str_labeltext);
                this.ibeginspace+=1;
            }
        }
    }
}
