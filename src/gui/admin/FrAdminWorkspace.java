/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.admin;

import connection.DBConnect;
import entities.*;
import gui.FrLogin;
import java.awt.CardLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.*;
import java.util.regex.*;

/**
 *
 * @author Administrator
 */
public class FrAdminWorkspace extends javax.swing.JFrame {

    /**
     * Creates new form FrAdminWorkspace
     */
    public FrAdminWorkspace() {
        initComponents();
    }
    
    private Admin a;
    public FrAdminWorkspace(Admin a) {
        this.a = a;
        initComponents();
        //employee
        initDatavwEmployee();
        setEmployeeFormControl(false);
        //customer
        initDatavwCustomer();
        setCustomerControl(false);
        //food
        initDatavwFood();
        setFoodControl(false);
        initDatavwFM();
        setFMControl(false);
        initDatavwFD();
        setFDControl(false);
        initDatacboName();
        //profile
        initDataThisAdmin();
        setAdControl(false);
        //order
        initDatavwOrder();
        //receipt note
        initDatavwReceipt();
        //salary note
        initDatacboEmployee();
        setSalaryControl(false);
        
        this.setFrameIcon();
        setTitle("Admin: " + a.getName());
        
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnShowControl = new javax.swing.JPanel();
        btnEmployee = new javax.swing.JToggleButton();
        btnSalaryNote = new javax.swing.JToggleButton();
        btnCustomer = new javax.swing.JToggleButton();
        btnFood = new javax.swing.JToggleButton();
        btnFoodMaterial = new javax.swing.JToggleButton();
        btnOrder = new javax.swing.JToggleButton();
        btnProfile = new javax.swing.JToggleButton();
        pnDisplay = new javax.swing.JPanel();
        pnBlank = new javax.swing.JPanel(){
            @Override
            protected void paintComponent(Graphics g) {
                BufferedImage image = null;
                try{
                    image = ImageIO.read(new File("src/image/blank_picture.jpg"));
                }catch(IOException ex){
                    ex.printStackTrace();
                }
                super.paintComponent(g);
                g.drawImage(image, 300, 0, this); // see javadoc for more info on the parameters
            }
        };
        pnEmployee = new javax.swing.JPanel();
        pnShowEmployee = new javax.swing.JPanel();
        pnEmployeeSearch = new javax.swing.JPanel();
        btnSearchEmployeeName = new javax.swing.JButton();
        btnResetEmployeeData = new javax.swing.JButton();
        pnvwEmployee = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vwEmployee = new javax.swing.JTable();
        pnEmployeeForm = new javax.swing.JPanel();
        pnEmployeeInformation = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtUsernameEmp = new javax.swing.JTextField();
        txtNameEmp = new javax.swing.JTextField();
        txtBirthEmp = new javax.swing.JTextField();
        txtStartDayEmp = new javax.swing.JTextField();
        txtHourWageEmp = new javax.swing.JTextField();
        txtAddrEmp = new javax.swing.JTextField();
        txtEmailEmp = new javax.swing.JTextField();
        txtPhoneEmp = new javax.swing.JTextField();
        cboRoleEmployee = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        txtIDEmp = new javax.swing.JTextField();
        txtPassEmp = new javax.swing.JPasswordField();
        txtPassConEmp = new javax.swing.JPasswordField();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        pnEmployeeInformationControl = new javax.swing.JPanel();
        btnInsertEmp = new javax.swing.JButton();
        btnUpdateEmp = new javax.swing.JButton();
        btnDeleteEmp = new javax.swing.JButton();
        btnResetEmp = new javax.swing.JButton();
        pnSalaryNote = new javax.swing.JPanel();
        pnShowSalary = new javax.swing.JPanel();
        pnSalarySearch = new javax.swing.JPanel();
        cboEmployee = new javax.swing.JComboBox<>();
        btnSchePre = new javax.swing.JButton();
        btnScheNext = new javax.swing.JButton();
        txtvwMonth = new javax.swing.JTextField();
        btnSearchEmpSche = new javax.swing.JButton();
        btnExportReportSalaryNote = new javax.swing.JButton();
        btnShowChartSalaryNote = new javax.swing.JButton();
        pnvwNote = new javax.swing.JPanel();
        pnvwEmpSche = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        vwEmpSche = new javax.swing.JTable();
        pnvwSalary = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        txtIDSalary = new javax.swing.JTextField();
        txtIDEmpSalary = new javax.swing.JTextField();
        txtEmpNameSalary = new javax.swing.JTextField();
        txtDatePaySalary = new javax.swing.JTextField();
        txtSalarySalary = new javax.swing.JTextField();
        txtWorkHourSalary = new javax.swing.JTextField();
        txtForMonthSalary = new javax.swing.JTextField();
        txtForYearSalary = new javax.swing.JTextField();
        txtIsPaidSalary = new javax.swing.JTextField();
        pnSalaryControl = new javax.swing.JPanel();
        btnUpdateSalary = new javax.swing.JButton();
        pnCustomer = new javax.swing.JPanel();
        pnShowCustomer = new javax.swing.JPanel();
        pnCustomerSearch = new javax.swing.JPanel();
        btnSearchCustomerName = new javax.swing.JButton();
        btnResetCustomerData = new javax.swing.JButton();
        pnvwCustomer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        vwCustomer = new javax.swing.JTable();
        pnCustomerForm = new javax.swing.JPanel();
        pnCustomerInformation = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtNameCus = new javax.swing.JTextField();
        txtPhoneCus = new javax.swing.JTextField();
        txtEmailCus = new javax.swing.JTextField();
        txtDiscountCus = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtIDCus = new javax.swing.JTextField();
        pnCustomerInformationControl = new javax.swing.JPanel();
        btnInsertCus = new javax.swing.JButton();
        btnUpdateCus = new javax.swing.JButton();
        btnDeleteCus = new javax.swing.JButton();
        btnResetCus = new javax.swing.JButton();
        pnFood = new javax.swing.JPanel();
        pnShowFood = new javax.swing.JPanel();
        pnFoodSearch = new javax.swing.JPanel();
        btnSearchFoodName = new javax.swing.JButton();
        btnResetFoodData = new javax.swing.JButton();
        pnvw = new javax.swing.JPanel();
        pnvwFood = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vwFood = new javax.swing.JTable();
        pnvwFD = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        vwFD = new javax.swing.JTable();
        pnFoodForm = new javax.swing.JPanel();
        pnInsertFood = new javax.swing.JPanel();
        btnInsertFood = new javax.swing.JButton();
        btnInsertFD = new javax.swing.JButton();
        pnFoodFormInput = new javax.swing.JPanel();
        pnFoodFormCL = new javax.swing.JPanel();
        pnFoodInformation = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtNameFood = new javax.swing.JTextField();
        txtInfoFood = new javax.swing.JTextField();
        txtPriceFood = new javax.swing.JTextField();
        cboTypeFood = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        txtIDFood = new javax.swing.JTextField();
        pnFoodInformationControl = new javax.swing.JPanel();
        btnSaveFood = new javax.swing.JButton();
        btnUpdateFood = new javax.swing.JButton();
        btnDeleteFood = new javax.swing.JButton();
        btnResetFood = new javax.swing.JButton();
        pnFoodDetailsFormCL = new javax.swing.JPanel();
        pnFDInformation = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtFoodIDFD = new javax.swing.JTextField();
        txtFMIDFD = new javax.swing.JTextField();
        txtQuanFD = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtIDFD = new javax.swing.JTextField();
        txtUnitUseFD = new javax.swing.JTextField();
        cboFoodNameFD = new javax.swing.JComboBox<>();
        cboFMNameFD = new javax.swing.JComboBox<>();
        pnFDInformationControl = new javax.swing.JPanel();
        btnSaveFD = new javax.swing.JButton();
        btnUpdateFD = new javax.swing.JButton();
        btnDeleteFD = new javax.swing.JButton();
        btnResetFD = new javax.swing.JButton();
        pnFoodMaterial = new javax.swing.JPanel();
        pnShowFM = new javax.swing.JPanel();
        pnFMSearch = new javax.swing.JPanel();
        btnSearchFMName = new javax.swing.JButton();
        btnResetFMData = new javax.swing.JButton();
        pnvwFM = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        vwFM = new javax.swing.JTable();
        pnFMForm = new javax.swing.JPanel();
        pnFMInformation = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtNameFM = new javax.swing.JTextField();
        txtInfoFM = new javax.swing.JTextField();
        txtUnitBuyOtherFM = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtIDFM = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txtSupplierFM = new javax.swing.JTextField();
        cboTypeFM = new javax.swing.JComboBox<>();
        cboUseForFM = new javax.swing.JComboBox<>();
        txtTypeOtherFM = new javax.swing.JTextField();
        cboUnitBuyFM = new javax.swing.JComboBox<>();
        jLabel47 = new javax.swing.JLabel();
        txtStandardPriceFM = new javax.swing.JTextField();
        pnFMInformationControl = new javax.swing.JPanel();
        btnInsertFM = new javax.swing.JButton();
        btnUpdateFM = new javax.swing.JButton();
        btnDeleteFM = new javax.swing.JButton();
        btnResetFM = new javax.swing.JButton();
        pnReceiptNote = new javax.swing.JPanel();
        pnReceiptSearch = new javax.swing.JPanel();
        txtSearchReceiptTime = new javax.swing.JTextField();
        btnSearchReceiptTime = new javax.swing.JButton();
        btnResetReceiptData = new javax.swing.JButton();
        pnShowReceipt = new javax.swing.JPanel();
        pnvwReceiptNote = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        vwReceipt = new javax.swing.JTable();
        pnReceiptNoteDetails = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        vwRD = new javax.swing.JTable();
        pnOrder = new javax.swing.JPanel();
        pnOrderSearch = new javax.swing.JPanel();
        txtSearchOrderTime = new javax.swing.JTextField();
        btnSearchOrderTime = new javax.swing.JButton();
        btnResetOrderData = new javax.swing.JButton();
        txtTodaySale = new javax.swing.JTextField();
        lbTodaySale = new javax.swing.JLabel();
        btnExportReportOrder = new javax.swing.JButton();
        btnShowChartOrder = new javax.swing.JButton();
        pnShowOrder = new javax.swing.JPanel();
        pnvwOrder = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        vwOrder = new javax.swing.JTable();
        pnvwOD = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        vwOD = new javax.swing.JTable();
        pnProfile = new javax.swing.JPanel();
        pnShowAdmin = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtIDAd = new javax.swing.JTextField();
        txtUsernameAd = new javax.swing.JTextField();
        txtNameAd = new javax.swing.JTextField();
        txtPassAd = new javax.swing.JPasswordField();
        pnAdminControl = new javax.swing.JPanel();
        btnUpdateAd = new javax.swing.JButton();
        btnChangePassAd = new javax.swing.JButton();
        btnInsertNewAd = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Workplace");

        pnShowControl.setOpaque(false);
        pnShowControl.setLayout(new java.awt.GridLayout(1, 0));

        btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
        btnEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEmployee.setText("Employee");
        btnEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeActionPerformed(evt);
            }
        });
        pnShowControl.add(btnEmployee);

        btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
        btnSalaryNote.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSalaryNote.setText("Salary Note");
        btnSalaryNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalaryNoteActionPerformed(evt);
            }
        });
        pnShowControl.add(btnSalaryNote);

        btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
        btnCustomer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCustomer.setText("Customer");
        btnCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerActionPerformed(evt);
            }
        });
        pnShowControl.add(btnCustomer);

        btnFood.setBackground(new java.awt.Color(255, 255, 255));
        btnFood.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFood.setText("Food");
        btnFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFoodActionPerformed(evt);
            }
        });
        pnShowControl.add(btnFood);

        btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
        btnFoodMaterial.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFoodMaterial.setText("Food Material");
        btnFoodMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFoodMaterialActionPerformed(evt);
            }
        });
        pnShowControl.add(btnFoodMaterial);

        btnOrder.setBackground(new java.awt.Color(255, 255, 255));
        btnOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnOrder.setText("Order");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });
        pnShowControl.add(btnOrder);

        btnProfile.setBackground(new java.awt.Color(255, 255, 255));
        btnProfile.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnProfile.setText("Profile");
        btnProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileActionPerformed(evt);
            }
        });
        pnShowControl.add(btnProfile);

        pnDisplay.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnBlankLayout = new javax.swing.GroupLayout(pnBlank);
        pnBlank.setLayout(pnBlankLayout);
        pnBlankLayout.setHorizontalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1008, Short.MAX_VALUE)
        );
        pnBlankLayout.setVerticalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 531, Short.MAX_VALUE)
        );

        pnDisplay.add(pnBlank, "card2");

        pnEmployee.setLayout(new javax.swing.BoxLayout(pnEmployee, javax.swing.BoxLayout.LINE_AXIS));

        pnShowEmployee.setPreferredSize(new java.awt.Dimension(590, 429));
        pnShowEmployee.setLayout(new java.awt.BorderLayout());

        btnSearchEmployeeName.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchEmployeeName.setToolTipText("Search by Employee Name");
        btnSearchEmployeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEmployeeNameActionPerformed(evt);
            }
        });

        btnResetEmployeeData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetEmployeeData.setToolTipText("Reset Data");
        btnResetEmployeeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetEmployeeDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnEmployeeSearchLayout = new javax.swing.GroupLayout(pnEmployeeSearch);
        pnEmployeeSearch.setLayout(pnEmployeeSearchLayout);
        pnEmployeeSearchLayout.setHorizontalGroup(
            pnEmployeeSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmployeeSearchLayout.createSequentialGroup()
                .addComponent(btnSearchEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetEmployeeData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 377, Short.MAX_VALUE))
        );
        pnEmployeeSearchLayout.setVerticalGroup(
            pnEmployeeSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchEmployeeName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnResetEmployeeData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnShowEmployee.add(pnEmployeeSearch, java.awt.BorderLayout.PAGE_START);

        pnvwEmployee.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwEmployee.setAutoCreateRowSorter(true);
        vwEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Username", "Password", "Name", "Birth", "Start Day", "Hour Wage", "Address", "Email", "Phone", "Session", "Manager"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwEmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(vwEmployee);
        if (vwEmployee.getColumnModel().getColumnCount() > 0) {
            vwEmployee.getColumnModel().getColumn(0).setMinWidth(0);
            vwEmployee.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwEmployee.getColumnModel().getColumn(0).setMaxWidth(0);
            vwEmployee.getColumnModel().getColumn(2).setMinWidth(0);
            vwEmployee.getColumnModel().getColumn(2).setPreferredWidth(0);
            vwEmployee.getColumnModel().getColumn(2).setMaxWidth(0);
            vwEmployee.getColumnModel().getColumn(6).setPreferredWidth(50);
            vwEmployee.getColumnModel().getColumn(10).setPreferredWidth(50);
            vwEmployee.getColumnModel().getColumn(11).setMinWidth(0);
            vwEmployee.getColumnModel().getColumn(11).setPreferredWidth(0);
            vwEmployee.getColumnModel().getColumn(11).setMaxWidth(0);
        }
        this.vwEmployee.setRowHeight(25);

        javax.swing.GroupLayout pnvwEmployeeLayout = new javax.swing.GroupLayout(pnvwEmployee);
        pnvwEmployee.setLayout(pnvwEmployeeLayout);
        pnvwEmployeeLayout.setHorizontalGroup(
            pnvwEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 671, Short.MAX_VALUE)
            .addGroup(pnvwEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
        );
        pnvwEmployeeLayout.setVerticalGroup(
            pnvwEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
            .addGroup(pnvwEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
        );

        pnShowEmployee.add(pnvwEmployee, java.awt.BorderLayout.CENTER);

        pnEmployee.add(pnShowEmployee);

        pnEmployeeForm.setPreferredSize(new java.awt.Dimension(325, 452));

        pnEmployeeInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel1.setText("Username");

        jLabel3.setText("Name");

        jLabel4.setText("Birth");

        jLabel5.setText("Startday");

        jLabel6.setText("Address");

        jLabel7.setText("Hour Wage");

        jLabel8.setText("Email");

        jLabel9.setText("Phone");

        jLabel10.setText("Session");

        cboRoleEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quầy Nước", "Quầy Bếp" }));

        jLabel33.setText("Employee ID");

        jLabel45.setText("Confirm Password");

        jLabel46.setText("Password");

        javax.swing.GroupLayout pnEmployeeInformationLayout = new javax.swing.GroupLayout(pnEmployeeInformation);
        pnEmployeeInformation.setLayout(pnEmployeeInformationLayout);
        pnEmployeeInformationLayout.setHorizontalGroup(
            pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmployeeInformationLayout.createSequentialGroup()
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33)
                    .addComponent(jLabel1)
                    .addComponent(jLabel46)
                    .addComponent(jLabel45)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(58, 58, 58)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnEmployeeInformationLayout.createSequentialGroup()
                        .addComponent(cboRoleEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnEmployeeInformationLayout.createSequentialGroup()
                        .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddrEmp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtStartDayEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNameEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtUsernameEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtIDEmp, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtPassConEmp)
                                    .addComponent(txtPassEmp)))
                            .addComponent(txtEmailEmp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhoneEmp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHourWageEmp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBirthEmp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        pnEmployeeInformationLayout.setVerticalGroup(
            pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmployeeInformationLayout.createSequentialGroup()
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(txtIDEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsernameEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addGap(2, 2, 2)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassConEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNameEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBirthEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtStartDayEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtHourWageEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtAddrEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmailEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPhoneEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmployeeInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cboRoleEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        btnInsertEmp.setText("Insert");
        btnInsertEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertEmpActionPerformed(evt);
            }
        });
        pnEmployeeInformationControl.add(btnInsertEmp);

        btnUpdateEmp.setText("Update");
        btnUpdateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmpActionPerformed(evt);
            }
        });
        pnEmployeeInformationControl.add(btnUpdateEmp);

        btnDeleteEmp.setText("Delete");
        btnDeleteEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEmpActionPerformed(evt);
            }
        });
        pnEmployeeInformationControl.add(btnDeleteEmp);

        btnResetEmp.setText("Reset");
        btnResetEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetEmpActionPerformed(evt);
            }
        });
        pnEmployeeInformationControl.add(btnResetEmp);

        javax.swing.GroupLayout pnEmployeeFormLayout = new javax.swing.GroupLayout(pnEmployeeForm);
        pnEmployeeForm.setLayout(pnEmployeeFormLayout);
        pnEmployeeFormLayout.setHorizontalGroup(
            pnEmployeeFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(pnEmployeeInformation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnEmployeeInformationControl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnEmployeeFormLayout.setVerticalGroup(
            pnEmployeeFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmployeeFormLayout.createSequentialGroup()
                .addComponent(pnEmployeeInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnEmployeeInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnEmployee.add(pnEmployeeForm);

        pnDisplay.add(pnEmployee, "card3");

        pnShowSalary.setLayout(new java.awt.BorderLayout());

        btnSchePre.setBackground(new java.awt.Color(255, 255, 255));
        btnSchePre.setToolTipText("Search by Food Name");
        btnSchePre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSchePreActionPerformed(evt);
            }
        });

        btnScheNext.setBackground(new java.awt.Color(255, 255, 255));
        btnScheNext.setToolTipText("Reset Data");
        btnScheNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheNextActionPerformed(evt);
            }
        });

        btnSearchEmpSche.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchEmpSche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEmpScheActionPerformed(evt);
            }
        });

        btnExportReportSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
        btnExportReportSalaryNote.setText("Export");
        btnExportReportSalaryNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportReportSalaryNoteActionPerformed(evt);
            }
        });

        btnShowChartSalaryNote.setText("Show Chart");
        btnShowChartSalaryNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowChartSalaryNoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSalarySearchLayout = new javax.swing.GroupLayout(pnSalarySearch);
        pnSalarySearch.setLayout(pnSalarySearchLayout);
        pnSalarySearchLayout.setHorizontalGroup(
            pnSalarySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSalarySearchLayout.createSequentialGroup()
                .addComponent(cboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSchePre, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtvwMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnScheNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearchEmpSche, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 513, Short.MAX_VALUE)
                .addComponent(btnShowChartSalaryNote)
                .addGap(18, 18, 18)
                .addComponent(btnExportReportSalaryNote)
                .addContainerGap())
        );
        pnSalarySearchLayout.setVerticalGroup(
            pnSalarySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnScheNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnSchePre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSalarySearchLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtvwMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(btnSearchEmpSche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cboEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSalarySearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnExportReportSalaryNote)
                .addComponent(btnShowChartSalaryNote))
        );

        pnShowSalary.add(pnSalarySearch, java.awt.BorderLayout.PAGE_START);

        pnvwNote.setLayout(new javax.swing.BoxLayout(pnvwNote, javax.swing.BoxLayout.LINE_AXIS));

        pnvwEmpSche.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Scheduled", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnvwEmpSche.setToolTipText("");

        vwEmpSche.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Scheduled ID", "Employee ID", "Workday", "Start Hour", "Start Minute", "End Hour", "End Minute"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(vwEmpSche);
        if (vwEmpSche.getColumnModel().getColumnCount() > 0) {
            vwEmpSche.getColumnModel().getColumn(0).setMinWidth(0);
            vwEmpSche.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwEmpSche.getColumnModel().getColumn(0).setMaxWidth(0);
            vwEmpSche.getColumnModel().getColumn(1).setMinWidth(0);
            vwEmpSche.getColumnModel().getColumn(1).setPreferredWidth(0);
            vwEmpSche.getColumnModel().getColumn(1).setMaxWidth(0);
        }
        this.vwEmpSche.setRowHeight(25);

        javax.swing.GroupLayout pnvwEmpScheLayout = new javax.swing.GroupLayout(pnvwEmpSche);
        pnvwEmpSche.setLayout(pnvwEmpScheLayout);
        pnvwEmpScheLayout.setHorizontalGroup(
            pnvwEmpScheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
        pnvwEmpScheLayout.setVerticalGroup(
            pnvwEmpScheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );

        pnvwNote.add(pnvwEmpSche);

        pnvwSalary.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salary Note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnvwSalary.setPreferredSize(new java.awt.Dimension(325, 569));

        jLabel37.setText("Salary Note ID");

        jLabel38.setText("Date Pay");

        jLabel39.setText("Total Salary");

        jLabel40.setText("Work Hour");

        jLabel41.setText("For Month");

        jLabel42.setText("Is Paid");

        jLabel43.setText("Employee ID");

        jLabel44.setText("For Year");

        btnUpdateSalary.setText("Update Date Pay");
        pnSalaryControl.add(btnUpdateSalary);

        javax.swing.GroupLayout pnvwSalaryLayout = new javax.swing.GroupLayout(pnvwSalary);
        pnvwSalary.setLayout(pnvwSalaryLayout);
        pnvwSalaryLayout.setHorizontalGroup(
            pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnvwSalaryLayout.createSequentialGroup()
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41)
                    .addComponent(jLabel44))
                .addContainerGap(262, Short.MAX_VALUE))
            .addGroup(pnvwSalaryLayout.createSequentialGroup()
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnvwSalaryLayout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIsPaidSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtWorkHourSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmpNameSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnvwSalaryLayout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addGap(55, 55, 55)
                        .addComponent(txtIDSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnvwSalaryLayout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIDEmpSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnvwSalaryLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDatePaySalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnvwSalaryLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSalarySalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtForMonthSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtForYearSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(pnSalaryControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnvwSalaryLayout.setVerticalGroup(
            pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnvwSalaryLayout.createSequentialGroup()
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtIDSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(txtIDEmpSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmpNameSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatePaySalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(txtSalarySalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(txtWorkHourSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(txtForMonthSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(txtForYearSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnvwSalaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(txtIsPaidSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(pnSalaryControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnvwNote.add(pnvwSalary);

        pnShowSalary.add(pnvwNote, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout pnSalaryNoteLayout = new javax.swing.GroupLayout(pnSalaryNote);
        pnSalaryNote.setLayout(pnSalaryNoteLayout);
        pnSalaryNoteLayout.setHorizontalGroup(
            pnSalaryNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowSalary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnSalaryNoteLayout.setVerticalGroup(
            pnSalaryNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowSalary, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );

        pnDisplay.add(pnSalaryNote, "card10");

        pnCustomer.setLayout(new javax.swing.BoxLayout(pnCustomer, javax.swing.BoxLayout.LINE_AXIS));

        pnShowCustomer.setLayout(new java.awt.BorderLayout());

        btnSearchCustomerName.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchCustomerName.setToolTipText("Search by Customer Name");
        btnSearchCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerNameActionPerformed(evt);
            }
        });

        btnResetCustomerData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetCustomerData.setToolTipText("Reset Data");
        btnResetCustomerData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetCustomerDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCustomerSearchLayout = new javax.swing.GroupLayout(pnCustomerSearch);
        pnCustomerSearch.setLayout(pnCustomerSearchLayout);
        pnCustomerSearchLayout.setHorizontalGroup(
            pnCustomerSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCustomerSearchLayout.createSequentialGroup()
                .addComponent(btnSearchCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetCustomerData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 377, Short.MAX_VALUE))
        );
        pnCustomerSearchLayout.setVerticalGroup(
            pnCustomerSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchCustomerName)
            .addComponent(btnResetCustomerData)
        );

        pnShowCustomer.add(pnCustomerSearch, java.awt.BorderLayout.PAGE_START);

        pnvwCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwCustomer.setAutoCreateRowSorter(true);
        vwCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "Name", "Phone", "Email", "Discount(%)", "Deleted"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwCustomerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(vwCustomer);
        if (vwCustomer.getColumnModel().getColumnCount() > 0) {
            vwCustomer.getColumnModel().getColumn(0).setMinWidth(0);
            vwCustomer.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwCustomer.getColumnModel().getColumn(0).setMaxWidth(0);
            vwCustomer.getColumnModel().getColumn(5).setMinWidth(0);
            vwCustomer.getColumnModel().getColumn(5).setPreferredWidth(0);
            vwCustomer.getColumnModel().getColumn(5).setMaxWidth(0);
        }
        this.vwCustomer.setRowHeight(25);

        javax.swing.GroupLayout pnvwCustomerLayout = new javax.swing.GroupLayout(pnvwCustomer);
        pnvwCustomer.setLayout(pnvwCustomerLayout);
        pnvwCustomerLayout.setHorizontalGroup(
            pnvwCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 671, Short.MAX_VALUE)
            .addGroup(pnvwCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
        );
        pnvwCustomerLayout.setVerticalGroup(
            pnvwCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
            .addGroup(pnvwCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
        );

        pnShowCustomer.add(pnvwCustomer, java.awt.BorderLayout.CENTER);

        pnCustomer.add(pnShowCustomer);

        pnCustomerForm.setPreferredSize(new java.awt.Dimension(325, 452));

        pnCustomerInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnCustomerInformation.setPreferredSize(new java.awt.Dimension(325, 421));

        jLabel11.setText("Name");

        jLabel12.setText("Phone");

        jLabel13.setText("Email");

        jLabel14.setText("Discount");

        jLabel19.setText("Customer ID");

        javax.swing.GroupLayout pnCustomerInformationLayout = new javax.swing.GroupLayout(pnCustomerInformation);
        pnCustomerInformation.setLayout(pnCustomerInformationLayout);
        pnCustomerInformationLayout.setHorizontalGroup(
            pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCustomerInformationLayout.createSequentialGroup()
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnCustomerInformationLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(txtDiscountCus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnCustomerInformationLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtEmailCus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnCustomerInformationLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPhoneCus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnCustomerInformationLayout.createSequentialGroup()
                        .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNameCus, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(txtIDCus))))
                .addGap(30, 30, 30))
        );
        pnCustomerInformationLayout.setVerticalGroup(
            pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCustomerInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(txtIDCus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNameCus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtPhoneCus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtEmailCus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCustomerInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtDiscountCus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        btnInsertCus.setText("Insert");
        btnInsertCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertCusActionPerformed(evt);
            }
        });
        pnCustomerInformationControl.add(btnInsertCus);

        btnUpdateCus.setText("Update");
        btnUpdateCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCusActionPerformed(evt);
            }
        });
        pnCustomerInformationControl.add(btnUpdateCus);

        btnDeleteCus.setText("Delete");
        btnDeleteCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCusActionPerformed(evt);
            }
        });
        pnCustomerInformationControl.add(btnDeleteCus);

        btnResetCus.setText("Reset");
        btnResetCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetCusActionPerformed(evt);
            }
        });
        pnCustomerInformationControl.add(btnResetCus);

        javax.swing.GroupLayout pnCustomerFormLayout = new javax.swing.GroupLayout(pnCustomerForm);
        pnCustomerForm.setLayout(pnCustomerFormLayout);
        pnCustomerFormLayout.setHorizontalGroup(
            pnCustomerFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnCustomerInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnCustomerInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnCustomerFormLayout.setVerticalGroup(
            pnCustomerFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCustomerFormLayout.createSequentialGroup()
                .addComponent(pnCustomerInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnCustomerInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnCustomer.add(pnCustomerForm);

        pnDisplay.add(pnCustomer, "card4");

        pnFood.setPreferredSize(new java.awt.Dimension(915, 460));
        pnFood.setLayout(new javax.swing.BoxLayout(pnFood, javax.swing.BoxLayout.LINE_AXIS));

        pnShowFood.setPreferredSize(new java.awt.Dimension(1040, 600));
        pnShowFood.setLayout(new java.awt.BorderLayout());

        btnSearchFoodName.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchFoodName.setToolTipText("Search by Food Name");
        btnSearchFoodName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFoodNameActionPerformed(evt);
            }
        });

        btnResetFoodData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetFoodData.setToolTipText("Reset Data");
        btnResetFoodData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFoodDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFoodSearchLayout = new javax.swing.GroupLayout(pnFoodSearch);
        pnFoodSearch.setLayout(pnFoodSearchLayout);
        pnFoodSearchLayout.setHorizontalGroup(
            pnFoodSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodSearchLayout.createSequentialGroup()
                .addComponent(btnSearchFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetFoodData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnFoodSearchLayout.setVerticalGroup(
            pnFoodSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchFoodName)
            .addComponent(btnResetFoodData)
        );

        pnShowFood.add(pnFoodSearch, java.awt.BorderLayout.PAGE_START);

        pnvw.setLayout(new java.awt.BorderLayout());

        pnvwFood.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwFood.setAutoCreateRowSorter(true);
        vwFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Food ID", "Name", "Information", "Price", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwFoodMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(vwFood);
        if (vwFood.getColumnModel().getColumnCount() > 0) {
            vwFood.getColumnModel().getColumn(0).setMinWidth(0);
            vwFood.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwFood.getColumnModel().getColumn(0).setMaxWidth(0);
        }
        this.vwFood.setRowHeight(25);

        javax.swing.GroupLayout pnvwFoodLayout = new javax.swing.GroupLayout(pnvwFood);
        pnvwFood.setLayout(pnvwFoodLayout);
        pnvwFoodLayout.setHorizontalGroup(
            pnvwFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 676, Short.MAX_VALUE)
            .addGroup(pnvwFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE))
        );
        pnvwFoodLayout.setVerticalGroup(
            pnvwFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
            .addGroup(pnvwFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnvwFoodLayout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pnvw.add(pnvwFood, java.awt.BorderLayout.PAGE_START);

        pnvwFD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food Details List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwFD.setAutoCreateRowSorter(true);
        vwFD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Food Details ID", "Food ID", "Food Name", "Food Material ID", "Food Material Name", "Quan", "Unit Use"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwFD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwFDMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(vwFD);
        if (vwFD.getColumnModel().getColumnCount() > 0) {
            vwFD.getColumnModel().getColumn(0).setMinWidth(0);
            vwFD.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwFD.getColumnModel().getColumn(0).setMaxWidth(0);
            vwFD.getColumnModel().getColumn(1).setMinWidth(0);
            vwFD.getColumnModel().getColumn(1).setPreferredWidth(0);
            vwFD.getColumnModel().getColumn(1).setMaxWidth(0);
            vwFD.getColumnModel().getColumn(3).setMinWidth(0);
            vwFD.getColumnModel().getColumn(3).setPreferredWidth(0);
            vwFD.getColumnModel().getColumn(3).setMaxWidth(0);
        }
        this.vwFD.setRowHeight(25);

        javax.swing.GroupLayout pnvwFDLayout = new javax.swing.GroupLayout(pnvwFD);
        pnvwFD.setLayout(pnvwFDLayout);
        pnvwFDLayout.setHorizontalGroup(
            pnvwFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 676, Short.MAX_VALUE)
            .addGroup(pnvwFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE))
        );
        pnvwFDLayout.setVerticalGroup(
            pnvwFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 154, Short.MAX_VALUE)
            .addGroup(pnvwFDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );

        pnvw.add(pnvwFD, java.awt.BorderLayout.CENTER);

        pnShowFood.add(pnvw, java.awt.BorderLayout.CENTER);

        pnFood.add(pnShowFood);

        pnFoodForm.setPreferredSize(new java.awt.Dimension(325, 460));
        pnFoodForm.setLayout(new java.awt.BorderLayout());

        pnInsertFood.setLayout(new java.awt.GridLayout(1, 0));

        btnInsertFood.setBackground(new java.awt.Color(255, 255, 255));
        btnInsertFood.setText("Insert Food");
        btnInsertFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertFoodActionPerformed(evt);
            }
        });
        pnInsertFood.add(btnInsertFood);

        btnInsertFD.setBackground(new java.awt.Color(255, 255, 255));
        btnInsertFD.setText("Insert Food Details");
        btnInsertFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertFDActionPerformed(evt);
            }
        });
        pnInsertFood.add(btnInsertFD);

        pnFoodForm.add(pnInsertFood, java.awt.BorderLayout.PAGE_START);

        pnFoodFormInput.setLayout(new java.awt.CardLayout());

        pnFoodFormCL.setPreferredSize(new java.awt.Dimension(320, 460));

        pnFoodInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel15.setText("Name");

        jLabel16.setText("Information");

        jLabel17.setText("Price");

        jLabel18.setText("Type");

        cboTypeFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Uống", "Ăn", "Khác" }));

        jLabel20.setText("Food ID");

        javax.swing.GroupLayout pnFoodInformationLayout = new javax.swing.GroupLayout(pnFoodInformation);
        pnFoodInformation.setLayout(pnFoodInformationLayout);
        pnFoodInformationLayout.setHorizontalGroup(
            pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodInformationLayout.createSequentialGroup()
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel20))
                .addGap(71, 71, 71)
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNameFood, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInfoFood, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPriceFood, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDFood, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTypeFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnFoodInformationLayout.setVerticalGroup(
            pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodInformationLayout.createSequentialGroup()
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtIDFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtNameFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtInfoFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtPriceFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFoodInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(cboTypeFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(271, Short.MAX_VALUE))
        );

        btnSaveFood.setText("Save");
        btnSaveFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFoodActionPerformed(evt);
            }
        });
        pnFoodInformationControl.add(btnSaveFood);

        btnUpdateFood.setText("Update");
        btnUpdateFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFoodActionPerformed(evt);
            }
        });
        pnFoodInformationControl.add(btnUpdateFood);

        btnDeleteFood.setText("Delete");
        btnDeleteFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFoodActionPerformed(evt);
            }
        });
        pnFoodInformationControl.add(btnDeleteFood);

        btnResetFood.setText("Reset");
        btnResetFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFoodActionPerformed(evt);
            }
        });
        pnFoodInformationControl.add(btnResetFood);

        javax.swing.GroupLayout pnFoodFormCLLayout = new javax.swing.GroupLayout(pnFoodFormCL);
        pnFoodFormCL.setLayout(pnFoodFormCLLayout);
        pnFoodFormCLLayout.setHorizontalGroup(
            pnFoodFormCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodFormCLLayout.createSequentialGroup()
                .addGroup(pnFoodFormCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnFoodInformationControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnFoodInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        pnFoodFormCLLayout.setVerticalGroup(
            pnFoodFormCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodFormCLLayout.createSequentialGroup()
                .addComponent(pnFoodInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnFoodInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnFoodFormInput.add(pnFoodFormCL, "card2");

        pnFoodDetailsFormCL.setPreferredSize(new java.awt.Dimension(320, 460));

        pnFDInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food Details Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel21.setText("Details for Food");

        jLabel22.setText("With Food Material(s)");

        jLabel23.setText("Quantity");

        jLabel24.setText("Unit Use");

        txtQuanFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuanFDActionPerformed(evt);
            }
        });

        jLabel25.setText("Food Details ID");

        cboFoodNameFD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        cboFoodNameFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFoodNameFDActionPerformed(evt);
            }
        });

        cboFMNameFD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        cboFMNameFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFMNameFDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFDInformationLayout = new javax.swing.GroupLayout(pnFDInformation);
        pnFDInformation.setLayout(pnFDInformationLayout);
        pnFDInformationLayout.setHorizontalGroup(
            pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFDInformationLayout.createSequentialGroup()
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel25)
                    .addGroup(pnFDInformationLayout.createSequentialGroup()
                        .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(18, 18, 18)
                        .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQuanFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboFMNameFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFMIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboFoodNameFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFoodIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnitUseFD, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel24))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnFDInformationLayout.setVerticalGroup(
            pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFDInformationLayout.createSequentialGroup()
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtFoodIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboFoodNameFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFMIDFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboFMNameFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuanFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(pnFDInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnitUseFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addContainerGap(219, Short.MAX_VALUE))
        );

        btnSaveFD.setText("Save");
        btnSaveFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFDActionPerformed(evt);
            }
        });
        pnFDInformationControl.add(btnSaveFD);

        btnUpdateFD.setText("Update");
        btnUpdateFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFDActionPerformed(evt);
            }
        });
        pnFDInformationControl.add(btnUpdateFD);

        btnDeleteFD.setText("Delete");
        btnDeleteFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFDActionPerformed(evt);
            }
        });
        pnFDInformationControl.add(btnDeleteFD);

        btnResetFD.setText("Reset");
        btnResetFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFDActionPerformed(evt);
            }
        });
        pnFDInformationControl.add(btnResetFD);

        javax.swing.GroupLayout pnFoodDetailsFormCLLayout = new javax.swing.GroupLayout(pnFoodDetailsFormCL);
        pnFoodDetailsFormCL.setLayout(pnFoodDetailsFormCLLayout);
        pnFoodDetailsFormCLLayout.setHorizontalGroup(
            pnFoodDetailsFormCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodDetailsFormCLLayout.createSequentialGroup()
                .addComponent(pnFDInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
            .addGroup(pnFoodDetailsFormCLLayout.createSequentialGroup()
                .addComponent(pnFDInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnFoodDetailsFormCLLayout.setVerticalGroup(
            pnFoodDetailsFormCLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFoodDetailsFormCLLayout.createSequentialGroup()
                .addComponent(pnFDInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnFDInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnFoodFormInput.add(pnFoodDetailsFormCL, "card3");

        pnFoodForm.add(pnFoodFormInput, java.awt.BorderLayout.CENTER);

        pnFood.add(pnFoodForm);

        pnDisplay.add(pnFood, "card5");

        pnFoodMaterial.setLayout(new javax.swing.BoxLayout(pnFoodMaterial, javax.swing.BoxLayout.LINE_AXIS));

        pnShowFM.setLayout(new java.awt.BorderLayout());

        btnSearchFMName.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchFMName.setToolTipText("Search by Food Material Name");
        btnSearchFMName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFMNameActionPerformed(evt);
            }
        });

        btnResetFMData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetFMData.setToolTipText("Reset Data");
        btnResetFMData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFMDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFMSearchLayout = new javax.swing.GroupLayout(pnFMSearch);
        pnFMSearch.setLayout(pnFMSearchLayout);
        pnFMSearchLayout.setHorizontalGroup(
            pnFMSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFMSearchLayout.createSequentialGroup()
                .addComponent(btnSearchFMName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetFMData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 376, Short.MAX_VALUE))
        );
        pnFMSearchLayout.setVerticalGroup(
            pnFMSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchFMName)
            .addComponent(btnResetFMData)
        );

        pnShowFM.add(pnFMSearch, java.awt.BorderLayout.PAGE_START);

        pnvwFM.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food Material List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwFM.setAutoCreateRowSorter(true);
        vwFM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Food Material ID", "Name", "Information", "Use for", "Type", "Unit Buy", "Standard Price", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Byte.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwFM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwFMMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(vwFM);
        if (vwFM.getColumnModel().getColumnCount() > 0) {
            vwFM.getColumnModel().getColumn(0).setMinWidth(0);
            vwFM.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwFM.getColumnModel().getColumn(0).setMaxWidth(0);
        }
        this.vwFM.setRowHeight(25);

        javax.swing.GroupLayout pnvwFMLayout = new javax.swing.GroupLayout(pnvwFM);
        pnvwFM.setLayout(pnvwFMLayout);
        pnvwFMLayout.setHorizontalGroup(
            pnvwFMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
        pnvwFMLayout.setVerticalGroup(
            pnvwFMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
        );

        pnShowFM.add(pnvwFM, java.awt.BorderLayout.CENTER);

        pnFoodMaterial.add(pnShowFM);

        pnFMForm.setPreferredSize(new java.awt.Dimension(325, 487));

        pnFMInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Food Material Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnFMInformation.setPreferredSize(new java.awt.Dimension(325, 421));

        jLabel26.setText("Name");

        jLabel27.setText("Information");

        jLabel28.setText("Use For");

        jLabel29.setText("Food Material Type");

        jLabel30.setText("Food Material ID");

        jLabel31.setText("Unit Buy");

        jLabel32.setText("Supplier");

        cboTypeFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTypeFMActionPerformed(evt);
            }
        });

        cboUseForFM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Uống", "Ăn", "Không rõ lượng dùng", "Khác" }));

        cboUnitBuyFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboUnitBuyFMActionPerformed(evt);
            }
        });

        jLabel47.setText("Standard Price");

        javax.swing.GroupLayout pnFMInformationLayout = new javax.swing.GroupLayout(pnFMInformation);
        pnFMInformation.setLayout(pnFMInformationLayout);
        pnFMInformationLayout.setHorizontalGroup(
            pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFMInformationLayout.createSequentialGroup()
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnFMInformationLayout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtInfoFM, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnFMInformationLayout.createSequentialGroup()
                        .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNameFM, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(txtIDFM)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnFMInformationLayout.createSequentialGroup()
                        .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(jLabel47))
                        .addGap(41, 41, 41)
                        .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSupplierFM)
                            .addComponent(txtUnitBuyOtherFM, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTypeOtherFM, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cboUseForFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboTypeFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboUnitBuyFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStandardPriceFM))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );
        pnFMInformationLayout.setVerticalGroup(
            pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFMInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtIDFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtNameFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(txtInfoFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(cboUseForFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(cboTypeFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTypeOtherFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboUnitBuyFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUnitBuyOtherFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStandardPriceFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addGap(18, 18, 18)
                .addGroup(pnFMInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(txtSupplierFM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        btnInsertFM.setText("Insert");
        btnInsertFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertFMActionPerformed(evt);
            }
        });
        pnFMInformationControl.add(btnInsertFM);

        btnUpdateFM.setText("Update");
        btnUpdateFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFMActionPerformed(evt);
            }
        });
        pnFMInformationControl.add(btnUpdateFM);

        btnDeleteFM.setText("Delete");
        btnDeleteFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFMActionPerformed(evt);
            }
        });
        pnFMInformationControl.add(btnDeleteFM);

        btnResetFM.setText("Reset");
        btnResetFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFMActionPerformed(evt);
            }
        });
        pnFMInformationControl.add(btnResetFM);

        javax.swing.GroupLayout pnFMFormLayout = new javax.swing.GroupLayout(pnFMForm);
        pnFMForm.setLayout(pnFMFormLayout);
        pnFMFormLayout.setHorizontalGroup(
            pnFMFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnFMInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnFMInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnFMFormLayout.setVerticalGroup(
            pnFMFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFMFormLayout.createSequentialGroup()
                .addComponent(pnFMInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnFMInformationControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnFoodMaterial.add(pnFMForm);

        pnDisplay.add(pnFoodMaterial, "card6");

        pnReceiptNote.setLayout(new java.awt.BorderLayout());

        btnSearchReceiptTime.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchReceiptTime.setToolTipText("Search by Order Time");
        btnSearchReceiptTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReceiptTimeActionPerformed(evt);
            }
        });

        btnResetReceiptData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetReceiptData.setToolTipText("Reset Data");
        btnResetReceiptData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetReceiptDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnReceiptSearchLayout = new javax.swing.GroupLayout(pnReceiptSearch);
        pnReceiptSearch.setLayout(pnReceiptSearchLayout);
        pnReceiptSearchLayout.setHorizontalGroup(
            pnReceiptSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnReceiptSearchLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(txtSearchReceiptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchReceiptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetReceiptData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnReceiptSearchLayout.setVerticalGroup(
            pnReceiptSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchReceiptTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnReceiptSearchLayout.createSequentialGroup()
                .addComponent(txtSearchReceiptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(btnResetReceiptData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnReceiptNote.add(pnReceiptSearch, java.awt.BorderLayout.PAGE_START);

        pnShowReceipt.setLayout(new javax.swing.BoxLayout(pnShowReceipt, javax.swing.BoxLayout.LINE_AXIS));

        pnvwReceiptNote.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Receipt Note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwReceipt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Receipt Note ID", "Employee ID", "Receipt Date", "Total Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwReceipt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwReceiptMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(vwReceipt);
        if (vwReceipt.getColumnModel().getColumnCount() > 0) {
            vwReceipt.getColumnModel().getColumn(0).setMinWidth(0);
            vwReceipt.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwReceipt.getColumnModel().getColumn(0).setMaxWidth(0);
        }
        this.vwReceipt.setRowHeight(25);

        javax.swing.GroupLayout pnvwReceiptNoteLayout = new javax.swing.GroupLayout(pnvwReceiptNote);
        pnvwReceiptNote.setLayout(pnvwReceiptNoteLayout);
        pnvwReceiptNoteLayout.setHorizontalGroup(
            pnvwReceiptNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        pnvwReceiptNoteLayout.setVerticalGroup(
            pnvwReceiptNoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
        );

        pnShowReceipt.add(pnvwReceiptNote);

        pnReceiptNoteDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Receipt Note Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnReceiptNoteDetails.setPreferredSize(new java.awt.Dimension(570, 467));

        vwRD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Receipt Note ID", "Food Material ID", "Food Material Name", "Quantity", "Price", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwRD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwRDMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(vwRD);
        if (vwRD.getColumnModel().getColumnCount() > 0) {
            vwRD.getColumnModel().getColumn(0).setMinWidth(0);
            vwRD.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwRD.getColumnModel().getColumn(0).setMaxWidth(0);
            vwRD.getColumnModel().getColumn(1).setMinWidth(0);
            vwRD.getColumnModel().getColumn(1).setPreferredWidth(0);
            vwRD.getColumnModel().getColumn(1).setMaxWidth(0);
        }
        this.vwRD.setRowHeight(25);

        javax.swing.GroupLayout pnReceiptNoteDetailsLayout = new javax.swing.GroupLayout(pnReceiptNoteDetails);
        pnReceiptNoteDetails.setLayout(pnReceiptNoteDetailsLayout);
        pnReceiptNoteDetailsLayout.setHorizontalGroup(
            pnReceiptNoteDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );
        pnReceiptNoteDetailsLayout.setVerticalGroup(
            pnReceiptNoteDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
        );

        pnShowReceipt.add(pnReceiptNoteDetails);

        pnReceiptNote.add(pnShowReceipt, java.awt.BorderLayout.CENTER);

        pnDisplay.add(pnReceiptNote, "card7");

        pnOrder.setLayout(new java.awt.BorderLayout());

        txtSearchOrderTime.setPreferredSize(new java.awt.Dimension(34, 20));

        btnSearchOrderTime.setBackground(new java.awt.Color(255, 255, 255));
        btnSearchOrderTime.setToolTipText("Search by Order Time");
        btnSearchOrderTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOrderTimeActionPerformed(evt);
            }
        });

        btnResetOrderData.setBackground(new java.awt.Color(255, 255, 255));
        btnResetOrderData.setToolTipText("Reset Data");
        btnResetOrderData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetOrderDataActionPerformed(evt);
            }
        });

        lbTodaySale.setText("Today sale:");

        btnExportReportOrder.setBackground(new java.awt.Color(255, 255, 255));
        btnExportReportOrder.setText("Export");
        btnExportReportOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportReportOrderActionPerformed(evt);
            }
        });

        btnShowChartOrder.setText("Show Chart");
        btnShowChartOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowChartOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnOrderSearchLayout = new javax.swing.GroupLayout(pnOrderSearch);
        pnOrderSearch.setLayout(pnOrderSearchLayout);
        pnOrderSearchLayout.setHorizontalGroup(
            pnOrderSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOrderSearchLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(txtSearchOrderTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchOrderTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResetOrderData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(lbTodaySale)
                .addGap(18, 18, 18)
                .addComponent(txtTodaySale, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(btnShowChartOrder)
                .addGap(18, 18, 18)
                .addComponent(btnExportReportOrder)
                .addContainerGap())
        );
        pnOrderSearchLayout.setVerticalGroup(
            pnOrderSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSearchOrderTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnResetOrderData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOrderSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtTodaySale)
                .addComponent(lbTodaySale)
                .addComponent(btnExportReportOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnShowChartOrder))
            .addComponent(txtSearchOrderTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnOrder.add(pnOrderSearch, java.awt.BorderLayout.PAGE_START);

        pnShowOrder.setLayout(new javax.swing.BoxLayout(pnShowOrder, javax.swing.BoxLayout.LINE_AXIS));

        pnvwOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        vwOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Customer ID", "Customer Name", "Order Table", "Order Time", "Price", "Customer Pay", "Pay Back"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vwOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vwOrderMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(vwOrder);
        if (vwOrder.getColumnModel().getColumnCount() > 0) {
            vwOrder.getColumnModel().getColumn(0).setMinWidth(0);
            vwOrder.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwOrder.getColumnModel().getColumn(0).setMaxWidth(0);
            vwOrder.getColumnModel().getColumn(1).setMinWidth(0);
            vwOrder.getColumnModel().getColumn(1).setPreferredWidth(0);
            vwOrder.getColumnModel().getColumn(1).setMaxWidth(0);
        }
        this.vwOrder.setRowHeight(25);

        javax.swing.GroupLayout pnvwOrderLayout = new javax.swing.GroupLayout(pnvwOrder);
        pnvwOrder.setLayout(pnvwOrderLayout);
        pnvwOrderLayout.setHorizontalGroup(
            pnvwOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );
        pnvwOrderLayout.setVerticalGroup(
            pnvwOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );

        pnShowOrder.add(pnvwOrder);

        pnvwOD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order Details List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        pnvwOD.setPreferredSize(new java.awt.Dimension(350, 457));

        vwOD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order ID", "Food ID", "Food Name", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(vwOD);
        if (vwOD.getColumnModel().getColumnCount() > 0) {
            vwOD.getColumnModel().getColumn(0).setMinWidth(0);
            vwOD.getColumnModel().getColumn(0).setPreferredWidth(0);
            vwOD.getColumnModel().getColumn(0).setMaxWidth(0);
            vwOD.getColumnModel().getColumn(1).setMinWidth(0);
            vwOD.getColumnModel().getColumn(1).setPreferredWidth(0);
            vwOD.getColumnModel().getColumn(1).setMaxWidth(0);
        }
        this.vwOD.setRowHeight(25);

        javax.swing.GroupLayout pnvwODLayout = new javax.swing.GroupLayout(pnvwOD);
        pnvwOD.setLayout(pnvwODLayout);
        pnvwODLayout.setHorizontalGroup(
            pnvwODLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
        );
        pnvwODLayout.setVerticalGroup(
            pnvwODLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );

        pnShowOrder.add(pnvwOD);

        pnOrder.add(pnShowOrder, java.awt.BorderLayout.CENTER);

        pnDisplay.add(pnOrder, "card8");

        pnShowAdmin.setBorder(javax.swing.BorderFactory.createTitledBorder("Admin Profile"));

        jLabel2.setText("Admin ID");

        jLabel34.setText("Username");

        jLabel35.setText("Password");

        jLabel36.setText("Name");

        btnUpdateAd.setText("Update");
        btnUpdateAd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAdActionPerformed(evt);
            }
        });
        pnAdminControl.add(btnUpdateAd);

        btnChangePassAd.setText("Change Pass");
        btnChangePassAd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePassAdActionPerformed(evt);
            }
        });
        pnAdminControl.add(btnChangePassAd);

        btnInsertNewAd.setText("Insert New Admin");
        btnInsertNewAd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertNewAdActionPerformed(evt);
            }
        });
        pnAdminControl.add(btnInsertNewAd);

        javax.swing.GroupLayout pnShowAdminLayout = new javax.swing.GroupLayout(pnShowAdmin);
        pnShowAdmin.setLayout(pnShowAdminLayout);
        pnShowAdminLayout.setHorizontalGroup(
            pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnShowAdminLayout.createSequentialGroup()
                .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnAdminControl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnShowAdminLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIDAd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnShowAdminLayout.createSequentialGroup()
                        .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel36))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNameAd, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(txtPassAd)))
                    .addGroup(pnShowAdminLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtUsernameAd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(696, Short.MAX_VALUE))
        );
        pnShowAdminLayout.setVerticalGroup(
            pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnShowAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIDAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtUsernameAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(txtPassAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnShowAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtNameAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnAdminControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnProfileLayout = new javax.swing.GroupLayout(pnProfile);
        pnProfile.setLayout(pnProfileLayout);
        pnProfileLayout.setHorizontalGroup(
            pnProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnProfileLayout.setVerticalGroup(
            pnProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnDisplay.add(pnProfile, "card9");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("System");

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        jMenu2.add(miLogout);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu2.add(miExit);

        jMenuItem1.setText("Setting");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnShowControl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        new FrLogin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_miLogoutActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void btnEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeActionPerformed
        if(this.btnEmployee.isSelected())
        {
            this.btnEmployee.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card3");
            
            initDatavwEmployee();
            setEmployeeFormControl(false);
            btnResetEmpActionPerformed(evt);
        }
        else
        {
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnEmployeeActionPerformed

    private void btnCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerActionPerformed
        if(this.btnCustomer.isSelected())
        {
            this.btnCustomer.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card4");
            
            initDatavwCustomer();
            setCustomerControl(false);
            btnResetCusActionPerformed(evt);
        }
        else
        {
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnCustomerActionPerformed

    private void btnSearchEmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEmployeeNameActionPerformed
        String dkEmployeeName = JOptionPane.showInputDialog("Input an employee name want to search");
//        sorterEmployee.setRowFilter(RowFilter.regexFilter(dkEmployeeName.trim(), 3));
        modelEmployee.getDataVector().removeAllElements();
        modelEmployee.fireTableDataChanged();
        for (Employee d:dsEmployee)
        {
            if (d.getName().toUpperCase().contains(dkEmployeeName.trim().toUpperCase()) || d.getName().toLowerCase().contains(dkEmployeeName.trim().toLowerCase()))
            {
                Vector v = new Vector();
                v.add(d.getEm_id());
                v.add(d.getUsername());
                v.add(d.getPass());
                v.add(d.getName());
                v.add(d.getBirth());
                v.add(d.getStartday());
                v.add(d.getHour_wage());
                v.add(d.getAddr());
                v.add(d.getEmail());
                v.add(d.getPhone());
                if(d.getEm_role() == 1)
                {
                    v.add("Nước");
                }
                else
                {
                    v.add("Bếp");
                }
                //v.add(d.getEm_role());
                v.add(d.getManager());
                modelEmployee.addRow(v);
            }
        }
    }//GEN-LAST:event_btnSearchEmployeeNameActionPerformed

    private void btnResetEmployeeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetEmployeeDataActionPerformed
//        String dkEmployeeName = "(?i)" + "";
//        sorterEmployee.setRowFilter(RowFilter.regexFilter(dkEmployeeName.trim(), 3));
        modelEmployee.getDataVector().removeAllElements();
        modelEmployee.fireTableDataChanged();
        for (Employee d:dsEmployee)
        {
            modelEmployee.addRow(d.toVector());
        }
        
        btnResetEmpActionPerformed(evt);
    }//GEN-LAST:event_btnResetEmployeeDataActionPerformed

    private void btnSearchCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerNameActionPerformed
        String dkCustomerName = JOptionPane.showInputDialog("Input an customer name want to search");
//        sorterCustomer.setRowFilter(RowFilter.regexFilter(dkCustomerName.trim(), 1));
        modelCustomer.getDataVector().removeAllElements();
        modelCustomer.fireTableDataChanged();
        for (Customer d:dsCustomer)
        {
            if (d.getName().toUpperCase().contains(dkCustomerName.trim().toUpperCase()) || d.getName().toLowerCase().contains(dkCustomerName.trim().toLowerCase()))
            {
                if(d.getDeleted() == 0)
                {
                    modelCustomer.addRow(d.toVector());
                }
            }
        }
    }//GEN-LAST:event_btnSearchCustomerNameActionPerformed

    private void btnResetCustomerDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetCustomerDataActionPerformed
//        String dkCustomerName = "(?i)" + "";
//        sorterCustomer.setRowFilter(RowFilter.regexFilter(dkCustomerName.trim(), 1));
        modelCustomer.getDataVector().removeAllElements();
        modelCustomer.fireTableDataChanged();
        for (Customer d:dsCustomer)
        {
            modelCustomer.addRow(d.toVector());
        }
        
        btnResetCusActionPerformed(evt);
    }//GEN-LAST:event_btnResetCustomerDataActionPerformed

    private void vwCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwCustomerMouseClicked
        int row = vwCustomer.getSelectedRow();
        
        setCustomerControl(false);
        btnInsertCus.setText("Insert");
        btnInsertCus.setEnabled(true);
        btnUpdateCus.setText("Update");
        btnUpdateCus.setEnabled(true);
        btnDeleteCus.setEnabled(true);
        if(row >= 0)
        {
            txtIDCus.setText(modelCustomer.getValueAt(row, 0).toString());
            txtNameCus.setText(modelCustomer.getValueAt(row, 1).toString());
            txtPhoneCus.setText(modelCustomer.getValueAt(row, 2).toString());
            txtEmailCus.setText(modelCustomer.getValueAt(row, 3).toString());
            txtDiscountCus.setText(modelCustomer.getValueAt(row, 4).toString());
        }
    }//GEN-LAST:event_vwCustomerMouseClicked

    private void btnInsertEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertEmpActionPerformed
        if(btnInsertEmp.getText().equals("Insert"))
        {
            btnInsertEmp.setText("Save");
            btnUpdateEmp.setEnabled(false);
            btnDeleteEmp.setEnabled(false);
            setEmployeeFormControl(true);
            txtUsernameEmp.setEnabled(true);
            txtPassEmp.setEnabled(true);
            txtPassConEmp.setVisible(true);
            txtIDEmp.setText("auto");
            txtUsernameEmp.setText("");
            txtPassEmp.setText("");
            jLabel45.setVisible(true);
            txtPassConEmp.setText("");
            txtNameEmp.setText("");
            txtBirthEmp.setText("");
            txtStartDayEmp.setText("");
            txtHourWageEmp.setText("");
            txtAddrEmp.setText("");
            txtEmailEmp.setText("");
            txtPhoneEmp.setText("");
            cboRoleEmployee.setSelectedIndex(0);
            return;
        }
        if(btnInsertEmp.getText().equals("Save"))
        {
            String emid = txtIDEmp.getText().trim();
            
            String username = txtUsernameEmp.getText().trim();
            if(username.length() == 0 || username.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Username is not valid!");
                txtUsernameEmp.requestFocus();
                return;
            }
            for(Employee d:dsEmployee)
            {
                if(d.getUsername().equals(username))
                {
                    JOptionPane.showMessageDialog(null, "Username is already exist!");
                    txtUsernameEmp.requestFocus();
                    return;
                }
            }
            
            String pass = new String(txtPassEmp.getPassword()).trim();
            if(pass.length() == 0 || pass.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Password is not valid!");
                txtPassEmp.requestFocus();
                return;
            }
            String passcon = new String(txtPassConEmp.getPassword()).trim();
            if(!passcon.equals(pass))
            {
                JOptionPane.showMessageDialog(null, "Confirm password is not match!");
                txtPassConEmp.requestFocus();
                return;
            }
            
            String namee = txtNameEmp.getText().trim();
            if(namee.length() == 0 || namee.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                txtNameEmp.requestFocus();
                return;
            }
            
            LocalDate birth;
            String sbirth = txtBirthEmp.getText().trim();
            int dky, dkm, dkd;
            LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
            try
            {
                if(sbirth.length() == 0 || sbirth.length() > 10)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                dky = Integer.parseInt(sbirth.substring(0, 4));
                dkm = Integer.parseInt(sbirth.substring(5, 7));
                dkd = Integer.parseInt(sbirth.substring(8, 10));
                if(dky < 0 || dkm < 0 || dkd < 0)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(sbirth.charAt(4) != '-' || sbirth.charAt(7) != '-')
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(!(dky <= (today.getYear() - 18)))
                {
                    JOptionPane.showMessageDialog(null, "This employee is too young to become employee in coffee shop!");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(dkm > 12)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid! Month of year must not be greater than 12!");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(dkm == 2)
                {
                    if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                    {
                        if(dkd > 29)
                        {
                            JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 29!");
                            txtBirthEmp.requestFocus();
                            return;
                        }
                    }
                    else
                    {
                        if(dkd > 28)
                        {
                            JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 28!");
                            txtBirthEmp.requestFocus();
                            return;
                        }
                    }
                }
                if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
                {
                    if(dkd > 30)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 30!");
                        txtBirthEmp.requestFocus();
                        return;
                    }
                }
                if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
                {
                    if(dkd > 31)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 31!");
                        txtBirthEmp.requestFocus();
                        return;
                    }
                }
                birth = LocalDate.of(dky, dkm, dkd);
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                txtBirthEmp.requestFocus();
                return;
            }
            
            String sstartday = txtStartDayEmp.getText().trim();
            LocalDate startday;
            try
            {
                if(sstartday.length() == 0 || sstartday.length() > 10)
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                dky = Integer.parseInt(sstartday.substring(0, 4));
                dkm = Integer.parseInt(sstartday.substring(5, 7));
                dkd = Integer.parseInt(sstartday.substring(8, 10));
                if(dky < 0 || dkm < 0 || dkd < 0)
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(sstartday.charAt(4) != '-' || sstartday.charAt(7) != '-')
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(dkm > 12)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid! Month of year must not be greater than 12!");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(dkm == 2)
                {
                    if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                    {
                        if(dkd > 29)
                        {
                            JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 29!");
                            txtStartDayEmp.requestFocus();
                            return;
                        }
                    }
                    else
                    {
                        if(dkd > 28)
                        {
                            JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 28!");
                            txtStartDayEmp.requestFocus();
                            return;
                        }
                    }
                }
                if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
                {
                    if(dkd > 30)
                    {
                        JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 30!");
                        txtStartDayEmp.requestFocus();
                        return;
                    }
                }
                if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
                {
                    if(dkd > 31)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 31!");
                        txtStartDayEmp.requestFocus();
                        return;
                    }
                }
                startday = LocalDate.of(dky, dkm, dkd);
                if(!(startday.isAfter(today)))
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid! Start day must be after to day!");
                    txtStartDayEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                txtStartDayEmp.requestFocus();
                return;
            }
            
            int hourwage = 0;
            try
            {
                hourwage = Integer.parseInt(txtHourWageEmp.getText().trim());
                if(hourwage <= 0)
                {
                    JOptionPane.showMessageDialog(null, "Hour Wage must be greater than 0!");
                    txtHourWageEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Hour Wage must be integer!");
                txtHourWageEmp.requestFocus();
                return;
            }
            
            String addr = txtAddrEmp.getText().trim();
            if(addr.length() == 0 || addr.length() > 200)
            {
                JOptionPane.showMessageDialog(null, "Address is not valid!");
                txtAddrEmp.requestFocus();
                return;
            }
            
            String email = txtEmailEmp.getText().trim();
            Pattern pemail = Pattern.compile("[\\w\\d]+[@][\\w]+[.][\\w]+");
            Matcher m = null;
            try
            {
                m = pemail.matcher(email);
                if(!m.matches())
                {
                    JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                    txtEmailEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                txtEmailEmp.requestFocus();
                return;
            }
            
            String phone = txtPhoneEmp.getText().trim();
            try
            {
                if(phone.length() == 0 || phone.length() > 12)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid!");
                    txtPhoneEmp.requestFocus();
                    return;
                }
                if(Integer.parseInt(phone) < 0)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                    txtPhoneEmp.requestFocus();
                    return;
                }
                
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                txtPhoneEmp.requestFocus();
                return;
            }
            
            int role;
            if(cboRoleEmployee.getSelectedIndex() == 0)
            {
                role = 1;
            }
            else
            {
                role = 2;
            }
            
            String manager = a.getAd_id();
            
            Employee emp = new Employee(emid, username, pass, namee, addr, email, phone, manager, java.sql.Date.valueOf(birth), java.sql.Date.valueOf(startday), hourwage, role);
            if(EmployeeDAO.insert(emp) != 0)
            {
                JOptionPane.showMessageDialog(null, "Insert new employee successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Insert new employee fail!");
                btnInsertEmp.setText("Insert");
                btnUpdateEmp.setEnabled(true);
                btnDeleteEmp.setEnabled(true);
                txtIDEmp.setText("");
                txtUsernameEmp.setText("");
                txtPassEmp.setText("");
                txtPassConEmp.setText("");
                txtNameEmp.setText("");
                txtBirthEmp.setText("");
                txtStartDayEmp.setText("");
                txtHourWageEmp.setText("");
                txtAddrEmp.setText("");
                txtEmailEmp.setText("");
                txtPhoneEmp.setText("");
                cboRoleEmployee.setSelectedIndex(0);
            }
            txtIDEmp.setText(emp.getEm_id());
            btnInsertEmp.setText("Insert");
            btnUpdateEmp.setEnabled(true);
            btnDeleteEmp.setEnabled(true);
            setEmployeeFormControl(false);
            modelEmployee.getDataVector().removeAllElements();
            modelEmployee.fireTableDataChanged();
            dsEmployee = EmployeeDAO.getList();
            modelEmployee.setRowCount(0);
            for(Employee d:dsEmployee)
            {
                if(d.getManager().equalsIgnoreCase(a.getAd_id()) && d.getEm_role() != 3)
                {
                    Vector v = new Vector();
                    v.add(d.getEm_id());
                    v.add(d.getUsername());
                    v.add(d.getPass());
                    v.add(d.getName());
                    v.add(d.getBirth());
                    v.add(d.getStartday());
                    v.add(d.getHour_wage());
                    v.add(d.getAddr());
                    v.add(d.getEmail());
                    v.add(d.getPhone());
                    if(d.getEm_role() == 1)
                    {
                        v.add("Nước");
                    }
                    else
                    {
                        v.add("Bếp");
                    }
                    //v.add(d.getEm_role());
                    v.add(d.getManager());
                    modelEmployee.addRow(v);
                }
            }
            sorterEmployee = (TableRowSorter<TableModel>) vwEmployee.getRowSorter();
        }
    }//GEN-LAST:event_btnInsertEmpActionPerformed

    private void btnUpdateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmpActionPerformed
        if(btnUpdateEmp.getText().equals("Update"))
        {
            int row = vwEmployee.getSelectedRow();
            if(row < 0)
            {
                JOptionPane.showMessageDialog(null, "Must be choose an employee you want to update");
                return;
            }
            btnUpdateEmp.setText("Save");
            btnInsertEmp.setEnabled(false);
            btnDeleteEmp.setEnabled(false);
            setEmployeeFormControl(true);
            return;
        }
        if(btnUpdateEmp.getText().equals("Save"))
        {
            String emid = txtIDEmp.getText().trim();
            
            String username = txtUsernameEmp.getText().trim();
            
            String pass = new String(txtPassEmp.getPassword()).trim();
            
            String namee = txtNameEmp.getText().trim();
            if(namee.length() == 0 || namee.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                txtNameEmp.requestFocus();
                return;
            }
            
            LocalDate birth;
            String sbirth = txtBirthEmp.getText().trim();
            int dky, dkm, dkd;
            LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
            try
            {
                if(sbirth.length() == 0 || sbirth.length() > 10)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                dky = Integer.parseInt(sbirth.substring(0, 4));
                dkm = Integer.parseInt(sbirth.substring(5, 7));
                dkd = Integer.parseInt(sbirth.substring(8, 10));
                if(dky < 0 || dkm < 0 || dkd < 0)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(sbirth.charAt(4) != '-' || sbirth.charAt(7) != '-')
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(!(dky <= (today.getYear() - 18)))
                {
                    JOptionPane.showMessageDialog(null, "This employee is too young to become employee in coffee shop!");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(dkm > 12)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid! Month of year must not be greater than 12!");
                    txtBirthEmp.requestFocus();
                    return;
                }
                if(dkm == 2)
                {
                    if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                    {
                        if(dkd > 29)
                        {
                            JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 29!");
                            txtBirthEmp.requestFocus();
                            return;
                        }
                    }
                    else
                    {
                        if(dkd > 28)
                        {
                            JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 28!");
                            txtBirthEmp.requestFocus();
                            return;
                        }
                    }
                }
                if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
                {
                    if(dkd > 30)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 30!");
                        txtBirthEmp.requestFocus();
                        return;
                    }
                }
                if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
                {
                    if(dkd > 31)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 31!");
                        txtBirthEmp.requestFocus();
                        return;
                    }
                }
                birth = LocalDate.of(dky, dkm, dkd);
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Birthday is not valid!\nHint: yyyy-MM-dd");
                txtBirthEmp.requestFocus();
                return;
            }
            
            String sstartday = txtStartDayEmp.getText().trim();
            LocalDate startday;
            try
            {
                if(sstartday.length() == 0 || sstartday.length() > 10)
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                dky = Integer.parseInt(sstartday.substring(0, 4));
                dkm = Integer.parseInt(sstartday.substring(5, 7));
                dkd = Integer.parseInt(sstartday.substring(8, 10));
                if(dky < 0 || dkm < 0 || dkd < 0)
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(sstartday.charAt(4) != '-' || sstartday.charAt(7) != '-')
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(dkm > 12)
                {
                    JOptionPane.showMessageDialog(null, "Birthday is not valid! Month of year must not be greater than 12!");
                    txtStartDayEmp.requestFocus();
                    return;
                }
                if(dkm == 2)
                {
                    if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                    {
                        if(dkd > 29)
                        {
                            JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 29!");
                            txtStartDayEmp.requestFocus();
                            return;
                        }
                    }
                    else
                    {
                        if(dkd > 28)
                        {
                            JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 28!");
                            txtStartDayEmp.requestFocus();
                            return;
                        }
                    }
                }
                if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
                {
                    if(dkd > 30)
                    {
                        JOptionPane.showMessageDialog(null, "Startday is not valid! Day of that month must not be greater than 30!");
                        txtStartDayEmp.requestFocus();
                        return;
                    }
                }
                if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
                {
                    if(dkd > 31)
                    {
                        JOptionPane.showMessageDialog(null, "Birthday is not valid! Day of that month must not be greater than 31!");
                        txtStartDayEmp.requestFocus();
                        return;
                    }
                }
                startday = LocalDate.of(dky, dkm, dkd);
                if(!(startday.isAfter(today)))
                {
                    JOptionPane.showMessageDialog(null, "Start day is not valid! Start day must be after to day!");
                    txtStartDayEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Start day is not valid!\nHint: yyyy-MM-dd");
                txtStartDayEmp.requestFocus();
                return;
            }
            
            int hourwage = 0;
            try
            {
                hourwage = Integer.parseInt(txtHourWageEmp.getText().trim());
                if(hourwage <= 0)
                {
                    JOptionPane.showMessageDialog(null, "Hour Wage must be greater than 0!");
                    txtHourWageEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Hour Wage must be integer!");
                txtHourWageEmp.requestFocus();
                return;
            }
            
            String addr = txtAddrEmp.getText().trim();
            if(addr.length() == 0 || addr.length() > 200)
            {
                JOptionPane.showMessageDialog(null, "Address is not valid!");
                txtAddrEmp.requestFocus();
                return;
            }
            
            String email = txtEmailEmp.getText().trim();
            Pattern pemail = Pattern.compile("[\\w\\d]+[@][\\w]+[.][\\w]+");
            Matcher m = null;
            try
            {
                m = pemail.matcher(email);
                if(!m.matches())
                {
                    JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                    txtEmailEmp.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                txtEmailEmp.requestFocus();
                return;
            }
            
            String phone = txtPhoneEmp.getText().trim();
            try
            {
                if(phone.length() == 0 || phone.length() > 12)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid!");
                    txtPhoneEmp.requestFocus();
                    return;
                }
                if(Integer.parseInt(phone) < 0)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                    txtPhoneEmp.requestFocus();
                    return;
                }
                
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                txtPhoneEmp.requestFocus();
                return;
            }
            
            int role;
            if(cboRoleEmployee.getSelectedIndex() == 0)
            {
                role = 1;
            }
            else
            {
                role = 2;
            }
            
            String manager = a.getAd_id();
            Employee oldemp = new Employee(emid, username, pass, namee, addr, email, phone, manager, java.sql.Date.valueOf(birth), java.sql.Date.valueOf(startday), hourwage, role);
            if(EmployeeDAO.update(oldemp, username, pass, namee, java.sql.Date.valueOf(birth), java.sql.Date.valueOf(startday), addr, email, phone, role, hourwage, manager, 0) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update fail!");
                setEmployeeFormControl(false);
                txtIDEmp.setText("");
                txtUsernameEmp.setText("");
                txtPassEmp.setText("");
                txtPassConEmp.setText("");
                txtNameEmp.setText("");
                txtBirthEmp.setText("");
                txtStartDayEmp.setText("");
                txtHourWageEmp.setText("");
                txtAddrEmp.setText("");
                txtEmailEmp.setText("");
                txtPhoneEmp.setText("");
                cboRoleEmployee.setSelectedIndex(0);
            }
            btnUpdateEmp.setText("Update");
            btnInsertEmp.setEnabled(true);
            btnDeleteEmp.setEnabled(true);
            setEmployeeFormControl(false);
            modelEmployee.getDataVector().removeAllElements();
            modelEmployee.fireTableDataChanged();
            dsEmployee = EmployeeDAO.getList();
            modelEmployee.setRowCount(0);
            for(Employee d:dsEmployee)
            {
                if(d.getManager().equalsIgnoreCase(a.getAd_id()) && d.getEm_role() != 3)
                {
                    Vector v = new Vector();
                    v.add(d.getEm_id());
                    v.add(d.getUsername());
                    v.add(d.getPass());
                    v.add(d.getName());
                    v.add(d.getBirth());
                    v.add(d.getStartday());
                    v.add(d.getHour_wage());
                    v.add(d.getAddr());
                    v.add(d.getEmail());
                    v.add(d.getPhone());
                    if(d.getEm_role() == 1)
                    {
                        v.add("Nước");
                    }
                    else
                    {
                        v.add("Bếp");
                    }
                    //v.add(d.getEm_role());
                    v.add(d.getManager());
                    modelEmployee.addRow(v);
                }
            }
            sorterEmployee = (TableRowSorter<TableModel>) vwEmployee.getRowSorter();
        }
    }//GEN-LAST:event_btnUpdateEmpActionPerformed

    private void btnDeleteEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEmpActionPerformed
        int row = vwEmployee.getSelectedRow();
        if(row < 0)
        {
            JOptionPane.showMessageDialog(null, "Choose an employee you want to delete!");
            return;
        }
        
        String emid = txtIDEmp.getText().trim();
        String username = txtUsernameEmp.getText().trim();
        String pass = new String(txtPassEmp.getPassword()).trim();
        String namee = txtNameEmp.getText().trim();
        String sbirth = txtBirthEmp.getText().trim();
        LocalDate birth = LocalDate.of(Integer.parseInt(sbirth.substring(0, 4)), Integer.parseInt(sbirth.substring(5, 7)), Integer.parseInt(sbirth.substring(8, 10)));
        String sstartday = txtStartDayEmp.getText().trim();
        LocalDate startday = LocalDate.of(Integer.parseInt(sstartday.substring(0, 4)), Integer.parseInt(sstartday.substring(5, 7)), Integer.parseInt(sstartday.substring(8, 10)));
        int hourwage = Integer.parseInt(txtHourWageEmp.getText().trim());
        String addr = txtAddrEmp.getText().trim();
        String email = txtEmailEmp.getText().trim();
        String phone = txtPhoneEmp.getText().trim();
        int role = cboRoleEmployee.getSelectedIndex() + 1;
        String manager = a.getAd_id();
        
        int option = JOptionPane.showConfirmDialog(null, "Do you want to delete this employee?\nReally to delete?", "Really?", JOptionPane.YES_OPTION);
        if(option == JOptionPane.YES_OPTION)
        {
            Employee emp = new Employee(emid, username, pass, namee, addr, email, phone, manager, java.sql.Date.valueOf(birth), java.sql.Date.valueOf(startday), hourwage, role);
            if(EmployeeDAO.update(emp, "N/A " + username, pass, namee, java.sql.Date.valueOf(birth), java.sql.Date.valueOf(startday), addr, email, phone, role, hourwage, manager, 1) != 0)
            {
                JOptionPane.showMessageDialog(null, "Delete employee succesful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Delete employee fail!");
            }
        }
        btnResetEmpActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteEmpActionPerformed

    private void btnResetEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetEmpActionPerformed
        btnInsertEmp.setEnabled(true);
        btnInsertEmp.setText("Insert");
        btnUpdateEmp.setEnabled(true);
        btnUpdateEmp.setText("Update");
        btnDeleteEmp.setEnabled(true);
        setEmployeeFormControl(false);
        
        txtIDEmp.setText("");
        txtUsernameEmp.setText("");
        txtPassEmp.setText("");
        txtPassConEmp.setText("");
        txtNameEmp.setText("");
        txtBirthEmp.setText("");
        txtStartDayEmp.setText("");
        txtHourWageEmp.setText("");
        txtAddrEmp.setText("");
        txtEmailEmp.setText("");
        txtPhoneEmp.setText("");
        cboRoleEmployee.setSelectedIndex(0);
        
        modelEmployee.getDataVector().removeAllElements();
        modelEmployee.fireTableDataChanged();
        dsEmployee = EmployeeDAO.getList();
        modelEmployee.setRowCount(0);
        for(Employee d:dsEmployee)
        {
            if(d.getManager().equalsIgnoreCase(a.getAd_id()) && d.getEm_role() != 3)
            {
                Vector v = new Vector();
                v.add(d.getEm_id());
                v.add(d.getUsername());
                v.add(d.getPass());
                v.add(d.getName());
                v.add(d.getBirth());
                v.add(d.getStartday());
                v.add(d.getHour_wage());
                v.add(d.getAddr());
                v.add(d.getEmail());
                v.add(d.getPhone());
                if(d.getEm_role() == 1)
                {
                    v.add("Nước");
                }
                else
                {
                    v.add("Bếp");
                }
                //v.add(d.getEm_role());
                v.add(d.getManager());
                modelEmployee.addRow(v);
            }
        }
        sorterEmployee = (TableRowSorter<TableModel>) vwEmployee.getRowSorter();
    }//GEN-LAST:event_btnResetEmpActionPerformed

    private void btnInsertCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertCusActionPerformed
        if(btnInsertCus.getText().equals("Insert"))
        {
            btnInsertCus.setText("Save");
            btnUpdateCus.setEnabled(false);
            btnDeleteCus.setEnabled(false);
            setCustomerControl(true);

            txtIDCus.setText("auto");            
            txtNameCus.setText("");
            txtPhoneCus.setText("");
            txtEmailCus.setText("");
            txtDiscountCus.setText("");
            return;
        }
        if(btnInsertCus.getText().equals("Save"))
        {
            String cusid = txtIDCus.getText().trim();
            
            String name = txtNameCus.getText().trim();
            if(name.length() == 0 || name.length() > 40)
            {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                txtNameCus.requestFocus();
                return;
            }
            
            String phone = txtPhoneCus.getText().trim();
            if(phone.length() != 0)
            {
                try
                {
                    if(phone.length() > 12)
                    {
                        JOptionPane.showMessageDialog(null, "Phone is not valid!");
                        txtPhoneCus.requestFocus();
                        return;
                    }
                    if(Integer.parseInt(phone) < 0)
                    {
                        JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                        txtPhoneCus.requestFocus();
                        return;
                    }

                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                    txtPhoneCus.requestFocus();
                    return;
                }
            }
            
            String email = txtEmailCus.getText().trim();
            if(email.length() != 0)
            {
                Pattern pemail = Pattern.compile("[\\w\\d]+[@][\\w]+[.][\\w]+");
                Matcher m = null;
                try
                {
                    m = pemail.matcher(email);
                    if(!m.matches())
                    {
                        JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                        txtEmailCus.requestFocus();
                        return;
                    }
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                    txtEmailCus.requestFocus();
                    return;
                }
            }
            
            int discount;
            try
            {
                discount = Integer.parseInt(txtDiscountCus.getText().trim());
                if(discount <= 0)
                {
                    JOptionPane.showMessageDialog(null, "Discount must be greater than 0!");
                    txtDiscountCus.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Discount must be only contain integer number!");
                txtDiscountCus.requestFocus();
                return;
            }
            
            Customer cus = new Customer(cusid, name, phone, email, discount, 0);
            if(CustomerDAO.insert(cus) != 0)
            {
                JOptionPane.showMessageDialog(null, "Insert successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Insert fail!");
                btnInsertCus.setText("Insert");
                btnUpdateCus.setEnabled(true);
                btnDeleteCus.setEnabled(true);
                txtIDCus.setText("");            
                txtNameCus.setText("");
                txtPhoneCus.setText("");
                txtEmailCus.setText("");
                txtDiscountCus.setText("");
            }
            txtIDCus.setText(cus.getCus_id());
            btnInsertCus.setText("Insert");
            btnUpdateCus.setEnabled(true);
            btnDeleteCus.setEnabled(true);
            setCustomerControl(false);
            modelCustomer.getDataVector().removeAllElements();
            modelCustomer.fireTableDataChanged();
            dsCustomer = CustomerDAO.getListAll();
            modelCustomer.setRowCount(0);
            for(Customer d:dsCustomer)
            {
                if(d.getDeleted() == 0)
                {
                    modelCustomer.addRow(d.toVector());
                }
            }
            sorterCustomer = (TableRowSorter<TableModel>) vwCustomer.getRowSorter();
        }
    }//GEN-LAST:event_btnInsertCusActionPerformed

    private void btnUpdateCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCusActionPerformed
        if(btnUpdateCus.getText().equals("Update"))
        {
            int row = vwCustomer.getSelectedRow();
            if(row < 0)
            {
                JOptionPane.showMessageDialog(null, "Must be choose a customer you want to update");
                return;
            }
            btnUpdateCus.setText("Save");
            btnInsertCus.setEnabled(false);
            btnDeleteCus.setEnabled(false);
            setCustomerControl(true);
            return;
        }
        if(btnUpdateCus.getText().equals("Save"))
        {
            String cusid = txtIDCus.getText().trim();
            
            String name = txtNameCus.getText().trim();
            if(name.length() == 0 || name.length() > 40)
            {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                txtNameCus.requestFocus();
                return;
            }
            
            String phone = txtPhoneCus.getText().trim();
            if(phone.length() != 0)
            {
                try
                {
                    if(phone.length() > 12)
                    {
                        JOptionPane.showMessageDialog(null, "Phone is not valid!");
                        txtPhoneCus.requestFocus();
                        return;
                    }
                    if(Integer.parseInt(phone) < 0)
                    {
                        JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                        txtPhoneCus.requestFocus();
                        return;
                    }

                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Phone is not valid! Phone must be only contain integer number!");
                    txtPhoneCus.requestFocus();
                    return;
                }
            }
            
            String email = txtEmailCus.getText().trim();
            if(email.length() != 0)
            {
                Pattern pemail = Pattern.compile("[\\w\\d]+[@][\\w]+[.][\\w]+");
                Matcher m = null;
                try
                {
                    m = pemail.matcher(email);
                    if(!m.matches())
                    {
                        JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                        txtEmailCus.requestFocus();
                        return;
                    }
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Email is not valid!\nHint: xxx@xx.xx(.xx)");
                    txtEmailCus.requestFocus();
                    return;
                }
            }
            
            int discount;
            try
            {
                discount = Integer.parseInt(txtDiscountCus.getText().trim());
                if(discount <= 0)
                {
                    JOptionPane.showMessageDialog(null, "Discount must be greater than 0!");
                    txtDiscountCus.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Discount must be only contain integer number!");
                txtDiscountCus.requestFocus();
                return;
            }
            
            Customer cus = new Customer(cusid, name, phone, email, discount, 0);
            if(CustomerDAO.update(cus, name, phone, email, discount, 0) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update customer successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update customer fail!");
                btnUpdateCus.setText("Update");
                btnInsertCus.setEnabled(true);
                btnDeleteCus.setEnabled(true);
                txtIDCus.setText("");            
                txtNameCus.setText("");
                txtPhoneCus.setText("");
                txtEmailCus.setText("");
                txtDiscountCus.setText("");
            }
            btnUpdateCus.setText("Update");
            btnInsertCus.setEnabled(true);
            btnDeleteCus.setEnabled(true);
            setCustomerControl(false);
            modelCustomer.getDataVector().removeAllElements();
            modelCustomer.fireTableDataChanged();
            dsCustomer = CustomerDAO.getListAll();
            modelCustomer.setRowCount(0);
            for(Customer d:dsCustomer)
            {
                if(d.getDeleted() == 0)
                {
                    modelCustomer.addRow(d.toVector());
                }
            }
            sorterCustomer = (TableRowSorter<TableModel>) vwCustomer.getRowSorter();
        }
    }//GEN-LAST:event_btnUpdateCusActionPerformed

    private void btnDeleteCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCusActionPerformed
        int row = vwCustomer.getSelectedRow();
        if(row < 0)
        {
            JOptionPane.showMessageDialog(null, "Choose a customer want to delete!");
            return;
        }
        
        String cus_id = txtIDCus.getText().trim();
        String name = txtNameCus.getText().trim();
        String phone = txtPhoneCus.getText().trim();
        String email = txtEmailCus.getText().trim();
        int discount = Integer.parseInt(txtDiscountCus.getText().trim());
        
        int option = JOptionPane.showConfirmDialog(null, "Do you want to delete this customer?\nThis action will be already delete ALL order by this customer!\nReally to delete?", "Really?", JOptionPane.YES_OPTION);
                
        if(option == JOptionPane.YES_OPTION)
        {
//            for(Order d:dsOrder)
//            {
//                if(d.getCus_id().equals(cus_id))
//                {
//                    if(OrderDetailsDAO.delete(d.getOrder_id()) != 0)
//                    {
//                        if(OrderDAO.delete(cus_id) != 0)
//                        {
//                            if(CustomerDAO.delete(cus_id) != 0)
//                            {
//                                JOptionPane.showMessageDialog(null, "Delete customer successful!");
//                            }
//                            else
//                            {
//                                JOptionPane.showMessageDialog(null, "Delete customer fail!");
//                            }
//                        }
//                    }
//                }
//            }
            
            Customer cus = new Customer(cus_id, name, phone, email, discount, 0);
            
            if(CustomerDAO.update(cus, "(deleted) " + name, "N/A " + phone, "N/A " + email, 0, 1)!= 0)
            {
                JOptionPane.showMessageDialog(null, "Delete customer successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Delete customer fail!");
            }
        }
        modelCustomer.getDataVector().removeAllElements();
        modelCustomer.fireTableDataChanged();
        dsCustomer = CustomerDAO.getListAll();
        for(Customer d:dsCustomer)
        {
            modelCustomer.addRow(d.toVector());
        }
        sorterCustomer = (TableRowSorter<TableModel>) vwCustomer.getRowSorter();
        btnResetCusActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteCusActionPerformed

    private void btnResetCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetCusActionPerformed
        btnInsertCus.setEnabled(true);
        btnInsertCus.setText("Insert");
        btnUpdateCus.setEnabled(true);
        btnUpdateCus.setText("Update");
        btnDeleteCus.setEnabled(true);
        setCustomerControl(false);
        
        txtIDCus.setText("");            
        txtNameCus.setText("");
        txtPhoneCus.setText("");
        txtEmailCus.setText("");
        txtDiscountCus.setText("");
        
        modelCustomer.getDataVector().removeAllElements();
        modelCustomer.fireTableDataChanged();
        dsCustomer = CustomerDAO.getListAll();
        modelCustomer.setRowCount(0);
        for(Customer d:dsCustomer)
        {
            if(d.getDeleted() == 0)
            {
                modelCustomer.addRow(d.toVector());
            }
        }
        sorterCustomer = (TableRowSorter<TableModel>) vwCustomer.getRowSorter();
    }//GEN-LAST:event_btnResetCusActionPerformed

    private void btnFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFoodActionPerformed
        if(this.btnFood.isSelected())
        {
            this.btnFood.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card5");
            
            initDatavwFood();
            initDatavwFD();
            setFoodControl(false);
            btnResetFoodActionPerformed(evt);
            setFDControl(false);
            btnResetFDActionPerformed(evt);
        }
        else
        {
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
        CardLayout cl = (CardLayout) this.pnFoodFormInput.getLayout();
        cl.show(pnFoodFormInput, "card2");
    }//GEN-LAST:event_btnFoodActionPerformed

    private void btnFoodMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFoodMaterialActionPerformed
        if(this.btnFoodMaterial.isSelected())
        {
            this.btnFoodMaterial.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card6");
            
            initDatavwFM();
            initcboTypeFM();
            initcboUnitBuyFM();
            setFMControl(false);
            btnResetFMActionPerformed(evt);
        }
        else
        {
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnFoodMaterialActionPerformed

    private void vwFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwFoodMouseClicked
        int row = vwFood.getSelectedRow();
        
        CardLayout cl = (CardLayout) this.pnFoodFormInput.getLayout();
        cl.show(pnFoodFormInput, "card2");
        
        setFoodControl(false);
        btnInsertFood.setEnabled(true);
        btnInsertFD.setEnabled(true);
        btnSaveFood.setVisible(false);
        btnUpdateFood.setEnabled(true);
        btnUpdateFood.setText("Update");
        btnDeleteFood.setEnabled(true);
        if(row >= 0)
        {
            txtIDFood.setText(modelFood.getValueAt(row, 0).toString());
            txtNameFood.setText(modelFood.getValueAt(row, 1).toString());
            txtInfoFood.setText(modelFood.getValueAt(row, 2).toString());
            txtPriceFood.setText(modelFood.getValueAt(row, 3).toString());
            cboTypeFood.setSelectedItem(modelFood.getValueAt(row, 4).toString());
            initDatavwFood(txtIDFood.getText().trim());
        }
    }//GEN-LAST:event_vwFoodMouseClicked

    private void vwFDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwFDMouseClicked
        int row = vwFD.getSelectedRow();
        
        CardLayout cl = (CardLayout) this.pnFoodFormInput.getLayout();
        cl.show(pnFoodFormInput, "card3");
        
        setFDControl(false);
        btnInsertFood.setEnabled(true);
        btnInsertFD.setEnabled(true);
        btnSaveFD.setVisible(false);
        btnUpdateFD.setEnabled(true);
        btnUpdateFD.setText("Update");
        btnDeleteFD.setEnabled(true);
        if(row >= 0)
        {
            txtIDFD.setText(modelFD.getValueAt(row, 0).toString());
            txtFoodIDFD.setText(modelFD.getValueAt(row, 1).toString());
            cboFoodNameFD.setSelectedItem(modelFD.getValueAt(row, 2).toString());
            txtFMIDFD.setText(modelFD.getValueAt(row, 3).toString());
            cboFMNameFD.setSelectedItem(modelFD.getValueAt(row, 4).toString());
            txtQuanFD.setText(modelFD.getValueAt(row, 5).toString());
            txtUnitUseFD.setText(modelFD.getValueAt(row, 6).toString());
        }
        
    }//GEN-LAST:event_vwFDMouseClicked

    private void btnResetFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFoodActionPerformed
        txtIDFood.setText("");
        txtNameFood.setText("");
        txtInfoFood.setText("");
        txtPriceFood.setText("");
        cboTypeFood.setSelectedIndex(0);
        
        setFoodControl(false);
        btnInsertFood.setEnabled(true);
        btnUpdateFood.setEnabled(true);
        btnUpdateFood.setText("Update");
        btnDeleteFood.setEnabled(true);
        btnSaveFood.setVisible(false);
        
        modelFD.getDataVector().removeAllElements();
        modelFD.fireTableDataChanged();
        dsFD = FoodDetailsDAO.getList();
        for(FoodDetails d:dsFD)
        {
            Vector v = new Vector();
            v.add(d.getFd_id());
            v.add(d.getFood_id());
            for(Food dfood:dsFood)
            {
                if(dfood.getFood_id().equals(d.getFood_id()))
                {
                    v.add(dfood.getName());
                }
            }
            v.add(d.getFm_id());
            for(FoodMaterial dfm:dsFM)
            {
                if(dfm.getFm_id().equals(d.getFm_id()))
                {
                    v.add(dfm.getName());
                }
            }
            v.add(d.getQuan());
            v.add(d.getUnit_use());
            modelFD.addRow(v);
        }
        sorterFD = (TableRowSorter<TableModel>) vwFD.getRowSorter();
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        dsFood = FoodDAO.getListAll();
        for(Food d:dsFood)
        {
            if(d.getDeleted() == 0)
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
        sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
    }//GEN-LAST:event_btnResetFoodActionPerformed

    private void btnDeleteFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFoodActionPerformed
        int row = vwFood.getSelectedRow();
        if(row < 0)
        {
            JOptionPane.showMessageDialog(null, "Choose a food you want to delete!");
            return;
        }
        
        String foodid = txtIDFood.getText().trim();
        String name = txtNameFood.getText().trim();
        String info = txtInfoFood.getText().trim();
        float price = Float.parseFloat(txtPriceFood.getText().trim());
        byte isdrink = (byte) cboTypeFood.getSelectedIndex();
        
        Food food = new Food(foodid, name, info, price, isdrink, 0);
        
        int option = JOptionPane.showConfirmDialog(null, "Do you want to delete this food?\nThis action will be delete ALL food details!\nReally to delete?", "Really?", JOptionPane.YES_OPTION);
        if(option == JOptionPane.YES_OPTION)
        {
            for(FoodDetails d:dsFD)
            {
                if(d.getFood_id().equals(foodid))
                {
                    FoodDetailsDAO.delete(d.getFd_id());
                }
            }
            if(FoodDAO.update(food, "(deleted) " + name, info, price, isdrink, 1) != 0)
            {
                JOptionPane.showMessageDialog(null, "Delete food successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Delete food fail!");
            }
        }
        
        btnResetFoodActionPerformed(evt);
        btnResetFDActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteFoodActionPerformed

    private void btnUpdateFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFoodActionPerformed
        if(btnUpdateFood.getText().equals("Update"))
        {
            int row = vwFood.getSelectedRow();
            if(row < 0)
            {
                JOptionPane.showMessageDialog(null, "Choose a food you want to update!");
                return;
            }
            setFoodControl(true);
            btnUpdateFood.setText("Save");
            btnDeleteFood.setEnabled(false);
            return;
        }
        if(btnUpdateFood.getText().equals("Save"))
        {
            String foodid = txtIDFood.getText().trim();
            
            String name = txtNameFood.getText().trim();
            if(name.length() == 0 || name.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Food name is not valid!");
                txtNameFood.requestFocus();
                return;
            }

            String info = txtInfoFood.getText().trim();
            if(info.length() > 0)
            {
                if(info.length() > 200)
                {
                    JOptionPane.showMessageDialog(null, "Food information is not valid");
                    txtInfoFood.requestFocus();
                    return;
                }
            }

            float price;
            try
            {
                price = Float.parseFloat(txtPriceFood.getText().trim());
                if(price < 0)
                {
                    JOptionPane.showMessageDialog(null, "Price is not valid! Price must be greater than 0!");
                    txtPriceFood.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Price must be only contain number!");
                txtPriceFood.requestFocus();
                return;
            }

            byte isdrink = (byte) cboTypeFood.getSelectedIndex();

            Food food = new Food(foodid, name, info, price, isdrink, 0);
            if(FoodDAO.update(food, name, info, price, isdrink, 0) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update food successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update food fail!");
                txtIDFood.setText("");
                txtNameFood.setText("");
                txtInfoFood.setText("");
                txtPriceFood.setText("");
                cboTypeFood.setSelectedIndex(0);
            }
            txtIDFood.setText(food.getFood_id());
            btnUpdateFood.setText("Update");
            btnUpdateFood.setEnabled(true);
            btnDeleteFood.setEnabled(true);
            setFoodControl(false);
            modelFood.getDataVector().removeAllElements();
            modelFood.fireTableDataChanged();
            dsFood = FoodDAO.getListAll();
            for(Food d:dsFood)
            {
                if(d.getDeleted() == 0)
                {
                    Vector v = new Vector();
                    v.add(d.getFood_id());
                    v.add(d.getName());
                    v.add(d.getInfo());
                    v.add(d.getPrice());
                    if(d.getIsdrink() == 0)
                    {
                        v.add("Uống");
                    }
                    if(d.getIsdrink() == 1)
                    {
                        v.add("Ăn");
                    }
                    if(d.getIsdrink() == 2)
                    {
                        v.add("Khác");
                    }
                    //v.add(d.getIsdrink());
                    modelFood.addRow(v);
                }
            }
            sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
        }
    }//GEN-LAST:event_btnUpdateFoodActionPerformed

    private void btnResetFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFDActionPerformed
        txtIDFD.setText("auto");
        txtFoodIDFD.setText("");
        cboFoodNameFD.setSelectedIndex(0);
        txtFMIDFD.setText("");
        cboFMNameFD.setSelectedIndex(0);
        txtQuanFD.setText("");
        txtUnitUseFD.setText("");
        
        setFDControl(false);
        btnInsertFD.setEnabled(true);
        btnSaveFD.setVisible(false);
        btnUpdateFD.setEnabled(true);
        btnUpdateFD.setText("Update");
        btnDeleteFD.setEnabled(true);
        
        modelFD.getDataVector().removeAllElements();
        modelFD.fireTableDataChanged();
        dsFD = FoodDetailsDAO.getList();
        for(FoodDetails d:dsFD)
        {
            Vector v = new Vector();
            v.add(d.getFd_id());
            v.add(d.getFood_id());
            for(Food dfood:dsFood)
            {
                if(dfood.getFood_id().equals(d.getFood_id()))
                {
                    v.add(dfood.getName());
                }
            }
            v.add(d.getFm_id());
            for(FoodMaterial dfm:dsFM)
            {
                if(dfm.getFm_id().equals(d.getFm_id()))
                {
                    v.add(dfm.getName());
                }
            }
            v.add(d.getQuan());
            v.add(d.getUnit_use());
            modelFD.addRow(v);
        }
        sorterFD = (TableRowSorter<TableModel>) vwFD.getRowSorter();
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        dsFood = FoodDAO.getListAll();
        for(Food d:dsFood)
        {
            if(d.getDeleted() == 0)
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
        sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
    }//GEN-LAST:event_btnResetFDActionPerformed

    private void btnDeleteFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFDActionPerformed
        int row = vwFD.getSelectedRow();
        if(row < 0)
        {
            JOptionPane.showMessageDialog(null, "Choose food details you want to search!");
            return;
        }
        
        String fdid = txtIDFD.getText().trim();
        
        int option = JOptionPane.showConfirmDialog(null, "Doyou want to delete this food details?", "Really?", JOptionPane.YES_OPTION);
        if(option == JOptionPane.YES_OPTION)
        {
            if(FoodDetailsDAO.delete(fdid) != 0)
            {
                JOptionPane.showMessageDialog(null, "Delete food details successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Delete food details fail!");
            }
        }
        btnResetFDActionPerformed(evt);
        btnResetFoodActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteFDActionPerformed

    private void btnUpdateFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFDActionPerformed
        if(btnUpdateFD.getText().equals("Update"))
        {
            int row = vwFD.getSelectedRow();
            if(row < 0)
            {
                JOptionPane.showMessageDialog(null, "Choose a food details you want to update!");
                return;
            }
            setFDControl(true);
            btnUpdateFD.setText("Save");
            btnDeleteFD.setEnabled(false);
            return;
        }
        if(btnUpdateFD.getText().equals("Save"))
        {
            String fdid = txtIDFD.getText().trim();

            if(cboFoodNameFD.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(null, "Details for food must be choosed!");
                cboFoodNameFD.requestFocus();
                return;
            }
            String foodid = txtFoodIDFD.getText().trim();

            if(cboFMNameFD.getSelectedIndex() == 0)
            {
                JOptionPane.showMessageDialog(null, "Details for food must be choosed!");
                cboFMNameFD.requestFocus();
                return;
            }
            String fmid = txtFMIDFD.getText().trim();

            float quan;
            try
            {
                quan = Float.parseFloat(txtQuanFD.getText());
                if(quan < 0)
                {
                    JOptionPane.showMessageDialog(null, "Quantity must be greater than 0!");
                    txtQuanFD.requestFocus();
                    return;
                }
                //bo sung them sau
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Quantity must be only contain number!");
                txtQuanFD.requestFocus();
                return;
            }

            String unituse = txtUnitUseFD.getText().trim();

            FoodDetails fd = new FoodDetails(fdid, foodid, fmid, unituse, quan);
            if(FoodDetailsDAO.update(fd, foodid, fmid, quan, unituse) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update food details successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update food details fail!");
                txtIDFD.setText("");
                txtFoodIDFD.setText("");
                cboFoodNameFD.setSelectedIndex(0);
                txtFMIDFD.setText("");
                cboFMNameFD.setSelectedIndex(0);
                txtQuanFD.setText("");
                txtUnitUseFD.setText("");
            }
            btnUpdateFD.setEnabled(true);
            btnUpdateFD.setText("Update");
            btnDeleteFD.setEnabled(true);
            setFDControl(false);
            modelFD.getDataVector().removeAllElements();
            modelFD.fireTableDataChanged();
            dsFD = FoodDetailsDAO.getList();
            for(FoodDetails d:dsFD)
            {
                Vector v = new Vector();
                v.add(d.getFd_id());
                v.add(d.getFood_id());
                for(Food dfood:dsFood)
                {
                    if(dfood.getFood_id().equals(d.getFood_id()))
                    {
                        v.add(dfood.getName());
                    }
                }
                v.add(d.getFm_id());
                for(FoodMaterial dfm:dsFM)
                {
                    if(dfm.getFm_id().equals(d.getFm_id()))
                    {
                        v.add(dfm.getName());
                    }
                }
                v.add(d.getQuan());
                v.add(d.getUnit_use());
                modelFD.addRow(v);
            }
            sorterFD = (TableRowSorter<TableModel>) vwFD.getRowSorter();
            modelFood.getDataVector().removeAllElements();
            modelFood.fireTableDataChanged();
            dsFood = FoodDAO.getListAll();
            for(Food d:dsFood)
            {
                if(d.getDeleted() == 0)
                {
                    Vector v = new Vector();
                    v.add(d.getFood_id());
                    v.add(d.getName());
                    v.add(d.getInfo());
                    v.add(d.getPrice());
                    if(d.getIsdrink() == 0)
                    {
                        v.add("Uống");
                    }
                    if(d.getIsdrink() == 1)
                    {
                        v.add("Ăn");
                    }
                    if(d.getIsdrink() == 2)
                    {
                        v.add("Khác");
                    }
                    //v.add(d.getIsdrink());
                    modelFood.addRow(v);
                }
            }
            sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
        }
    }//GEN-LAST:event_btnUpdateFDActionPerformed

    private void btnSearchFMNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFMNameActionPerformed
        String dkFMName = JOptionPane.showInputDialog("Input an food material name want to search");
//        sorterFM.setRowFilter(RowFilter.regexFilter(dkFMName.trim(), 1));
        modelFM.getDataVector().removeAllElements();
        modelFM.fireTableDataChanged();
        for (FoodMaterial d:dsFM)
        {
            if (d.getName().toUpperCase().contains(dkFMName.trim().toUpperCase()) || d.getName().toLowerCase().contains(dkFMName.trim().toLowerCase()))
            {
                Vector v = new Vector();
                v.add(d.getFm_id());
                v.add(d.getName());
                v.add(d.getInfo());
                if(d.getUsefor() == 0)
                {
                    v.add("Uống");
                }
                if(d.getUsefor() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getUsefor() == 2)
                {
                    v.add("Không rõ lượng dùng");
                }
                if(d.getUsefor() == 3)
                {
                    v.add("Khác");
                }
//                v.add(d.getUsefor());
                v.add(d.getFmtype());
                v.add(d.getUnit_buy());
                v.add(d.getStandard_price());
                v.add(d.getSupplier());
                modelFM.addRow(v);
            }
        }
    }//GEN-LAST:event_btnSearchFMNameActionPerformed

    private void btnResetFMDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFMDataActionPerformed
//        String dkFMName = "(?i)" + "";
//        sorterFM.setRowFilter(RowFilter.regexFilter(dkFMName.trim(), 1));
        modelFM.getDataVector().removeAllElements();
        modelFM.fireTableDataChanged();
        for (FoodMaterial d:dsFM)
        {
            modelFM.addRow(d.toVector());
        }
        
        btnResetFMActionPerformed(evt);
    }//GEN-LAST:event_btnResetFMDataActionPerformed

    private void vwFMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwFMMouseClicked
        int row = vwFM.getSelectedRow();

        setFMControl(false);
        btnInsertFM.setEnabled(true);
        btnInsertFM.setText("Insert");
        btnUpdateFM.setEnabled(true);
        btnUpdateFM.setText("Update");
        btnDeleteFM.setEnabled(true);
        txtTypeOtherFM.setVisible(false);
        txtTypeOtherFM.setText("");
        txtUnitBuyOtherFM.setVisible(false);
        txtUnitBuyOtherFM.setText("");
        if(row >= 0)
        {
            txtIDFM.setEnabled(false);
            txtIDFM.setText(modelFM.getValueAt(row, 0).toString());
            txtNameFM.setText(modelFM.getValueAt(row, 1).toString());
            txtInfoFM.setText(modelFM.getValueAt(row, 2).toString());
            switch(modelFM.getValueAt(row, 3).toString())
            {
                case "Uống":
                    cboUseForFM.setSelectedIndex(0);
                    break;
                case "Ăn":
                    cboUseForFM.setSelectedIndex(1);
                    break;
                case "Không rõ lượng dùng":
                    cboUseForFM.setSelectedIndex(2);
                    break;
                case "Khác":
                    cboUseForFM.setSelectedIndex(3);
            }
            cboTypeFM.setSelectedItem(modelFM.getValueAt(row, 4).toString());
            cboUnitBuyFM.setSelectedItem(modelFM.getValueAt(row, 5).toString());
            txtStandardPriceFM.setText(modelFM.getValueAt(row, 6).toString());
            txtSupplierFM.setText(modelFM.getValueAt(row, 7).toString());
        }
    }//GEN-LAST:event_vwFMMouseClicked

    private void txtQuanFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuanFDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuanFDActionPerformed

    private void btnInsertFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertFMActionPerformed
        if(btnInsertFM.getText().equals("Insert"))
        {
            btnInsertFM.setText("Save");
            btnUpdateFM.setEnabled(false);
            btnDeleteFM.setEnabled(false);
            setFMControl(true);
            txtIDFM.setText("auto");
            txtNameFM.setText("");
            txtInfoFM.setText("");
            cboUseForFM.setSelectedIndex(0);
            cboTypeFM.setSelectedIndex(0);
            cboUnitBuyFM.setSelectedIndex(0);
            txtStandardPriceFM.setText("");
            txtSupplierFM.setText("");
            return;
        }
        if(btnInsertFM.getText().equals("Save"))
        {
            String fmid = txtIDFM.getText().trim();
            
            String name = txtNameFM.getText().trim();
            if(name.length() == 0 || name.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Food material name is not valid!");
                txtNameFM.requestFocus();
                return;
            }
            
            String info = txtInfoFM.getText().trim();
            if(info.length() > 0)
            {
                if(info.length() > 100)
                {
                    JOptionPane.showMessageDialog(null, "Food material information is not valid!");
                    txtInfoFM.requestFocus();
                    return;
                }
            }
            
            byte usefor = (byte) cboUseForFM.getSelectedIndex();
            
            String fmtype;
            if(cboTypeFM.getSelectedIndex() == 0)
            {
                fmtype = txtTypeOtherFM.getText().trim();
                if(fmtype.length() == 0 || fmtype.length() > 50)
                {
                    JOptionPane.showMessageDialog(null, "Food material type is not valid!");
                    txtTypeOtherFM.requestFocus();
                    return;
                }
            }
            else
            {
                fmtype = cboTypeFM.getSelectedItem().toString();
            }
            
            String unitbuy;
            if(cboUnitBuyFM.getSelectedIndex() == 0)
            {
                unitbuy = txtUnitBuyOtherFM.getText().trim();
                if(unitbuy.length() == 0 || unitbuy.length() > 100)
                {
                    JOptionPane.showMessageDialog(null, "Unit buy is not valid!");
                    txtUnitBuyOtherFM.requestFocus();
                    return;
                }
            }
            else
            {
                unitbuy = cboUnitBuyFM.getSelectedItem().toString();
            }
            
            float standardprice;
            try
            {
                standardprice = Float.parseFloat(txtStandardPriceFM.getText().trim());
                if(standardprice < 0)
                {
                    JOptionPane.showMessageDialog(null, "Standard price must be graeter than 0!");
                    txtStandardPriceFM.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Standard price must be only contain number!");
                txtStandardPriceFM.requestFocus();
                return;
            }
            
            String supplier = txtSupplierFM.getText().trim();
            if(supplier.length() == 0 || supplier.length() > 200)
            {
                JOptionPane.showMessageDialog(null, "Supplier is not valid!");
                txtSupplierFM.requestFocus();
                return;
            }
            
            FoodMaterial fm = new FoodMaterial(fmid, name, info, fmtype, unitbuy, supplier, usefor, standardprice);
            if(FoodMaterialDAO.insert(fm) != 0)
            {
                JOptionPane.showMessageDialog(null, "Insert food material succesful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Insert food material fail!");
                txtIDFM.setText("");
                txtNameFM.setText("");
                txtInfoFM.setText("");
                cboUseForFM.setSelectedIndex(0);
                cboTypeFM.setSelectedIndex(0);
                cboUnitBuyFM.setSelectedIndex(0);
                txtStandardPriceFM.setText("");
                txtSupplierFM.setText("");
            }
            txtIDFM.setText(fm.getFm_id());
            btnInsertFM.setText("Insert");
            btnUpdateFM.setEnabled(true);
            btnDeleteFM.setEnabled(true);
            setFMControl(false);
            initcboTypeFM();
            initcboUnitBuyFM();
            txtTypeOtherFM.setVisible(false);
            txtTypeOtherFM.setText("");
            cboTypeFM.setSelectedItem(fm.getFmtype());
            txtUnitBuyOtherFM.setVisible(false);
            txtUnitBuyOtherFM.setText("");
            cboUnitBuyFM.setSelectedItem(fm.getUnit_buy());
            modelFM.getDataVector().removeAllElements();
            modelFM.fireTableDataChanged();
            dsFM = FoodMaterialDAO.getList();
            for(FoodMaterial d:dsFM)
            {
                Vector v = new Vector();
                v.add(d.getFm_id());
                v.add(d.getName());
                v.add(d.getInfo());
                if(d.getUsefor() == 0)
                {
                    v.add("Uống");
                }
                if(d.getUsefor() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getUsefor() == 2)
                {
                    v.add("Không rõ lượng dùng");
                }
                if(d.getUsefor() == 3)
                {
                    v.add("Khác");
                }
//                v.add(d.getUsefor());
                v.add(d.getFmtype());
                v.add(d.getUnit_buy());
                v.add(d.getStandard_price());
                v.add(d.getSupplier());
                modelFM.addRow(v);
            }
            sorterFM = (TableRowSorter<TableModel>) vwFM.getRowSorter();
        }
    }//GEN-LAST:event_btnInsertFMActionPerformed

    private void btnUpdateFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFMActionPerformed
        if(btnUpdateFM.getText().equals("Update"))
        {
            int row = vwFM.getSelectedRow();
            if(row < 0)
            {
                JOptionPane.showMessageDialog(null, "Choose a food material want to update!");
                return;
            }
            btnUpdateFM.setText("Save");
            btnInsertFM.setEnabled(false);
            btnDeleteFM.setEnabled(false);
            setFMControl(true);
            cboTypeFM.setSelectedIndex(0);
            cboUnitBuyFM.setSelectedIndex(0);
            return;
        }
        if(btnUpdateFM.getText().equals("Save"))
        {
            String fmid = txtIDFM.getText().trim();
            
            String name = txtNameFM.getText().trim();
            if(name.length() == 0 || name.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Food material name is not valid!");
                txtNameFM.requestFocus();
                return;
            }
            
            String info = txtInfoFM.getText().trim();
            if(info.length() > 0)
            {
                if(info.length() > 100)
                {
                    JOptionPane.showMessageDialog(null, "Food material information is not valid!");
                    txtInfoFM.requestFocus();
                    return;
                }
            }
            
            byte usefor = (byte) cboUseForFM.getSelectedIndex();
            
            String fmtype;
            if(cboTypeFM.getSelectedIndex() == 0)
            {
                fmtype = txtTypeOtherFM.getText().trim();
                if(fmtype.length() == 0 || fmtype.length() > 50)
                {
                    JOptionPane.showMessageDialog(null, "Food material type is not valid!");
                    txtTypeOtherFM.requestFocus();
                    return;
                }
            }
            else
            {
                fmtype = cboTypeFM.getSelectedItem().toString();
            }
            
            String unitbuy;
            if(cboUnitBuyFM.getSelectedIndex() == 0)
            {
                unitbuy = txtUnitBuyOtherFM.getText().trim();
                if(unitbuy.length() == 0 || unitbuy.length() > 100)
                {
                    JOptionPane.showMessageDialog(null, "Unit buy is not valid!");
                    txtUnitBuyOtherFM.requestFocus();
                    return;
                }
            }
            else
            {
                unitbuy = cboUnitBuyFM.getSelectedItem().toString();
            }
            
            float standardprice;
            try
            {
                standardprice = Float.parseFloat(txtStandardPriceFM.getText().trim());
                if(standardprice < 0)
                {
                    JOptionPane.showMessageDialog(null, "Standard price must be graeter than 0!");
                    txtStandardPriceFM.requestFocus();
                    return;
                }
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(null, "Standard price must be only contain number!");
                txtStandardPriceFM.requestFocus();
                return;
            }
            
            String supplier = txtSupplierFM.getText().trim();
            if(supplier.length() == 0 || supplier.length() > 200)
            {
                JOptionPane.showMessageDialog(null, "Supplier is not valid!");
                txtSupplierFM.requestFocus();
                return;
            }
            
            FoodMaterial fm = new FoodMaterial(fmid, name, info, fmtype, unitbuy, supplier, usefor, standardprice);
            if(FoodMaterialDAO.update(fm, name, info, usefor, fmtype, unitbuy, supplier, standardprice, 0) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update food material succesful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update food material fail!");
                txtIDFM.setText("");
                txtNameFM.setText("");
                txtInfoFM.setText("");
                cboUseForFM.setSelectedIndex(0);
                cboTypeFM.setSelectedIndex(0);
                cboUnitBuyFM.setSelectedIndex(0);
                txtStandardPriceFM.setText("");
                txtSupplierFM.setText("");
            }
            btnUpdateFM.setText("Update");
            btnInsertFM.setEnabled(true);
            btnDeleteFM.setEnabled(true);
            setFMControl(false);
            initcboTypeFM();
            initcboUnitBuyFM();
            txtTypeOtherFM.setVisible(false);
            txtTypeOtherFM.setText("");
            cboTypeFM.setSelectedItem(fm.getFmtype());
            txtUnitBuyOtherFM.setVisible(false);
            txtUnitBuyOtherFM.setText("");
            cboUnitBuyFM.setSelectedItem(fm.getUnit_buy());
            modelFM.getDataVector().removeAllElements();
            modelFM.fireTableDataChanged();
            dsFM = FoodMaterialDAO.getList();
            for(FoodMaterial d:dsFM)
            {
                Vector v = new Vector();
                v.add(d.getFm_id());
                v.add(d.getName());
                v.add(d.getInfo());
                if(d.getUsefor() == 0)
                {
                    v.add("Uống");
                }
                if(d.getUsefor() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getUsefor() == 2)
                {
                    v.add("Không rõ lượng dùng");
                }
                if(d.getUsefor() == 3)
                {
                    v.add("Khác");
                }
//                v.add(d.getUsefor());
                v.add(d.getFmtype());
                v.add(d.getUnit_buy());
                v.add(d.getStandard_price());
                v.add(d.getSupplier());
                modelFM.addRow(v);
            }
            sorterFM = (TableRowSorter<TableModel>) vwFM.getRowSorter();
        }
    }//GEN-LAST:event_btnUpdateFMActionPerformed

    private void btnDeleteFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFMActionPerformed
        int row = vwFM.getSelectedRow();
        if(row < 0)
        {
            JOptionPane.showMessageDialog(null, "Choose a food material you want to delete!");
            return;
        }
        
        String fmid = txtIDFM.getText().trim();
        String name = txtNameFM.getText().trim();
        String info = txtInfoFM.getText().trim();
        byte usefor = (byte) cboUseForFM.getSelectedIndex();
        String fmtype = cboTypeFM.getSelectedItem().toString();
        String unitbuy = cboUnitBuyFM.getSelectedItem().toString();
        float standardprice = Float.parseFloat(txtStandardPriceFM.getText().trim());
        String supplier = txtSupplierFM.getText().trim();
        
        FoodMaterial fm = new FoodMaterial(fmid, name, info, fmtype, unitbuy, supplier, usefor, standardprice);
        
        int option = JOptionPane.showConfirmDialog(null, "Do you want to delete this customer?\nThis action will be delete ALL food details has contained it!\nReally to delete?", "Really?", JOptionPane.YES_OPTION);
        
        if(option == JOptionPane.YES_OPTION)
        {
            for(FoodDetails d:dsFD)
            {
                if(d.getFm_id().equals(fmid))
                {
                    FoodDetailsDAO.deletefm(fmid);
                }
            }
            if(FoodMaterialDAO.update(fm, name, info, usefor, fmtype, unitbuy, supplier, standardprice, 1) != 0)
            {
                JOptionPane.showMessageDialog(null, "Delete food material successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Delete food material fail!");
            }
        }
        btnResetFMActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteFMActionPerformed

    private void btnResetFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFMActionPerformed
        txtIDFM.setText("");
        txtNameFM.setText("");
        txtInfoFM.setText("");
        cboUseForFM.setSelectedIndex(0);
        cboTypeFM.setSelectedIndex(0);
        txtTypeOtherFM.setVisible(false);
        txtTypeOtherFM.setText("");
        cboUnitBuyFM.setSelectedIndex(0);
        txtUnitBuyOtherFM.setVisible(false);
        txtUnitBuyOtherFM.setText("");
        txtStandardPriceFM.setText("");
        txtSupplierFM.setText("");
        btnInsertFM.setEnabled(true);
        btnInsertFM.setText("Insert");
        btnUpdateFM.setEnabled(true);
        btnUpdateFM.setText("Update");
        btnDeleteFM.setEnabled(true);
        setFMControl(false);
        initcboTypeFM();
        initcboUnitBuyFM();
        modelFM.getDataVector().removeAllElements();
        modelFM.fireTableDataChanged();
        dsFM = FoodMaterialDAO.getList();
        for(FoodMaterial d:dsFM)
        {
            Vector v = new Vector();
            v.add(d.getFm_id());
            v.add(d.getName());
            v.add(d.getInfo());
            if(d.getUsefor() == 0)
            {
                v.add("Uống");
            }
            if(d.getUsefor() == 1)
            {
                v.add("Ăn");
            }
            if(d.getUsefor() == 2)
            {
                v.add("Không rõ lượng dùng");
            }
            if(d.getUsefor() == 3)
            {
                v.add("Khác");
            }
//            v.add(d.getUsefor());
            v.add(d.getFmtype());
            v.add(d.getUnit_buy());
            v.add(d.getStandard_price());
            v.add(d.getSupplier());
            modelFM.addRow(v);
        }
        sorterFM = (TableRowSorter<TableModel>) vwFM.getRowSorter();
        txtTypeOtherFM.setVisible(false);
        txtUnitBuyOtherFM.setVisible(false);
    }//GEN-LAST:event_btnResetFMActionPerformed

    private void cboTypeFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTypeFMActionPerformed
        if(cboTypeFM.getSelectedIndex() == 0)
        {
            txtTypeOtherFM.setVisible(true);
        }
        else
        {
            txtTypeOtherFM.setVisible(false);
        }
    }//GEN-LAST:event_cboTypeFMActionPerformed

    private void cboUnitBuyFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboUnitBuyFMActionPerformed
        if(cboUnitBuyFM.getSelectedIndex() == 0)
        {
            txtUnitBuyOtherFM.setVisible(true);
        }
        else
        {
            txtUnitBuyOtherFM.setVisible(false);
        }
    }//GEN-LAST:event_cboUnitBuyFMActionPerformed

    private void vwEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwEmployeeMouseClicked
        int row = vwEmployee.getSelectedRow();

        setEmployeeFormControl(false);
        btnInsertEmp.setText("Insert");
        btnInsertEmp.setEnabled(true);
        btnUpdateEmp.setText("Update");
        btnUpdateEmp.setEnabled(true);
        btnDeleteEmp.setText("Delete");
        btnDeleteEmp.setEnabled(true);
        if(row >= 0)
        {
            txtIDEmp.setEnabled(false);
            txtIDEmp.setText(modelEmployee.getValueAt(row, 0).toString());
            txtUsernameEmp.setEnabled(false);
            txtUsernameEmp.setText(modelEmployee.getValueAt(row, 1).toString());
            txtPassEmp.setText(modelEmployee.getValueAt(row, 2).toString());
            txtNameEmp.setText(modelEmployee.getValueAt(row, 3).toString());
            txtBirthEmp.setText(modelEmployee.getValueAt(row, 4).toString());
            txtStartDayEmp.setText(modelEmployee.getValueAt(row, 5).toString());
            txtHourWageEmp.setText(modelEmployee.getValueAt(row, 6).toString());
            txtAddrEmp.setText(modelEmployee.getValueAt(row, 7).toString());
            txtEmailEmp.setText(modelEmployee.getValueAt(row, 8).toString());
            txtPhoneEmp.setText(modelEmployee.getValueAt(row, 9).toString());
            if(modelEmployee.getValueAt(row, 10).toString().equals("Nước"))
            {
                cboRoleEmployee.setSelectedIndex(0);
            }
            else
            {
                cboRoleEmployee.setSelectedIndex(1);
            }
        }
    }//GEN-LAST:event_vwEmployeeMouseClicked

    private void btnSearchFoodNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFoodNameActionPerformed
        String dkFoodName = JOptionPane.showInputDialog("Input a food name want to search");
//        sorterFood.setRowFilter(RowFilter.regexFilter(dkCustomerName.trim(), 1));
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        for (Food d:dsFood)
        {
            if (d.getName().toUpperCase().contains(dkFoodName.trim().toUpperCase()) || d.getName().toLowerCase().contains(dkFoodName.trim().toLowerCase()))
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
//                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
    }//GEN-LAST:event_btnSearchFoodNameActionPerformed

    private void btnResetFoodDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFoodDataActionPerformed
//        String dkCustomerName = "(?i)" + "";
//        sorterFood.setRowFilter(RowFilter.regexFilter(dkCustomerName.trim(), 1));
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        for (Food d:dsFood)
        {
            modelFood.addRow(d.toVector());
        }
        modelFD.getDataVector().removeAllElements();
        modelFD.fireTableDataChanged();
        for (FoodDetails d:dsFD)
        {
            modelFD.addRow(d.toVector());
        }
        
        btnResetFoodActionPerformed(evt);
        btnResetFDActionPerformed(evt);
    }//GEN-LAST:event_btnResetFoodDataActionPerformed

    private void btnProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileActionPerformed
        if(this.btnProfile.isSelected())
        {
            this.btnProfile.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card9");
            
            initDataThisAdmin();
            setAdControl(false);
        }
        else
        {
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnProfileActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        if(btnOrder.isSelected())
        {
            this.btnOrder.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnSalaryNote.setSelected(false);
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card8");
            
            initDatavwOrder();
//            txtSearchOrderTime.setSize(0, 0);
//            btnSearchOrderTime.setText("Search by Order Time");
            btnResetOrderDataActionPerformed(evt);
        }
        else
        {
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnOrderActionPerformed

    private void vwOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwOrderMouseClicked
        int row = vwOrder.getSelectedRow();
        
        if(row >= 0)
        {
            initDatavwOD(modelOrder.getValueAt(row, 0).toString());
        }
    }//GEN-LAST:event_vwOrderMouseClicked

    private void btnInsertFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertFoodActionPerformed
        CardLayout cl = (CardLayout) this.pnFoodFormInput.getLayout();
        cl.show(pnFoodFormInput, "card2");

        setFoodControl(true);
        txtIDFood.setText("auto");
        txtNameFood.setText("");
        txtInfoFood.setText("");
        txtPriceFood.setText("");
        cboTypeFood.setSelectedIndex(0);

        btnInsertFood.setEnabled(false);
        btnInsertFD.setEnabled(true);
        btnSaveFood.setVisible(true);
        btnUpdateFood.setEnabled(false);
        btnUpdateFood.setText("Update");
        btnDeleteFood.setEnabled(false);
    }//GEN-LAST:event_btnInsertFoodActionPerformed

    private void btnInsertFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertFDActionPerformed
        CardLayout cl = (CardLayout) this.pnFoodFormInput.getLayout();
        cl.show(pnFoodFormInput, "card3");

        dsFood = FoodDAO.getListAll();
        dsFD = FoodDetailsDAO.getList();
        initDatacboName();
        setFDControl(true);
        txtIDFD.setText("auto");
        txtFoodIDFD.setText("");
        cboFoodNameFD.setSelectedIndex(0);
        txtFMIDFD.setText("");
        cboFMNameFD.setSelectedIndex(0);
        txtQuanFD.setText("");
        txtUnitUseFD.setText("");

        btnInsertFood.setEnabled(true);
        btnInsertFD.setEnabled(false);
        btnSaveFD.setVisible(true);
        btnUpdateFD.setEnabled(false);
        btnUpdateFD.setText("Update");
        btnDeleteFD.setEnabled(false);
    }//GEN-LAST:event_btnInsertFDActionPerformed

    private void btnSearchOrderTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOrderTimeActionPerformed
        String dkOrderTime;
        int dky, dkm, dkd;
        dkOrderTime = txtSearchOrderTime.getText().trim();
        try
        {
            if(dkOrderTime.length() == 0 || dkOrderTime.length() > 10)
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchOrderTime.requestFocus();
                return;
            }
            dky = Integer.parseInt(dkOrderTime.substring(0, 4));
            dkm = Integer.parseInt(dkOrderTime.substring(5, 7));
            dkd = Integer.parseInt(dkOrderTime.substring(8, 10));
            if(dky < 0 || dkm < 0 || dkd < 0)
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchOrderTime.requestFocus();
                return;
            }
            if(dkOrderTime.charAt(4) != '-' || dkOrderTime.charAt(7) != '-')
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchOrderTime.requestFocus();
                return;
            }
            if(dkm > 12)
            {
                JOptionPane.showMessageDialog(null, "Time is not valid! Month of year must not be greater than 12!");
                txtSearchOrderTime.requestFocus();
                return;
            }
            if(dkm == 2)
            {
                if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                {
                    if(dkd > 29)
                    {
                        JOptionPane.showMessageDialog(null, "Time is not valid! Day of that month must not be greater than 29!");
                        txtSearchOrderTime.requestFocus();
                        return;
                    }
                }
                else
                {
                    if(dkd > 28)
                    {
                        JOptionPane.showMessageDialog(null, "Time is not valid! Day of that month must not be greater than 28!");
                        txtSearchOrderTime.requestFocus();
                        return;
                    }
                }
            }
            if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
            {
                if(dkd > 30)
                {
                    JOptionPane.showMessageDialog(null, "Time is not valid! Day of that month must not be greater than 30!");
                    txtSearchOrderTime.requestFocus();
                    return;
                }
            }
            if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
            {
                if(dkd > 31)
                {
                    JOptionPane.showMessageDialog(null, "Time is not valid! Day of that month must not be greater than 31!");
                    txtSearchOrderTime.requestFocus();
                    return;
                }
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
            requestFocus();
            return;
        }
        
        modelOrder.getDataVector().removeAllElements();
        modelOrder.fireTableDataChanged();
        for (Order d:dsOrder)
        {
            if(d.getOrdertime().toString().equals(dkOrderTime))
            {
                Vector v = new Vector();
                v.add(d.getOrder_id());
                v.add(d.getCus_id());
                for(Customer dcus:dsCustomer)
                {
                    if(dcus.getCus_id().equals(d.getCus_id()))
                    {
                        v.add(dcus.getName());
                    }
                }
                v.add(d.getOrdertable());
                v.add(d.getOrdertime());
                v.add(d.getPrice());
                v.add(d.getCustomerpay());
                v.add(d.getPayback());
                modelOrder.addRow(v);
            }
        }
        
        float todaysale = OrderDAO.getTodaySale(java.sql.Date.valueOf(dkOrderTime));
        lbTodaySale.setText("That day sale:");
        txtTodaySale.setText(todaysale + "");
    }//GEN-LAST:event_btnSearchOrderTimeActionPerformed

    private void btnResetOrderDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetOrderDataActionPerformed
        modelOrder.getDataVector().removeAllElements();
        modelOrder.fireTableDataChanged();
        for(Order d:dsOrder)
        {
            Vector v = new Vector();
            v.add(d.getOrder_id());
            v.add(d.getCus_id());
            for(Customer dcus:dsCustomer)
            {
                if(dcus.getCus_id().equals(d.getCus_id()))
                {
                    v.add(dcus.getName());
                }
            }
            v.add(d.getOrdertable());
            v.add(d.getOrdertime());
            v.add(d.getPrice());
            v.add(d.getCustomerpay());
            v.add(d.getPayback());
            modelOrder.addRow(v);
        }
        modelOD.getDataVector().removeAllElements();
        modelOD.fireTableDataChanged();
        initDatatxtTodaySale();
        txtSearchOrderTime.setText("");
    }//GEN-LAST:event_btnResetOrderDataActionPerformed

    private void btnResetReceiptDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetReceiptDataActionPerformed
        modelReceipt.getDataVector().removeAllElements();
        modelReceipt.fireTableDataChanged();
        for(ReceiptNote d:dsReceipt)
        {
            modelReceipt.addRow(d.toVector());
        }
        modelRD.getDataVector().removeAllElements();
        modelRD.fireTableDataChanged();
    }//GEN-LAST:event_btnResetReceiptDataActionPerformed

    private void btnSearchReceiptTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReceiptTimeActionPerformed
        String dkReceiptTime, dky, dkm, dkd;
        dkReceiptTime = txtSearchReceiptTime.getText().trim();
        try
        {
            if(dkReceiptTime.length() == 0 || dkReceiptTime.length() > 10)
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchReceiptTime.requestFocus();
                return;
            }
            dkm = dkReceiptTime.substring(5, 7);
            dkd = dkReceiptTime.substring(8, 10);
            dky = dkReceiptTime.substring(0, 4);
            if(Integer.parseInt(dky) < 0 || Integer.parseInt(dkm) < 0 || Integer.parseInt(dkd) < 0)
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchReceiptTime.requestFocus();
                return;
            }
            if(dkReceiptTime.charAt(4) != '-' || dkReceiptTime.charAt(7) != '-')
            {
                JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
                txtSearchReceiptTime.requestFocus();
                return;
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Time is not valid!\nHint: yyyy-MM-dd");
            requestFocus();
            return;
        }
        
        modelReceipt.getDataVector().removeAllElements();
        modelReceipt.fireTableDataChanged();
        for (ReceiptNote d:dsReceipt)
        {
            if(d.getRday().toString().equals(dkReceiptTime))
            {
                modelReceipt.addRow(d.toVector());
            }
        }
    }//GEN-LAST:event_btnSearchReceiptTimeActionPerformed

    private void vwReceiptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwReceiptMouseClicked
        int row = vwReceipt.getSelectedRow();
        
        if(row >= 0)
        {
            initDatavwRD(modelReceipt.getValueAt(row, 0).toString());
        }
    }//GEN-LAST:event_vwReceiptMouseClicked

    private void vwRDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vwRDMouseClicked
        
    }//GEN-LAST:event_vwRDMouseClicked

    private void btnSalaryNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalaryNoteActionPerformed
        if(this.btnSalaryNote.isSelected())
        {
            this.btnSalaryNote.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255, 255, 255));
            this.btnCustomer.setSelected(false);
            this.btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFood.setSelected(false);
            this.btnFood.setBackground(new java.awt.Color(255, 255, 255));
            this.btnFoodMaterial.setSelected(false);
            this.btnFoodMaterial.setBackground(new java.awt.Color(255, 255, 255));
//            this.btnReceiptNote.setSelected(false);
//            this.btnReceiptNote.setBackground(new java.awt.Color(255, 255, 255));
            this.btnOrder.setSelected(false);
            this.btnOrder.setBackground(new java.awt.Color(255, 255, 255));
            this.btnProfile.setSelected(false);
            this.btnProfile.setBackground(new java.awt.Color(255, 255, 255));
            
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card10");
            
            initDatacboEmployee();
            setSalaryControl(false);
        }
        else
        {
            this.btnSalaryNote.setBackground(new java.awt.Color(255, 255, 255));
            CardLayout cl = (CardLayout) this.pnDisplay.getLayout();
            cl.show(pnDisplay, "card2");
        }
    }//GEN-LAST:event_btnSalaryNoteActionPerformed

    private void btnScheNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnScheNextActionPerformed

    private void btnSchePreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSchePreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSchePreActionPerformed

    private void btnSearchEmpScheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEmpScheActionPerformed
        
    }//GEN-LAST:event_btnSearchEmpScheActionPerformed

    private void btnChangePassAdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePassAdActionPerformed
        new DiaAdminChangePass(this, true, a).setVisible(true);
    }//GEN-LAST:event_btnChangePassAdActionPerformed

    private void btnUpdateAdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAdActionPerformed
        if(btnUpdateAd.getText().equals("Update"))
        {
            txtNameAd.setEnabled(true);
            btnUpdateAd.setText("Save");
            return;
        }
        if(btnUpdateAd.getText().equals("Save"))
        {
            String namead = txtNameAd.getText().trim();
            if(namead.length() == 0 || namead.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Admin name is not valid!");
                txtNameAd.requestFocus();
                return;
            }
            if(AdminDAO.update(a, txtUsernameAd.getText().trim(), new String(txtPassAd.getPassword()).trim(), namead) != 0)
            {
                JOptionPane.showMessageDialog(null, "Update successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update fail!");
            }
            txtNameAd.setEnabled(false);
            btnUpdateAd.setText("Update");
            this.setTitle("Admin: " + namead);
        }
    }//GEN-LAST:event_btnUpdateAdActionPerformed

    private void btnSaveFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFoodActionPerformed
        String foodid = txtIDFD.getText().trim();

        String name = txtNameFood.getText().trim();
        if(name.length() == 0 || name.length() > 50)
        {
            JOptionPane.showMessageDialog(null, "Food name is not valid!");
            txtNameFood.requestFocus();
            return;
        }

        String info = txtInfoFood.getText().trim();
        if(info.length() > 0)
        {
            if(info.length() > 200)
            {
                JOptionPane.showMessageDialog(null, "Food information is not valid");
                txtInfoFood.requestFocus();
                return;
            }
        }

        float price;
        try
        {
            price = Integer.parseInt(txtPriceFood.getText().trim());
            if(price < 0)
            {
                JOptionPane.showMessageDialog(null, "Price is not valid! Price must be greater than 0!");
                txtPriceFood.requestFocus();
                return;
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Price must be only contain number!");
            txtPriceFood.requestFocus();
            return;
        }

        byte isdrink = (byte) cboTypeFood.getSelectedIndex();

        Food food = new Food(foodid, name, info, price, isdrink, 0);
        if(FoodDAO.insert(food) != 0)
        {
            JOptionPane.showMessageDialog(null, "Insert food successful!");
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Insert food fail!");
            txtIDFood.setText("");
            txtNameFood.setText("");
            txtInfoFood.setText("");
            txtPriceFood.setText("");
            cboTypeFood.setSelectedIndex(0);
        }
        txtIDFood.setText(food.getFood_id());
        btnInsertFood.setEnabled(true);
        btnUpdateFood.setEnabled(true);
        btnDeleteFood.setEnabled(true);
        btnSaveFood.setVisible(false);
        setFoodControl(false);
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        dsFood = FoodDAO.getListAll();
        for(Food d:dsFood)
        {
            if(d.getDeleted() == 0)
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
        sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
    }//GEN-LAST:event_btnSaveFoodActionPerformed

    private void cboFoodNameFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFoodNameFDActionPerformed
        for(Food d:dsFood)
        {
            if(cboFoodNameFD.getSelectedItem().equals(d.getName()))
            {
                txtFoodIDFD.setText(d.getFood_id());
            }
        }
    }//GEN-LAST:event_cboFoodNameFDActionPerformed

    private void cboFMNameFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFMNameFDActionPerformed
        for(FoodMaterial d:dsFM)
        {
            if(cboFMNameFD.getSelectedItem().equals(d.getName()))
            {
                txtFMIDFD.setText(d.getFm_id());
                
                txtUnitUseFD.setText(d.getUnit_buy());
            }
        }
    }//GEN-LAST:event_cboFMNameFDActionPerformed

    private void btnSaveFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFDActionPerformed
        String fdid = txtIDFD.getText().trim();
        
        if(cboFoodNameFD.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Details for food must be choosed!");
            cboFoodNameFD.requestFocus();
            return;
        }
        String foodid = txtFoodIDFD.getText().trim();
        
        if(cboFMNameFD.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Details for food must be choosed!");
            cboFMNameFD.requestFocus();
            return;
        }
        String fmid = txtFMIDFD.getText().trim();
        
        float quan;
        try
        {
            quan = Float.parseFloat(txtQuanFD.getText());
            if(quan < 0)
            {
                JOptionPane.showMessageDialog(null, "Quantity must be greater than 0!");
                txtQuanFD.requestFocus();
                return;
            }
            //bo sung them sau
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Quantity must be only contain number!");
            txtQuanFD.requestFocus();
            return;
        }
        
        String unituse = txtUnitUseFD.getText().trim();
        
        FoodDetails fd = new FoodDetails(fdid, foodid, fmid, unituse, quan);
        if(FoodDetailsDAO.insert(fd) != 0)
        {
            JOptionPane.showMessageDialog(null, "Insert food details successful!");
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Insert food details fail!");
            txtIDFD.setText("auto");
            txtFoodIDFD.setText("");
            cboFoodNameFD.setSelectedIndex(0);
            txtFMIDFD.setText("");
            cboFMNameFD.setSelectedIndex(0);
            txtQuanFD.setText("");
            txtUnitUseFD.setText("");
        }
        txtIDFD.setText(fd.getFd_id());
        btnInsertFD.setEnabled(true);
        btnSaveFD.setVisible(false);
        btnUpdateFD.setEnabled(true);
        btnDeleteFD.setEnabled(true);
        setFDControl(false);
        modelFD.getDataVector().removeAllElements();
        modelFD.fireTableDataChanged();
        dsFD = FoodDetailsDAO.getList();
        for(FoodDetails d:dsFD)
        {
            Vector v = new Vector();
            v.add(d.getFd_id());
            v.add(d.getFood_id());
            for(Food dfood:dsFood)
            {
                if(dfood.getFood_id().equals(d.getFood_id()))
                {
                    v.add(dfood.getName());
                }
            }
            v.add(d.getFm_id());
            for(FoodMaterial dfm:dsFM)
            {
                if(dfm.getFm_id().equals(d.getFm_id()))
                {
                    v.add(dfm.getName());
                }
            }
            v.add(d.getQuan());
            v.add(d.getUnit_use());
            modelFD.addRow(v);
        }
        sorterFD = (TableRowSorter<TableModel>) vwFD.getRowSorter();
        modelFood.getDataVector().removeAllElements();
        modelFood.fireTableDataChanged();
        dsFood = FoodDAO.getListAll();
        for(Food d:dsFood)
        {
            if(d.getDeleted() == 0)
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
        sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
    }//GEN-LAST:event_btnSaveFDActionPerformed

    private void btnInsertNewAdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertNewAdActionPerformed
        if(btnInsertNewAd.getText().equals("Insert New Admin"))
        {
            if(!(a.getUsername().equals("admin_username3")))
            {
                int option = JOptionPane.showConfirmDialog(null, "You need higher permission to insert new admin! Do you want to login another account?", "Warning", JOptionPane.YES_OPTION);
                if(option == JOptionPane.YES_OPTION)
                {
                    this.dispose();
                    new FrLogin().setVisible(true);
                }
            }
            else
            {
                setAdControl(true);
                txtPassAd.setEnabled(true);
                txtNameAd.setEnabled(true);
                txtIDAd.setText("auto");
                txtUsernameAd.setText("");
                txtPassAd.setText("");
                txtNameAd.setText("");
                btnInsertNewAd.setText("Save");
                return;
            }
        }
        if(btnInsertNewAd.getText().equals("Save"))
        {
            String adid = txtIDAd.getText().trim();
            
            String username = txtUsernameAd.getText().trim();
            if(username.length() == 0 || username.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Username is not valid!");
                txtUsernameAd.requestFocus();
                return;
            }
            List<Admin> dsAd = AdminDAO.getList();
            for(Admin d:dsAd)
            {
                if(d.getUsername().equals(username))
                {
                    JOptionPane.showMessageDialog(null, "Username is already exist!");
                    txtUsernameAd.requestFocus();
                    return;
                }
            }
            
            String pass = new String(txtPassAd.getPassword()).trim();
            if(pass.length() == 0 || pass.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Password is not valid!");
                txtPassAd.requestFocus();
                return;
            }
            
            String name = txtNameAd.getText().trim();
            if(name.length() == 0 || name.length() > 50)
            {
                JOptionPane.showMessageDialog(null, "Name is not valid!");
                txtNameAd.requestFocus();
                return;
            }
            
            Admin ad = new Admin(adid, username, pass, name);
            if(AdminDAO.insert(ad) != 0)
            {
                JOptionPane.showMessageDialog(null, "Insert new admin successful!");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Insert new admin fail!");
            }
            txtIDAd.setText(this.a.getAd_id());
            txtUsernameAd.setText(this.a.getUsername());
            txtPassAd.setText(this.a.getPass());
            txtNameAd.setText(this.a.getName());
            setAdControl(false);
            btnInsertNewAd.setText("Insert New Admin");
        }
    }//GEN-LAST:event_btnInsertNewAdActionPerformed

    private void btnExportReportOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportReportOrderActionPerformed
        new DiaOrderReport(this, true).setVisible(true);
    }//GEN-LAST:event_btnExportReportOrderActionPerformed

    private void btnExportReportSalaryNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportReportSalaryNoteActionPerformed
        // TODO add your handling code here:
        new DiaSalaryNoteReport(this, true).setVisible(true);
    }//GEN-LAST:event_btnExportReportSalaryNoteActionPerformed

    private void btnShowChartSalaryNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowChartSalaryNoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnShowChartSalaryNoteActionPerformed

    private void btnShowChartOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowChartOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnShowChartOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrAdminWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrAdminWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrAdminWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrAdminWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrAdminWorkspace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangePassAd;
    private javax.swing.JToggleButton btnCustomer;
    private javax.swing.JButton btnDeleteCus;
    private javax.swing.JButton btnDeleteEmp;
    private javax.swing.JButton btnDeleteFD;
    private javax.swing.JButton btnDeleteFM;
    private javax.swing.JButton btnDeleteFood;
    private javax.swing.JToggleButton btnEmployee;
    private javax.swing.JButton btnExportReportOrder;
    private javax.swing.JButton btnExportReportSalaryNote;
    private javax.swing.JToggleButton btnFood;
    private javax.swing.JToggleButton btnFoodMaterial;
    private javax.swing.JButton btnInsertCus;
    private javax.swing.JButton btnInsertEmp;
    private javax.swing.JButton btnInsertFD;
    private javax.swing.JButton btnInsertFM;
    private javax.swing.JButton btnInsertFood;
    private javax.swing.JButton btnInsertNewAd;
    private javax.swing.JToggleButton btnOrder;
    private javax.swing.JToggleButton btnProfile;
    private javax.swing.JButton btnResetCus;
    private javax.swing.JButton btnResetCustomerData;
    private javax.swing.JButton btnResetEmp;
    private javax.swing.JButton btnResetEmployeeData;
    private javax.swing.JButton btnResetFD;
    private javax.swing.JButton btnResetFM;
    private javax.swing.JButton btnResetFMData;
    private javax.swing.JButton btnResetFood;
    private javax.swing.JButton btnResetFoodData;
    private javax.swing.JButton btnResetOrderData;
    private javax.swing.JButton btnResetReceiptData;
    private javax.swing.JToggleButton btnSalaryNote;
    private javax.swing.JButton btnSaveFD;
    private javax.swing.JButton btnSaveFood;
    private javax.swing.JButton btnScheNext;
    private javax.swing.JButton btnSchePre;
    private javax.swing.JButton btnSearchCustomerName;
    private javax.swing.JButton btnSearchEmpSche;
    private javax.swing.JButton btnSearchEmployeeName;
    private javax.swing.JButton btnSearchFMName;
    private javax.swing.JButton btnSearchFoodName;
    private javax.swing.JButton btnSearchOrderTime;
    private javax.swing.JButton btnSearchReceiptTime;
    private javax.swing.JButton btnShowChartOrder;
    private javax.swing.JButton btnShowChartSalaryNote;
    private javax.swing.JButton btnUpdateAd;
    private javax.swing.JButton btnUpdateCus;
    private javax.swing.JButton btnUpdateEmp;
    private javax.swing.JButton btnUpdateFD;
    private javax.swing.JButton btnUpdateFM;
    private javax.swing.JButton btnUpdateFood;
    private javax.swing.JButton btnUpdateSalary;
    private javax.swing.JComboBox<String> cboEmployee;
    private javax.swing.JComboBox<String> cboFMNameFD;
    private javax.swing.JComboBox<String> cboFoodNameFD;
    private javax.swing.JComboBox<String> cboRoleEmployee;
    private javax.swing.JComboBox<String> cboTypeFM;
    private javax.swing.JComboBox<String> cboTypeFood;
    private javax.swing.JComboBox<String> cboUnitBuyFM;
    private javax.swing.JComboBox<String> cboUseForFM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbTodaySale;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JPanel pnAdminControl;
    private javax.swing.JPanel pnBlank;
    private javax.swing.JPanel pnCustomer;
    private javax.swing.JPanel pnCustomerForm;
    private javax.swing.JPanel pnCustomerInformation;
    private javax.swing.JPanel pnCustomerInformationControl;
    private javax.swing.JPanel pnCustomerSearch;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnEmployee;
    private javax.swing.JPanel pnEmployeeForm;
    private javax.swing.JPanel pnEmployeeInformation;
    private javax.swing.JPanel pnEmployeeInformationControl;
    private javax.swing.JPanel pnEmployeeSearch;
    private javax.swing.JPanel pnFDInformation;
    private javax.swing.JPanel pnFDInformationControl;
    private javax.swing.JPanel pnFMForm;
    private javax.swing.JPanel pnFMInformation;
    private javax.swing.JPanel pnFMInformationControl;
    private javax.swing.JPanel pnFMSearch;
    private javax.swing.JPanel pnFood;
    private javax.swing.JPanel pnFoodDetailsFormCL;
    private javax.swing.JPanel pnFoodForm;
    private javax.swing.JPanel pnFoodFormCL;
    private javax.swing.JPanel pnFoodFormInput;
    private javax.swing.JPanel pnFoodInformation;
    private javax.swing.JPanel pnFoodInformationControl;
    private javax.swing.JPanel pnFoodMaterial;
    private javax.swing.JPanel pnFoodSearch;
    private javax.swing.JPanel pnInsertFood;
    private javax.swing.JPanel pnOrder;
    private javax.swing.JPanel pnOrderSearch;
    private javax.swing.JPanel pnProfile;
    private javax.swing.JPanel pnReceiptNote;
    private javax.swing.JPanel pnReceiptNoteDetails;
    private javax.swing.JPanel pnReceiptSearch;
    private javax.swing.JPanel pnSalaryControl;
    private javax.swing.JPanel pnSalaryNote;
    private javax.swing.JPanel pnSalarySearch;
    private javax.swing.JPanel pnShowAdmin;
    private javax.swing.JPanel pnShowControl;
    private javax.swing.JPanel pnShowCustomer;
    private javax.swing.JPanel pnShowEmployee;
    private javax.swing.JPanel pnShowFM;
    private javax.swing.JPanel pnShowFood;
    private javax.swing.JPanel pnShowOrder;
    private javax.swing.JPanel pnShowReceipt;
    private javax.swing.JPanel pnShowSalary;
    private javax.swing.JPanel pnvw;
    private javax.swing.JPanel pnvwCustomer;
    private javax.swing.JPanel pnvwEmpSche;
    private javax.swing.JPanel pnvwEmployee;
    private javax.swing.JPanel pnvwFD;
    private javax.swing.JPanel pnvwFM;
    private javax.swing.JPanel pnvwFood;
    private javax.swing.JPanel pnvwNote;
    private javax.swing.JPanel pnvwOD;
    private javax.swing.JPanel pnvwOrder;
    private javax.swing.JPanel pnvwReceiptNote;
    private javax.swing.JPanel pnvwSalary;
    private javax.swing.JTextField txtAddrEmp;
    private javax.swing.JTextField txtBirthEmp;
    private javax.swing.JTextField txtDatePaySalary;
    private javax.swing.JTextField txtDiscountCus;
    private javax.swing.JTextField txtEmailCus;
    private javax.swing.JTextField txtEmailEmp;
    private javax.swing.JTextField txtEmpNameSalary;
    private javax.swing.JTextField txtFMIDFD;
    private javax.swing.JTextField txtFoodIDFD;
    private javax.swing.JTextField txtForMonthSalary;
    private javax.swing.JTextField txtForYearSalary;
    private javax.swing.JTextField txtHourWageEmp;
    private javax.swing.JTextField txtIDAd;
    private javax.swing.JTextField txtIDCus;
    private javax.swing.JTextField txtIDEmp;
    private javax.swing.JTextField txtIDEmpSalary;
    private javax.swing.JTextField txtIDFD;
    private javax.swing.JTextField txtIDFM;
    private javax.swing.JTextField txtIDFood;
    private javax.swing.JTextField txtIDSalary;
    private javax.swing.JTextField txtInfoFM;
    private javax.swing.JTextField txtInfoFood;
    private javax.swing.JTextField txtIsPaidSalary;
    private javax.swing.JTextField txtNameAd;
    private javax.swing.JTextField txtNameCus;
    private javax.swing.JTextField txtNameEmp;
    private javax.swing.JTextField txtNameFM;
    private javax.swing.JTextField txtNameFood;
    private javax.swing.JPasswordField txtPassAd;
    private javax.swing.JPasswordField txtPassConEmp;
    private javax.swing.JPasswordField txtPassEmp;
    private javax.swing.JTextField txtPhoneCus;
    private javax.swing.JTextField txtPhoneEmp;
    private javax.swing.JTextField txtPriceFood;
    private javax.swing.JTextField txtQuanFD;
    private javax.swing.JTextField txtSalarySalary;
    private javax.swing.JTextField txtSearchOrderTime;
    private javax.swing.JTextField txtSearchReceiptTime;
    private javax.swing.JTextField txtStandardPriceFM;
    private javax.swing.JTextField txtStartDayEmp;
    private javax.swing.JTextField txtSupplierFM;
    private javax.swing.JTextField txtTodaySale;
    private javax.swing.JTextField txtTypeOtherFM;
    private javax.swing.JTextField txtUnitBuyOtherFM;
    private javax.swing.JTextField txtUnitUseFD;
    private javax.swing.JTextField txtUsernameAd;
    private javax.swing.JTextField txtUsernameEmp;
    private javax.swing.JTextField txtWorkHourSalary;
    private javax.swing.JTextField txtvwMonth;
    private javax.swing.JTable vwCustomer;
    private javax.swing.JTable vwEmpSche;
    private javax.swing.JTable vwEmployee;
    private javax.swing.JTable vwFD;
    private javax.swing.JTable vwFM;
    private javax.swing.JTable vwFood;
    private javax.swing.JTable vwOD;
    private javax.swing.JTable vwOrder;
    private javax.swing.JTable vwRD;
    private javax.swing.JTable vwReceipt;
    // End of variables declaration//GEN-END:variables

    private void setFrameIcon() {
        Image scaled = null;
        try{
            scaled = ImageIO.read(new File("src/image/comma_icon.jpg")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.setIconImage(scaled);
        
        ImageIcon Searchicon = null;
        try{
            Image scaleds = ImageIO.read(new File("src/image/search_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Searchicon = new ImageIcon(scaleds);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSearchEmployeeName.setIcon(Searchicon);
        this.btnSearchCustomerName.setIcon(Searchicon);
        this.btnSearchFoodName.setIcon(Searchicon);
        this.btnSearchFMName.setIcon(Searchicon);
        this.btnSearchOrderTime.setIcon(Searchicon);
        this.btnSearchReceiptTime.setIcon(Searchicon);
        this.btnSearchEmpSche.setIcon(Searchicon);
        
        ImageIcon Reseticon = null;
        try{
            Image scaledr = ImageIO.read(new File("src/image/reset_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Reseticon = new ImageIcon(scaledr);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnResetEmployeeData.setIcon(Reseticon);
        this.btnResetCustomerData.setIcon(Reseticon);
        this.btnResetFoodData.setIcon(Reseticon);
        this.btnResetFMData.setIcon(Reseticon);
        this.btnResetOrderData.setIcon(Reseticon);
        this.btnResetReceiptData.setIcon(Reseticon);

        ImageIcon Nexticon = null;
        try{
            Image scaledn = ImageIO.read(new File("src/image/next_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Nexticon = new ImageIcon(scaledn);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnScheNext.setIcon(Nexticon);

        ImageIcon Preicon = null;
        try{
            Image scaledp = ImageIO.read(new File("src/image/pre_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Preicon = new ImageIcon(scaledp);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSchePre.setIcon(Preicon);
   }

    //employee
    DefaultTableModel modelEmployee;
    List<Employee> dsEmployee;
    TableRowSorter<TableModel> sorterEmployee;
    private void initDatavwEmployee() {
        modelEmployee = (DefaultTableModel) vwEmployee.getModel();
        dsEmployee = EmployeeDAO.getList();
        modelEmployee.setRowCount(0);
        for(Employee d:dsEmployee)
        {
            if(d.getManager().equals(a.getAd_id()) && d.getEm_role() != 3)
            {
                Vector v = new Vector();
                v.add(d.getEm_id());
                v.add(d.getUsername());
                v.add(d.getPass());
                v.add(d.getName());
                v.add(d.getBirth());
                v.add(d.getStartday());
                v.add(d.getHour_wage());
                v.add(d.getAddr());
                v.add(d.getEmail());
                v.add(d.getPhone());
                if(d.getEm_role() == 1)
                {
                    v.add("Nước");
                }
                else
                {
                    v.add("Bếp");
                }
                //v.add(d.getEm_role());
                v.add(d.getManager());
                modelEmployee.addRow(v);
            }
        }
        
        sorterEmployee = (TableRowSorter<TableModel>) vwEmployee.getRowSorter();
    }

    private void setEmployeeFormControl(boolean b) {
        txtNameEmp.setEnabled(b);
        txtBirthEmp.setEnabled(b);
        txtStartDayEmp.setEnabled(b);
        txtHourWageEmp.setEnabled(b);
        txtAddrEmp.setEnabled(b);
        txtEmailEmp.setEnabled(b);
        txtPhoneEmp.setEnabled(b);
        cboRoleEmployee.setEnabled(b);
        
        txtIDEmp.setEnabled(false);
        txtUsernameEmp.setEnabled(false);
        txtPassEmp.setEnabled(false);
        jLabel45.setVisible(false);
        txtPassConEmp.setVisible(false);
    }

    //customer
    DefaultTableModel modelCustomer;
    List<Customer> dsCustomer;
    TableRowSorter<TableModel> sorterCustomer;
    private void initDatavwCustomer() {
        modelCustomer = (DefaultTableModel) vwCustomer.getModel();
        dsCustomer = CustomerDAO.getListAll();
        modelCustomer.setRowCount(0);
        for(Customer d:dsCustomer)
        {
            if(d.getDeleted() == 0)
            {
                modelCustomer.addRow(d.toVector());
            }
        }
        
        sorterCustomer = (TableRowSorter<TableModel>) vwCustomer.getRowSorter();
    }

    private void setCustomerControl(boolean b) {
        txtNameCus.setEnabled(b);
        txtPhoneCus.setEnabled(b);
        txtEmailCus.setEnabled(b);
        txtDiscountCus.setEnabled(b);
        
        txtIDCus.setEnabled(false);
    }

    //food
    DefaultTableModel modelFood;
    List<Food> dsFood;
    TableRowSorter<TableModel> sorterFood;
    private void initDatavwFood() {
        modelFood = (DefaultTableModel) vwFood.getModel();
        modelFood.setRowCount(0);
        dsFood = FoodDAO.getListAll();
        for(Food d:dsFood)
        {
            if(d.getDeleted() == 0)
            {
                Vector v = new Vector();
                v.add(d.getFood_id());
                v.add(d.getName());
                v.add(d.getInfo());
                v.add(d.getPrice());
                if(d.getIsdrink() == 0)
                {
                    v.add("Uống");
                }
                if(d.getIsdrink() == 1)
                {
                    v.add("Ăn");
                }
                if(d.getIsdrink() == 2)
                {
                    v.add("Khác");
                }
                //v.add(d.getIsdrink());
                modelFood.addRow(v);
            }
        }
        
        sorterFood = (TableRowSorter<TableModel>) vwFood.getRowSorter();
    }

    private void setFoodControl(boolean b) {
        txtNameFood.setEnabled(b);
        txtInfoFood.setEnabled(b);
        txtPriceFood.setEnabled(b);
        cboTypeFood.setEnabled(b);
        
        txtIDFood.setEnabled(false);
        btnSaveFood.setVisible(false);
    }

    DefaultTableModel modelFD;
    List<FoodDetails> dsFD;
    TableRowSorter<TableModel> sorterFD;
    private void initDatavwFD() {
        modelFD = (DefaultTableModel) vwFD.getModel();
        modelFD.setRowCount(0);
        dsFD = FoodDetailsDAO.getList();
        for(FoodDetails d:dsFD)
        {
            Vector v = new Vector();
            v.add(d.getFd_id());
            v.add(d.getFood_id());
            for(Food dfood:dsFood)
            {
                if(dfood.getFood_id().equals(d.getFood_id()))
                {
                    v.add(dfood.getName());
                }
            }
            v.add(d.getFm_id());
            for(FoodMaterial dfm:dsFM)
            {
                if(dfm.getFm_id().equals(d.getFm_id()))
                {
                    v.add(dfm.getName());
                }
            }
            v.add(d.getQuan());
            v.add(d.getUnit_use());
            modelFD.addRow(v);
        }
        
        sorterFD = (TableRowSorter<TableModel>) vwFD.getRowSorter();
    }

    private void initDatavwFood(String txtIDFood) {
//        sorterFD.setRowFilter(RowFilter.regexFilter(txtIDFood, 1));
        modelFD.getDataVector().removeAllElements();
        modelFD.fireTableDataChanged();
        for (FoodDetails d:dsFD)
        {
            if (d.getFood_id().equals(txtIDFood))
            {
                Vector v = new Vector();
                v.add(d.getFd_id());
                v.add(d.getFood_id());
                for(Food dfood:dsFood)
                {
                    if(dfood.getFood_id().equals(d.getFood_id()))
                    {
                        v.add(dfood.getName());
                    }
                }
                v.add(d.getFm_id());
                for(FoodMaterial dfm:dsFM)
                {
                    if(dfm.getFm_id().equals(d.getFm_id()))
                    {
                        v.add(dfm.getName());
                    }
                }
                v.add(d.getQuan());
                v.add(d.getUnit_use());
                modelFD.addRow(v);
            }
        }
    }

    private void setFDControl(boolean b) {
        cboFoodNameFD.setEnabled(b);
        cboFMNameFD.setEnabled(b);
        txtQuanFD.setEnabled(b);
        
        txtIDFD.setEnabled(false);
        txtFoodIDFD.setEnabled(false);
        txtFMIDFD.setEnabled(false);
        txtUnitUseFD.setEnabled(false);
        btnSaveFD.setVisible(false);
    }
    
    private void initDatacboName() {
        for(Food d:dsFood)
        {
            cboFoodNameFD.addItem(d.getName());
        }
        for(FoodMaterial d:dsFM)
        {
            cboFMNameFD.addItem(d.getName());
        }
    }

    //food material
    DefaultTableModel modelFM;
    List<FoodMaterial> dsFM;
    TableRowSorter<TableModel> sorterFM;
    private void initDatavwFM() {
        modelFM = (DefaultTableModel) vwFM.getModel();
        modelFM.setRowCount(0);
        dsFM = FoodMaterialDAO.getList();
        for(FoodMaterial d:dsFM)
        {
            Vector v = new Vector();
            v.add(d.getFm_id());
            v.add(d.getName());
            v.add(d.getInfo());
            if(d.getUsefor() == 0)
            {
                v.add("Uống");
            }
            if(d.getUsefor() == 1)
            {
                v.add("Ăn");
            }
            if(d.getUsefor() == 2)
            {
                v.add("Không rõ lượng dùng");
            }
            if(d.getUsefor() == 3)
            {
                v.add("Khác");
            }
//            v.add(d.getUsefor());
            v.add(d.getFmtype());
            v.add(d.getUnit_buy());
            v.add(d.getStandard_price());
            v.add(d.getSupplier());
            modelFM.addRow(v);
        }
        
        sorterFM = (TableRowSorter<TableModel>) vwFM.getRowSorter();
    }

    private void initcboTypeFM()
    {
        cboTypeFM.removeAllItems();
        cboTypeFM.addItem("khác");
        List<String> dsTypeFM = FoodMaterialDAO.getTypeFM();
        for(String d:dsTypeFM)
        {
            cboTypeFM.addItem(d);
        }
    }
    
    private void initcboUnitBuyFM()
    {
        cboUnitBuyFM.removeAllItems();
        cboUnitBuyFM.addItem("khác");
        List<String> dsUnitBuyFM = FoodMaterialDAO.getUnit_buy();
        for(String d:dsUnitBuyFM)
        {
            cboUnitBuyFM.addItem(d);
        }
    }
    
    private void setFMControl(boolean b) {
        txtNameFM.setEnabled(b);
        txtInfoFM.setEnabled(b);
        cboUseForFM.setEnabled(b);
        cboTypeFM.setEnabled(b);
        cboUnitBuyFM.setEnabled(b);
        txtStandardPriceFM.setEnabled(b);
        txtSupplierFM.setEnabled(b);
        
        txtIDFM.setEnabled(false);
        txtUnitBuyOtherFM.setVisible(false);
        txtTypeOtherFM.setVisible(false);
    }

    //profile
    private void initDataThisAdmin() {
        txtIDAd.setText(this.a.getAd_id());
        txtUsernameAd.setText(this.a.getUsername());
        txtPassAd.setText(this.a.getPass());
        txtNameAd.setText(this.a.getName());
    }
    
    private void setAdControl(boolean b) {
        txtUsernameAd.setEnabled(b);
        
        txtIDAd.setEnabled(false);
        txtPassAd.setEnabled(false);
        txtNameAd.setEnabled(false);
    }

    //order
    DefaultTableModel modelOrder;
    DefaultTableModel modelOD;
    List<Order> dsOrder;
    List<OrderDetails> dsOD;
    TableRowSorter<TableModel> sorterOrder;
    TableRowSorter<TableModel> sorterOD;
    private void initDatavwOrder() {
        modelOrder = (DefaultTableModel) vwOrder.getModel();
        modelOrder.setRowCount(0);
        modelOD = (DefaultTableModel) vwOD.getModel();
        modelOD.setRowCount(0);
        dsOrder = OrderDAO.getList();
        dsOD = OrderDetailsDAO.getList();
        for(Order d:dsOrder)
        {
            Vector v = new Vector();
            v.add(d.getOrder_id());
            v.add(d.getCus_id());
            for(Customer dcus:dsCustomer)
            {
                if(dcus.getCus_id().equals(d.getCus_id()))
                {
                    v.add(dcus.getName());
                }
            }
            v.add(d.getOrdertable());
            v.add(d.getOrdertime());
            v.add(d.getPrice());
            v.add(d.getCustomerpay());
            v.add(d.getPayback());
            modelOrder.addRow(v);
        }
        
        initDatatxtTodaySale();
        
        sorterOrder = (TableRowSorter<TableModel>) vwOrder.getRowSorter();
    }
    
    private void initDatatxtTodaySale() {
        lbTodaySale.setText("Today sale:");
        txtTodaySale.setEnabled(false);
        LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
        float todaysale = OrderDAO.getTodaySale(java.sql.Date.valueOf(today));
        txtTodaySale.setText(todaysale + "");
    }
    
    private void initDatavwOD(String order_id)
    {
//        modelOD = (DefaultTableModel) vwOD.getModel();
//        modelOD.setRowCount(0);
        modelOD.getDataVector().removeAllElements();
        modelOD.fireTableDataChanged();
        //dsOD = OrderDetailsDAO.getList();
        for(OrderDetails d:dsOD)
        {
            if(d.getOrder_id().equals(order_id))
            {
                Vector v = new Vector();
                v.add(d.getOrder_id());
                v.add(d.getFood_id());
                for(Food dfood:dsFood)
                {
                    if(dfood.getFood_id().equals(d.getFood_id()))
                    {
                        v.add(dfood.getName());
                    }
                }
                v.add(d.getQuan());
                modelOD.addRow(v);
            }
        }
    }

    //receipt
    DefaultTableModel modelReceipt;
    DefaultTableModel modelRD;
    List<ReceiptNote> dsReceipt;
    List<ReceiptNoteDetails> dsRD;
    TableRowSorter<TableModel> sorterReceipt;
    TableRowSorter<TableModel> sorterRD;
    private void initDatavwReceipt() {
        modelReceipt = (DefaultTableModel) vwReceipt.getModel();
        modelReceipt.setRowCount(0);
        modelRD = (DefaultTableModel) vwRD.getModel();
        modelRD.setRowCount(0);
        dsReceipt = ReceiptNoteDAO.getList();
        dsRD = ReceiptNoteDetailsDAO.getList();
        for(ReceiptNote d:dsReceipt)
        {
            modelReceipt.addRow(d.toVector());
        }
        
        sorterReceipt = (TableRowSorter<TableModel>) vwOrder.getRowSorter();
    }
    
    private void initDatavwRD(String rn_id) {
//        modelOD = (DefaultTableModel) vwOD.getModel();
//        modelOD.setRowCount(0);
        modelRD.getDataVector().removeAllElements();
        modelRD.fireTableDataChanged();
        //dsOD = OrderDetailsDAO.getList();
        for(ReceiptNoteDetails d:dsRD)
        {
            if(d.getRn_id().equals(rn_id))
            {
                Vector v = new Vector();
                v.add(d.getRn_id());
                v.add(d.getFm_id());
                for(FoodMaterial dfm:dsFM)
                {
                    if(dfm.getFm_id().equals(d.getFm_id()))
                    {
                        v.add(dfm.getName());
                    }
                }
                v.add(d.getQuan());
                v.add(d.getItem_price());
                v.add(d.getNote());
                modelRD.addRow(v);
            }
        }
    }

    //salary
    private void initDatacboEmployee() {
        cboEmployee.addItem("--");
        
        for(Employee d:dsEmployee)
        {
            cboEmployee.addItem(d.getName());
        }
    }
    DefaultTableModel modelEmpSche;
    List<EmpSchedule> dsEmpSche;
    TableRowSorter<TableModel> sorterEmpSche;
    private void initDatavwEmpSche(String em_name, String month) {
        modelEmpSche.getDataVector().removeAllElements();
        modelEmpSche.fireTableDataChanged();
        modelEmpSche.setRowCount(0);
        for(EmpSchedule d:dsEmpSche)
        {
            
        }
    }

    private void setSalaryControl(boolean b) {
        txtIDSalary.setEnabled(false);
        txtIDEmpSalary.setEnabled(false);
        txtEmpNameSalary.setEnabled(false);
        txtSalarySalary.setEnabled(false);
        txtWorkHourSalary.setEnabled(false);
        txtForMonthSalary.setEnabled(false);
        txtForYearSalary.setEnabled(false);
        txtIsPaidSalary.setEnabled(false);
        
        txtDatePaySalary.setEnabled(b);
    }
    
}
