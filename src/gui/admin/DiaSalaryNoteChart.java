/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.admin;

import entities.Employee;
import java.awt.BorderLayout;
import java.awt.Color;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import javax.swing.JPanel;
import model.EmpScheduleDAO;
import model.EmployeeDAO;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author DELL
 */
public class DiaSalaryNoteChart extends javax.swing.JDialog {

    /**
     * Creates new form DiaSalaryNoteChart
     */
    public DiaSalaryNoteChart(FrAdminWorkspace parent, boolean modal) {
        super(parent, modal);
        this.setLocationRelativeTo(this.parent);
        this.setLocation(300, 150);
        this.setModal(true);
        
        initComponents();
        
        this.initDefaultConfig();
        this.refreshpnShowChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngChartType = new javax.swing.ButtonGroup();
        pnMain = new javax.swing.JPanel();
        cbEmployeename = new javax.swing.JComboBox<>();
        rbDayinMonth = new javax.swing.JRadioButton();
        rbMonthinYear = new javax.swing.JRadioButton();
        rbYeartoyear = new javax.swing.JRadioButton();
        pnDisplay = new javax.swing.JPanel();
        pnShowChart = new javax.swing.JPanel();
        pnBlank = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnMain.setBackground(new java.awt.Color(204, 204, 204));

        String[] empname = new String[this.emplist.size()];
        for(int i = 0; i < this.emplist.size(); i++){
            empname[i] = this.emplist.get(i).getName();
        }
        cbEmployeename.setModel(new javax.swing.DefaultComboBoxModel<>(empname));
        cbEmployeename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmployeenameActionPerformed(evt);
            }
        });

        btngChartType.add(rbDayinMonth);
        rbDayinMonth.setText("Day in Month");
        rbDayinMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDayinMonthActionPerformed(evt);
            }
        });

        btngChartType.add(rbMonthinYear);
        rbMonthinYear.setText("Month in Year");
        rbMonthinYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMonthinYearActionPerformed(evt);
            }
        });

        btngChartType.add(rbYeartoyear);
        rbYeartoyear.setText("Year to Year");
        rbYeartoyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbYeartoyearActionPerformed(evt);
            }
        });

        pnDisplay.setLayout(new java.awt.CardLayout());

        pnShowChart.setLayout(new java.awt.BorderLayout());
        pnDisplay.add(pnShowChart, "card2");

        javax.swing.GroupLayout pnBlankLayout = new javax.swing.GroupLayout(pnBlank);
        pnBlank.setLayout(pnBlankLayout);
        pnBlankLayout.setHorizontalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );
        pnBlankLayout.setVerticalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );

        pnDisplay.add(pnBlank, "card3");

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(cbEmployeename, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rbDayinMonth)
                .addGap(18, 18, 18)
                .addComponent(rbMonthinYear)
                .addGap(18, 18, 18)
                .addComponent(rbYeartoyear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnMainLayout.setVerticalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEmployeename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbDayinMonth)
                    .addComponent(rbMonthinYear)
                    .addComponent(rbYeartoyear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(pnMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbEmployeenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmployeenameActionPerformed
        // TODO add your handling code here:
        this.refreshpnShowChart();
    }//GEN-LAST:event_cbEmployeenameActionPerformed

    private void rbDayinMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDayinMonthActionPerformed
        // TODO add your handling code here:
        this.refreshpnShowChart();
    }//GEN-LAST:event_rbDayinMonthActionPerformed

    private void rbMonthinYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMonthinYearActionPerformed
        // TODO add your handling code here:
        this.refreshpnShowChart();
    }//GEN-LAST:event_rbMonthinYearActionPerformed

    private void rbYeartoyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbYeartoyearActionPerformed
        // TODO add your handling code here:
        this.refreshpnShowChart();
    }//GEN-LAST:event_rbYeartoyearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaSalaryNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaSalaryNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaSalaryNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaSalaryNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaSalaryNoteChart dialog = new DiaSalaryNoteChart(new FrAdminWorkspace(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngChartType;
    private javax.swing.JComboBox<String> cbEmployeename;
    private javax.swing.JPanel pnBlank;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnShowChart;
    private javax.swing.JRadioButton rbDayinMonth;
    private javax.swing.JRadioButton rbMonthinYear;
    private javax.swing.JRadioButton rbYeartoyear;
    // End of variables declaration//GEN-END:variables

    
    
// CUSTOM VARIABLE DECLARATION
    FrAdminWorkspace parent;
    LocalDate day = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    ArrayList<Employee> emplist = (ArrayList<Employee>) EmployeeDAO.getAllList();
    
    Employee curemp;
// END CUSTOM VARIABLE DECLARATION
    
    
    
    
    
// CUSTOM CODE
    private void initDefaultConfig(){
        this.cbEmployeename.setSelectedIndex(0);
        this.rbDayinMonth.setSelected(true);
    }
    
    
    private void refreshpnShowChart(){
        this.curemp = this.emplist.get(this.cbEmployeename.getSelectedIndex());
        
        if(this.rbDayinMonth.isSelected()){
            HashMap<Integer, Float> dayinmonth_data = (HashMap<Integer, Float>) EmpScheduleDAO.gethour_dayinmonth(this.curemp.getEm_id(), this.day.getYear(), this.day.getMonth().getValue());
        
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : dayinmonth_data.entrySet()){
                dataset.addValue(iter.getValue(), "Working Hour", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart3D("Days of " + this.day.getYear() + "-" + this.day.getMonth() + " Total Working Hour", "Day", "Hour", dataset, PlotOrientation.VERTICAL, true, true, false);
            if(this.curemp.getDeleted() == 1){
                CategoryPlot plot = chart.getCategoryPlot();
                plot.setBackgroundPaint(new Color(239, 184, 31));
            }
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
        
        if(this.rbMonthinYear.isSelected()){
            HashMap<Integer, Float> monthinyear_data = (HashMap<Integer, Float>) EmpScheduleDAO.gethour_monthinyear(this.curemp.getEm_id(), this.day.getYear());
        
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : monthinyear_data.entrySet()){
                dataset.addValue(iter.getValue(), "Working Hour", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart3D("Months of " +this.day.getYear()+ " Total Working Hour", "Month", "Hour", dataset, PlotOrientation.VERTICAL, true, true, false);
            if(this.curemp.getDeleted() == 1){
                CategoryPlot plot = chart.getCategoryPlot();
                plot.setBackgroundPaint(new Color(239, 184, 31));
            }
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
        
        if(this.rbYeartoyear.isSelected()){
            HashMap<Integer, Float> yeartoyear_data = (HashMap<Integer, Float>) EmpScheduleDAO.gethour_yeartoyear(this.curemp.getEm_id(), this.day.getYear());
        
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : yeartoyear_data.entrySet()){
                dataset.addValue(iter.getValue(), "Working Hour", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart3D("Years Total Working Hour", "Year", "Hour", dataset, PlotOrientation.VERTICAL, true, true, false);
            if(this.curemp.getDeleted() == 1){
                CategoryPlot plot = chart.getCategoryPlot();
                plot.setBackgroundPaint(new Color(239, 184, 31));
            }
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
    }
// END CUSTOM CODE
}
