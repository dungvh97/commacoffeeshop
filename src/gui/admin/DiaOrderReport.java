/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui.admin;

import entities.Customer;
import entities.Food;
import entities.Order;
import entities.OrderDetails;
import gui.employee.DiaEndofdayreport;
import gui.employee.FrShowReport;
import model.CustomerDAO;
import model.FoodDAO;
import model.OrderDAO;
import model.OrderDetailsDAO;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author Administrator
 */
public class DiaOrderReport extends javax.swing.JDialog {

    /** Creates new form DiaOrderReport */
    public DiaOrderReport(FrAdminWorkspace parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        this.setLocationRelativeTo(this.parent);
        this.setLocation(300, 150);
        this.setModal(true);
        
        initComponents();
        
        this.initDefaultConfig();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngStyle = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnOption = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rbLongreport = new javax.swing.JRadioButton();
        rbShortreport = new javax.swing.JRadioButton();
        pnControl = new javax.swing.JPanel();
        btnGenerate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDatereport = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORT ORDER INFORMATION");

        pnOption.setBackground(new java.awt.Color(153, 153, 153));
        pnOption.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 153, 0))); // NOI18N

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Style:");

        btngStyle.add(rbLongreport);
        rbLongreport.setText("Long report");

        btngStyle.add(rbShortreport);
        rbShortreport.setText("Shortreport");

        javax.swing.GroupLayout pnOptionLayout = new javax.swing.GroupLayout(pnOption);
        pnOption.setLayout(pnOptionLayout);
        pnOptionLayout.setHorizontalGroup(
            pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOptionLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(47, 47, 47)
                .addComponent(rbLongreport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(rbShortreport)
                .addGap(24, 24, 24))
        );
        pnOptionLayout.setVerticalGroup(
            pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOptionLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(rbLongreport)
                    .addComponent(rbShortreport))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pnControl.setBackground(new java.awt.Color(102, 102, 102));
        pnControl.setLayout(new java.awt.GridLayout());

        btnGenerate.setBackground(new java.awt.Color(0, 204, 0));
        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        pnControl.add(btnGenerate);

        btnCancel.setBackground(new java.awt.Color(153, 153, 0));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnControl.add(btnCancel);

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Date:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtDatereport, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDatereport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:
        // kiểm tra và lấy dữ liệu reportday
        int day, month, year;
        if(this.txtDatereport.getText().length() != 10){
            JOptionPane.showMessageDialog(null, "The Day to report is not correct!", "INPUT WARNING", JOptionPane.WARNING_MESSAGE);
            this.txtDatereport.requestFocus();
            return;
        }
        try{
            year = Integer.parseInt(this.txtDatereport.getText().substring(0, 4));
            month = Integer.parseInt(this.txtDatereport.getText().substring(5, 7));
            day = Integer.parseInt(this.txtDatereport.getText().substring(8, 10));
            this.dayreport = LocalDate.of(year, month, day);
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            JOptionPane.showMessageDialog(null, "The Day to report is not correct!", "INPUT WARNING", JOptionPane.WARNING_MESSAGE);
            this.txtDatereport.requestFocus();
            return;
        }
        
        
        if(this.rbLongreport.isSelected()){
            this.generateLongReport();
        }
        
        if(this.rbShortreport.isSelected()){
            this.generateShortReport();
        }
        
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaOrderReport dialog = new DiaOrderReport(new FrAdminWorkspace(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup btngStyle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnControl;
    private javax.swing.JPanel pnOption;
    private javax.swing.JRadioButton rbLongreport;
    private javax.swing.JRadioButton rbShortreport;
    private javax.swing.JTextField txtDatereport;
    // End of variables declaration//GEN-END:variables

    
    
    
// CUSTOM VARIABLE DECLARATION
    FrAdminWorkspace parent;
    LocalDate dayreport = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    
// END CUSTOM VARIABLE DECLARATION
    
    
    
    
// CUSTOM CODE
    private void initDefaultConfig(){
        this.txtDatereport.setText(dayreport.toString());
        this.rbLongreport.setSelected(true);
        this.rbShortreport.setSelected(false);
    }
    
    
    private void generateLongReport(){
        try{
            List<Map<String, ?>> dataSource = new ArrayList<Map<String, ?>>();
            
            this.createLongTableData(dataSource);
            
            // khởi tạo jasperreport datasource
            JRDataSource jrdata = new JRBeanCollectionDataSource(dataSource);
            String reportlink = "src/report/orderreport.jrxml";
            
            // biên dịch tập tin jasperreport xml đã được thiết kết trước
            JasperReport report = JasperCompileManager.compileReport(reportlink);
            
            // nạp dữ liệu vào tập tin jasperreport xml
            JasperPrint filledReport = JasperFillManager.fillReport(report, null, jrdata);
            
            // xuất report trong frame
            new FrShowReport(new JRViewer(filledReport)).setVisible(true);
            
        }catch(JRException ex){
            Logger.getLogger(DiaEndofdayreport.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Somethings went wrong, can not generate the report file", "REPORT WARNNING", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void generateShortReport(){
        try{
            List<Map<String, ?>> dataSource = new ArrayList<Map<String, ?>>();
            
            this.createShortTableData(dataSource);
            
            // khởi tạo jasperreport datasource  (dữ liệu cho bảng)
            JRDataSource jrdata = new JRBeanCollectionDataSource(dataSource);
            String reportlink = "src/report/shortorderreport.jrxml";
            
            // khởi tạo jasperreport parameter (dữ liệu từ chương trình, và không reset trong report)
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("dayreport", this.dayreport.toString());
            
            // biên dịch tập tin jasperreport xml đã được thiết kết trước
            JasperReport report = JasperCompileManager.compileReport(reportlink);
            
            // nạp dữ liệu vào tập tin jasperreport xml
            JasperPrint filledReport = JasperFillManager.fillReport(report, parameters, jrdata);
            
            // xuất report trong frame
            new FrShowReport(new JRViewer(filledReport)).setVisible(true);
            
        }catch(JRException ex){
            Logger.getLogger(DiaEndofdayreport.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Somethings went wrong, can not generate the report file", "REPORT WARNNING", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void createLongTableData(List<Map<String, ?>> dataSource){
        HashMap<Order, ArrayList<OrderDetails>> orderlist = OrderDAO.getlist_indate(java.sql.Date.valueOf(this.dayreport));
        ArrayList<Customer> cuslist = (ArrayList<Customer>) CustomerDAO.getList();
        ArrayList<Food> foodlist = (ArrayList<Food>) FoodDAO.getList();
        
        for(Entry<Order, ArrayList<OrderDetails>> orderitem : orderlist.entrySet()){
            int discount = 0;
            String cusname = "";
            for(Customer cusitem : cuslist){
                if(cusitem.getCus_id().equals(orderitem.getKey().getCus_id())){
                    cusname = cusitem.getName();
                    discount = cusitem.getDiscount();
                    break;
                }
            }
            
            HashMap<String, Object> orderrecord = new HashMap<>();
            orderrecord.put("order_id", orderitem.getKey().getOrder_id());
            orderrecord.put("cus_name", cusname);
            orderrecord.put("discount", discount);
            orderrecord.put("price", (int)(orderitem.getKey().getPrice() * 1000));
            orderrecord.put("customerpay", (int)(orderitem.getKey().getCustomerpay() * 1000));
            orderrecord.put("payback", (int)(orderitem.getKey().getPayback() * 1000));
            
            dataSource.add(orderrecord);
            
            for(OrderDetails detailsitem : orderitem.getValue()){
                String foodname = "";
                for(Food fitem : foodlist){
                    if(fitem.getFood_id().equals(detailsitem.getFood_id())){
                        foodname = fitem.getName();
                        break;
                    }
                }
                
                HashMap<String, Object> detailsrecord = new HashMap<>();
                detailsrecord.put("order_id", orderitem.getKey().getOrder_id());
                detailsrecord.put("food_name", foodname);
                detailsrecord.put("quan", detailsitem.getQuan());
                
                dataSource.add(detailsrecord);
            }
        }
        
        HashMap<String, Object> date = new HashMap<>();
        date.put("dayreport", this.dayreport.toString());
        dataSource.add(date);
    }
    
    private void createShortTableData(List<Map<String, ?>> dataSource){
        HashMap<Order, ArrayList<OrderDetails>> orderlist = OrderDAO.getlist_indate(java.sql.Date.valueOf(this.dayreport));
        ArrayList<Customer> cuslist = (ArrayList<Customer>) CustomerDAO.getList();
        
        for(Entry<Order, ArrayList<OrderDetails>> orderitem : orderlist.entrySet()){
            int discount = 0;
            String cusname = "";
            for(Customer cusitem : cuslist){
                if(cusitem.getCus_id().equals(orderitem.getKey().getCus_id())){
                    cusname = cusitem.getName();
                    discount = cusitem.getDiscount();
                    break;
                }
            }
            
            HashMap<String, Object> orderrecord = new HashMap<>();
            orderrecord.put("orderid", orderitem.getKey().getOrder_id());
            orderrecord.put("customername", cusname);
            orderrecord.put("discount", discount);
            orderrecord.put("price", (int)(orderitem.getKey().getPrice() * 1000));
            orderrecord.put("customerpay", (int)(orderitem.getKey().getCustomerpay() * 1000));
            orderrecord.put("payback", (int)(orderitem.getKey().getPayback() * 1000));
            
            dataSource.add(orderrecord);
        }
    }
// END CUSTOM CODE
}
