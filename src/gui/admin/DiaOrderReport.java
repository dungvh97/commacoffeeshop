/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui.admin;

import entities.Customer;
import entities.Food;
import entities.Order;
import entities.OrderDetails;
import gui.employee.DiaEndofdayreport;
import gui.employee.FrShowReport;
import model.CustomerDAO;
import model.FoodDAO;
import model.OrderDAO;
import model.OrderDetailsDAO;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author Administrator
 */
public class DiaOrderReport extends javax.swing.JDialog {

    /** Creates new form DiaOrderReport */
    public DiaOrderReport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        btnExportOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnExportOrder.setText("Export Order");
        btnExportOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(btnExportOrder)
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportOrder))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportOrderActionPerformed
        genarateOrderReportText();
    }//GEN-LAST:event_btnExportOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaOrderReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaOrderReport dialog = new DiaOrderReport(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportOrder;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    LocalDate dayreport = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
//    HashMap<Order, ArrayList<OrderDetails>> dsOOD = OrderDAO.getlist_indate(java.sql.Date.valueOf(dayreport));
    List<OrderReport> dsOReport;
    List<OrderDetailsReport> dsODReport;
    private void genarateOrderReportText() {
        try{
            List<Map<String, ?>> dataSource = new ArrayList<Map<String, ?>>();
            
            this.generateOrderReportData(dataSource);
            
            // khởi tạo jasperreport datasource
            JRDataSource jrdata = new JRBeanCollectionDataSource(dataSource);
            String reportlink = "src/report/orderreport.jrxml";
            
            // biên dịch tập tin jasperreport xml đã được thiết kết trước
            JasperReport report = JasperCompileManager.compileReport(reportlink);
            
            // nạp dữ liệu vào tập tin jasperreport xml
            JasperPrint filledReport = JasperFillManager.fillReport(report, null, jrdata);
            
            // xuất report trong frame
            //new DiaShowReport(this.parent, new JRViewer(filledReport), true).setVisible(true);
            
            
            // xuất report ra file pdf
            /*JasperExportManager.exportReportToPdfFile(filledReport,
            "C:/csystemreport/eodreport" + this.dayreport.toString() +".pdf");*/
        } catch (JRException ex) {
            Logger.getLogger(DiaEndofdayreport.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Somethings went wrong, can not generate the report file", "REPORT WARNNING", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void generateOrderReportData(List<Map<String, ?>> dataSource) {
        for(Order oitem:OrderDAO.getList()){
            if(oitem.getOrdertime().toLocalDate().isEqual(dayreport))
            {
                OrderReport or = new OrderReport();
                or.setOrder_id(oitem.getOrder_id());
                for(Customer cusitem:CustomerDAO.getListAll())
                {
                    if(oitem.getCus_id().equals(cusitem.getCus_id()))
                    {
                        or.setCus_name(cusitem.getName());
                        or.setDiscount(cusitem.getDiscount());
                    }
                }
                or.setPrice(oitem.getPrice());
                or.setCustomerpay(oitem.getCustomerpay());
                or.setPayback(oitem.getPayback());
                dsOReport.add(or);
                
                for(OrderDetails oditem:OrderDetailsDAO.getList())
                {
                    if(oditem.getOrder_id().equals(oitem.getOrder_id()))
                    {
                        OrderDetailsReport odr = new OrderDetailsReport();
                        odr.setOrder_id(oditem.getOrder_id());
                        for(Food food:FoodDAO.getListAll())
                        {
                            if(food.getFood_id().equals(oditem.getFood_id()))
                            {
                                odr.setFood_name(food.getName());
                            }
                        }
                        odr.setQuan(oditem.getQuan());
                        dsODReport.add(odr);
                    }
                }
            }
        }
        for(OrderReport d:dsOReport)
        {
            HashMap<String, Object> genero = new HashMap<String, Object>();
            genero.put("order_id", d.getOrder_id());
            genero.put("cus_name", d.getCus_name());
            genero.put("discount", d.getDiscount());
            genero.put("price", d.getPrice());
            genero.put("customerpay", d.getCustomerpay());
            genero.put("payback", d.getPayback());
            
            dataSource.add(genero);
        }
        
        for(OrderDetailsReport d:dsODReport)
        {
            HashMap<String, Object> generod = new HashMap<String, Object>();
            generod.put("food_name", d.getFood_name());
            generod.put("quan", d.getQuan());
            
            dataSource.add(generod);
        }
        
    }
}
