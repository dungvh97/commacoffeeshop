/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.admin;

import entities.Admin;
import entities.SalaryNote;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import model.SalaryNoteDAO;

/**
 *
 * @author Administrator
 */
public class DiaUpdateAllSalary extends javax.swing.JDialog {

    /**
     * Creates new form DiaUpdateAllSalary
     */
    public DiaUpdateAllSalary(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public DiaUpdateAllSalary(java.awt.Frame parent, boolean modal, Admin a, String yearmonth) {
        super(parent, modal);
        initComponents();
        
        this.setTitle("Update date pay salary for " + yearmonth);
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDatePay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Input Date Pay:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDatePay, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnUpdate))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtDatePay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String sdatepay = txtDatePay.getText().trim();
        LocalDate datepay;
        LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
        int dky, dkm, dkd;
        try
        {
            if(sdatepay.length() == 0 || sdatepay.length() > 10)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            dky = Integer.parseInt(sdatepay.substring(0, 4));
            dkm = Integer.parseInt(sdatepay.substring(5, 7));
            dkd = Integer.parseInt(sdatepay.substring(8, 10));
            if(dky < 0 || dkm < 0 || dkd < 0)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            if(sdatepay.charAt(4) != '-' || sdatepay.charAt(7) != '-')
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            if(dkm > 12)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid! Month of year must not be greater than 12!");
                txtDatePay.requestFocus();
                return;
            }
            if(dkm == 2)
            {
                if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                {
                    if(dkd > 29)
                    {
                        JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 29!");
                        txtDatePay.requestFocus();
                        return;
                    }
                }
                else
                {
                    if(dkd > 28)
                    {
                        JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 28!");
                        txtDatePay.requestFocus();
                        return;
                    }
                }
            }
            if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
            {
                if(dkd > 30)
                {
                    JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 30!");
                    txtDatePay.requestFocus();
                    return;
                }
            }
            if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
            {
                if(dkd > 31)
                {
                    JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 31!");
                    txtDatePay.requestFocus();
                    return;
                }
            }
            datepay = LocalDate.of(dky, dkm, dkd);
            if(!(datepay.isAfter(today)))
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid! Date Pay must be after to day!");
                txtDatePay.requestFocus();
                return;
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
            txtDatePay.requestFocus();
            return;
        }
        
        List<SalaryNote> ds = SalaryNoteDAO.getlist_inmonth(Integer.parseInt(this.getTitle().substring(32, 34)), Integer.parseInt(this.getTitle().substring(27, 31)));
        List<SalaryNote> dsNo = new ArrayList<>();
        for(SalaryNote d:ds)
        {
            if(d.getIs_paid() == 0)
            {
                dsNo.add(d);
            }
        }
        
        int cntNo = 0;
        for(SalaryNote d:dsNo)
        {
            if(SalaryNoteDAO.updateDatePay(java.sql.Date.valueOf(txtDatePay.getText().trim()), d.getSn_id(), d.getEm_id()) != 0)
            {
                cntNo++;
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Update fail!");
                btnCancelActionPerformed(evt);
            }
        }
        if(cntNo > 0)
        {
            JOptionPane.showMessageDialog(null, "Update successful!");
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaUpdateAllSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaUpdateAllSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaUpdateAllSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaUpdateAllSalary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaUpdateAllSalary dialog = new DiaUpdateAllSalary(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtDatePay;
    // End of variables declaration//GEN-END:variables

    private void checkDate(String sdatepay) {
        LocalDate datepay;
        LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
        int dky, dkm, dkd;
        try
        {
            if(sdatepay.length() == 0 || sdatepay.length() > 10)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            dky = Integer.parseInt(sdatepay.substring(0, 4));
            dkm = Integer.parseInt(sdatepay.substring(5, 7));
            dkd = Integer.parseInt(sdatepay.substring(8, 10));
            if(dky < 0 || dkm < 0 || dkd < 0)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            if(sdatepay.charAt(4) != '-' || sdatepay.charAt(7) != '-')
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
                txtDatePay.requestFocus();
                return;
            }
            if(dkm > 12)
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid! Month of year must not be greater than 12!");
                txtDatePay.requestFocus();
                return;
            }
            if(dkm == 2)
            {
                if((dky % 400 == 0) || (dky % 4 == 0 &&  dky % 100 != 0))
                {
                    if(dkd > 29)
                    {
                        JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 29!");
                        txtDatePay.requestFocus();
                        return;
                    }
                }
                else
                {
                    if(dkd > 28)
                    {
                        JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 28!");
                        txtDatePay.requestFocus();
                        return;
                    }
                }
            }
            if(dkm == 4 || dkm == 6 || dkm == 9 || dkm == 11)
            {
                if(dkd > 30)
                {
                    JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 30!");
                    txtDatePay.requestFocus();
                    return;
                }
            }
            if(dkm == 1 || dkm == 3 || dkm == 5 || dkm == 7 || dkm == 8 || dkm == 10 || dkm == 11)
            {
                if(dkd > 31)
                {
                    JOptionPane.showMessageDialog(null, "Date Pay is not valid! Day of that month must not be greater than 31!");
                    txtDatePay.requestFocus();
                    return;
                }
            }
            datepay = LocalDate.of(dky, dkm, dkd);
            if(!(datepay.isAfter(today)))
            {
                JOptionPane.showMessageDialog(null, "Date Pay is not valid! Date Pay must be after to day!");
                txtDatePay.requestFocus();
                return;
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Date Pay is not valid!\nHint: yyyy-MM-dd");
            txtDatePay.requestFocus();
            return;
        }
    }
}
