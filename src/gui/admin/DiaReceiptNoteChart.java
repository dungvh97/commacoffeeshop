/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.admin;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JPanel;
import model.ReceiptNoteDAO;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.HorizontalAlignment;
import org.jfree.ui.RectangleEdge;

/**
 *
 * @author DELL
 */
public class DiaReceiptNoteChart extends javax.swing.JDialog {

    /**
     * Creates new form DiaReceiptNoteChart
     */
    public DiaReceiptNoteChart(FrAdminWorkspace parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        this.setLocationRelativeTo(this.parent);
        this.setLocation(300, 150);
        this.setModal(true);
        
        initComponents();
        
        this.initDefaultConfig();
        this.refreshpnShowChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnControl = new javax.swing.JPanel();
        lbDayofMonth = new javax.swing.JLabel();
        lbMonthofYear = new javax.swing.JLabel();
        lbYeartoyear = new javax.swing.JLabel();
        pnDisplay = new javax.swing.JPanel();
        pnShowChart = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Purchase Chart");

        pnMain.setLayout(new javax.swing.BoxLayout(pnMain, javax.swing.BoxLayout.LINE_AXIS));

        pnControl.setBackground(new java.awt.Color(58, 58, 79));

        lbDayofMonth.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lbDayofMonth.setForeground(new java.awt.Color(204, 204, 204));
        lbDayofMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDayofMonth.setText("Days of Month");
        lbDayofMonth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbDayofMonthMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbDayofMonthMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbDayofMonthMouseExited(evt);
            }
        });

        lbMonthofYear.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lbMonthofYear.setForeground(new java.awt.Color(204, 204, 204));
        lbMonthofYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMonthofYear.setText("Months of Year");
        lbMonthofYear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMonthofYearMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbMonthofYearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbMonthofYearMouseExited(evt);
            }
        });

        lbYeartoyear.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        lbYeartoyear.setForeground(new java.awt.Color(204, 204, 204));
        lbYeartoyear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbYeartoyear.setText("Year to Year");
        lbYeartoyear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbYeartoyearMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbYeartoyearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbYeartoyearMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnControlLayout = new javax.swing.GroupLayout(pnControl);
        pnControl.setLayout(pnControlLayout);
        pnControlLayout.setHorizontalGroup(
            pnControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbMonthofYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDayofMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(lbYeartoyear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnControlLayout.setVerticalGroup(
            pnControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnControlLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(lbDayofMonth)
                .addGap(18, 18, 18)
                .addComponent(lbMonthofYear)
                .addGap(18, 18, 18)
                .addComponent(lbYeartoyear)
                .addContainerGap(211, Short.MAX_VALUE))
        );

        pnMain.add(pnControl);

        pnDisplay.setBackground(new java.awt.Color(0, 8, 35));
        pnDisplay.setForeground(new java.awt.Color(204, 204, 204));

        pnShowChart.setBackground(new java.awt.Color(0, 8, 35));
        pnShowChart.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnDisplayLayout = new javax.swing.GroupLayout(pnDisplay);
        pnDisplay.setLayout(pnDisplayLayout);
        pnDisplayLayout.setHorizontalGroup(
            pnDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnShowChart, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        pnDisplayLayout.setVerticalGroup(
            pnDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDisplayLayout.createSequentialGroup()
                .addComponent(pnShowChart, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnMain.add(pnDisplay);
        this.pnShowChart.setSize(700, 500);

        getContentPane().add(pnMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbDayofMonthMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDayofMonthMouseEntered
        // TODO add your handling code here:
        if(!this.selectedDayinMonth)
            this.lbDayofMonth.setForeground(new Color(63, 183, 183));
    }//GEN-LAST:event_lbDayofMonthMouseEntered

    private void lbDayofMonthMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDayofMonthMouseExited
        // TODO add your handling code here:
        if(!this.selectedDayinMonth)
            this.lbDayofMonth.setForeground(new Color(204,204,204));
    }//GEN-LAST:event_lbDayofMonthMouseExited

    private void lbMonthofYearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMonthofYearMouseEntered
        // TODO add your handling code here:
        if(!this.selectedMonthinYear)
            this.lbMonthofYear.setForeground(new Color(63, 183, 183));
    }//GEN-LAST:event_lbMonthofYearMouseEntered

    private void lbMonthofYearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMonthofYearMouseExited
        // TODO add your handling code here:
        if(!this.selectedMonthinYear)
            this.lbMonthofYear.setForeground(new Color(204,204,204));
    }//GEN-LAST:event_lbMonthofYearMouseExited

    private void lbYeartoyearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbYeartoyearMouseEntered
        // TODO add your handling code here:
        if(!this.selectedYeartoyear)
            this.lbYeartoyear.setForeground(new Color(63, 183, 183));
    }//GEN-LAST:event_lbYeartoyearMouseEntered

    private void lbYeartoyearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbYeartoyearMouseExited
        // TODO add your handling code here:
        if(!this.selectedYeartoyear)
            this.lbYeartoyear.setForeground(new Color(204,204,204));
    }//GEN-LAST:event_lbYeartoyearMouseExited

    private void lbDayofMonthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbDayofMonthMouseClicked
        // TODO add your handling code here:
        this.lbDayofMonth.setForeground(new Color(0, 109, 97));
        this.lbMonthofYear.setForeground(new Color(204,204,204));
        this.lbYeartoyear.setForeground(new Color(204,204,204));
        this.selectedDayinMonth = true;
        this.selectedMonthinYear = false;
        this.selectedYeartoyear = false;
        this.refreshpnShowChart();
    }//GEN-LAST:event_lbDayofMonthMouseClicked

    private void lbMonthofYearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMonthofYearMouseClicked
        // TODO add your handling code here:
        this.lbDayofMonth.setForeground(new Color(204,204,204));
        this.lbMonthofYear.setForeground(new Color(0, 109, 97));
        this.lbYeartoyear.setForeground(new Color(204,204,204));
        this.selectedDayinMonth = false;
        this.selectedMonthinYear = true;
        this.selectedYeartoyear = false;
        this.refreshpnShowChart();

    }//GEN-LAST:event_lbMonthofYearMouseClicked

    private void lbYeartoyearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbYeartoyearMouseClicked
        // TODO add your handling code here:
        this.lbDayofMonth.setForeground(new Color(204,204,204));
        this.lbMonthofYear.setForeground(new Color(204,204,204));
        this.lbYeartoyear.setForeground(new Color(0, 109, 97));
        this.selectedDayinMonth = false;
        this.selectedMonthinYear = false;
        this.selectedYeartoyear = true;
        this.refreshpnShowChart();
    }//GEN-LAST:event_lbYeartoyearMouseClicked
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaReceiptNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaReceiptNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaReceiptNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaReceiptNoteChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaReceiptNoteChart dialog = new DiaReceiptNoteChart(new FrAdminWorkspace(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbDayofMonth;
    private javax.swing.JLabel lbMonthofYear;
    private javax.swing.JLabel lbYeartoyear;
    private javax.swing.JPanel pnControl;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnShowChart;
    // End of variables declaration//GEN-END:variables


// CUSTOM VARIABLE DECLARATION
    FrAdminWorkspace parent;
    LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    
    
    boolean selectedDayinMonth;
    boolean selectedMonthinYear;
    boolean selectedYeartoyear;
// END CUSTOM VARIABLE DECLARATION
    
    
    
    
// CUSTOM CODE
    private void initDefaultConfig(){
        this.selectedDayinMonth = true;
        this.lbDayofMonth.setForeground(new Color(0, 109, 97));
    }
    
    private void refreshpnShowChart(){
        if(this.selectedDayinMonth){
            HashMap<Integer, ArrayList<Integer>> daydata = (HashMap<Integer, ArrayList<Integer>>) ReceiptNoteDAO.getpurchase_dayinmonth(this.today.getYear(), this.today.getMonth().getValue());
            
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, ArrayList<Integer>> iter : daydata.entrySet()){
                dataset.addValue(iter.getValue().get(0), "Food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(1), "Drink Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(2), "Non-food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(3), "Other Purchase", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Days of " + this.today.getYear() + "-" + this.today.getMonth() + " Total Purchase", "Day", "Money (VND)", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = chart.getCategoryPlot();
            
            // điều chỉnh chart
            plot.setBackgroundPaint(new Color(0, 83, 80));
            plot.setRangeGridlinePaint(new Color(49, 168, 163));
            LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
            renderer.setDrawOutlines(true);
            renderer.setUseFillPaint(true);
            // màu của line
            renderer.setSeriesPaint(0, new Color(11, 214, 0));
            renderer.setSeriesStroke(0, new BasicStroke(4));
            renderer.setSeriesShapesFilled(0, true);
            renderer.setSeriesShapesVisible(0, true);
            renderer.setSeriesPaint(1, new Color(0, 181, 126));
            renderer.setSeriesStroke(1, new BasicStroke(4));
            renderer.setSeriesShapesFilled(1, true);
            renderer.setSeriesShapesVisible(1, true);
            renderer.setSeriesPaint(2, new Color(255, 89, 0));
            renderer.setSeriesStroke(2, new BasicStroke(4));
            renderer.setSeriesShapesFilled(2, true);
            renderer.setSeriesShapesVisible(2, true);
            renderer.setSeriesPaint(3, new Color(253, 0, 6));
            renderer.setSeriesStroke(3, new BasicStroke(4));
            renderer.setSeriesShapesFilled(3, true);
            renderer.setSeriesShapesVisible(3, true);
            
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
        
        if(this.selectedMonthinYear){
            HashMap<Integer, ArrayList<Integer>> monthdata = (HashMap<Integer, ArrayList<Integer>>) ReceiptNoteDAO.getpurchase_monthinyear(this.today.getYear());
        
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, ArrayList<Integer>> iter : monthdata.entrySet()){
                dataset.addValue(iter.getValue().get(0), "Food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(1), "Drink Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(2), "Non-food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(3), "Other Purchase", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Months of " + this.today.getYear() + " Total Purchase", "Month", "Money (VND)", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = chart.getCategoryPlot();
            
            // điều chỉnh chart
            plot.setBackgroundPaint(new Color(0, 83, 80));
            plot.setRangeGridlinePaint(new Color(49, 168, 163));
            LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
            renderer.setDrawOutlines(true);
            renderer.setUseFillPaint(true);
            // màu của line
            renderer.setSeriesPaint(0, new Color(11, 214, 0));
            renderer.setSeriesStroke(0, new BasicStroke(4));
            renderer.setSeriesShapesFilled(0, true);
            renderer.setSeriesShapesVisible(0, true);
            renderer.setSeriesPaint(1, new Color(0, 181, 126));
            renderer.setSeriesStroke(1, new BasicStroke(4));
            renderer.setSeriesShapesFilled(1, true);
            renderer.setSeriesShapesVisible(1, true);
            renderer.setSeriesPaint(2, new Color(255, 89, 0));
            renderer.setSeriesStroke(2, new BasicStroke(4));
            renderer.setSeriesShapesFilled(2, true);
            renderer.setSeriesShapesVisible(2, true);
            renderer.setSeriesPaint(3, new Color(253, 0, 6));
            renderer.setSeriesStroke(3, new BasicStroke(4));
            renderer.setSeriesShapesFilled(3, true);
            renderer.setSeriesShapesVisible(3, true);
            
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
        
        if(this.selectedYeartoyear){
            HashMap<Integer, ArrayList<Integer>> yeardata = (HashMap<Integer, ArrayList<Integer>>) ReceiptNoteDAO.getpurchase_yeartoyear(this.today.getYear());
        
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, ArrayList<Integer>> iter : yeardata.entrySet()){
                dataset.addValue(iter.getValue().get(0), "Food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(1), "Drink Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(2), "Non-food Materials", iter.getKey());
                dataset.addValue(iter.getValue().get(3), "Other Purchase", iter.getKey());
            }
                    
            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Years Total Purchase", "Month", "Money (VND)", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = chart.getCategoryPlot();
            
            // điều chỉnh chart
            plot.setBackgroundPaint(new Color(0, 83, 80));
            plot.setRangeGridlinePaint(new Color(49, 168, 163));
            LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
            renderer.setDrawOutlines(true);
            renderer.setUseFillPaint(true);
            // màu của line
            renderer.setSeriesPaint(0, new Color(11, 214, 0));
            renderer.setSeriesStroke(0, new BasicStroke(4));
            renderer.setSeriesShapesFilled(0, true);
            renderer.setSeriesShapesVisible(0, true);
            renderer.setSeriesPaint(1, new Color(0, 181, 126));
            renderer.setSeriesStroke(1, new BasicStroke(4));
            renderer.setSeriesShapesFilled(1, true);
            renderer.setSeriesShapesVisible(1, true);
            renderer.setSeriesPaint(2, new Color(255, 89, 0));
            renderer.setSeriesStroke(2, new BasicStroke(4));
            renderer.setSeriesShapesFilled(2, true);
            renderer.setSeriesShapesVisible(2, true);
            renderer.setSeriesPaint(3, new Color(253, 0, 6));
            renderer.setSeriesStroke(3, new BasicStroke(4));
            renderer.setSeriesShapesFilled(3, true);
            renderer.setSeriesShapesVisible(3, true);
            
            
            // hiển thị chart
            this.pnShowChart.removeAll();
            JPanel pnchart = new ChartPanel(chart);
            this.pnShowChart.add(pnchart, BorderLayout.CENTER);
            this.pnShowChart.updateUI();
        }
    }
// END CUSTOM CODE
}
