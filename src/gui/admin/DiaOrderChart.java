/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.admin;

import entities.Customer;
import entities.Food;
import entities.Order;
import entities.OrderDetails;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import model.CustomerDAO;
import model.FoodDAO;
import model.OrderDAO;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import supportclass.chart.ChartDrawingSupplier;

/**
 *
 * @author DELL
 */
public class DiaOrderChart extends javax.swing.JDialog {

    /**
     * Creates new form DiaChart
     */
    public DiaOrderChart(FrAdminWorkspace parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        this.setLocationRelativeTo(this.parent);
        this.setLocation(300, 150);
        this.setModal(true);
        
        initComponents();
        
        this.initDisplayData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngOrderStyle = new javax.swing.ButtonGroup();
        pnMain = new javax.swing.JPanel();
        pnControl = new javax.swing.JPanel();
        btnExecuteStatistic = new javax.swing.JButton();
        btnExecuteIncome = new javax.swing.JButton();
        pnDisplay = new javax.swing.JPanel();
        pnShowStatistic = new javax.swing.JPanel();
        pnFoodAndDrink = new javax.swing.JPanel();
        pnFoodDrinkAvg = new javax.swing.JPanel();
        pnShowIncome = new javax.swing.JPanel();
        rbDayinmonth = new javax.swing.JRadioButton();
        rbMonthinyear = new javax.swing.JRadioButton();
        rbYeartoyear = new javax.swing.JRadioButton();
        pnShowControl = new javax.swing.JPanel();
        pnDayinmonth = new javax.swing.JPanel();
        pnMonthinyear = new javax.swing.JPanel();
        pnYeartoyear = new javax.swing.JPanel();
        pnBlank = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnMain.setLayout(new javax.swing.BoxLayout(pnMain, javax.swing.BoxLayout.PAGE_AXIS));

        pnControl.setBackground(new java.awt.Color(0, 0, 0));
        pnControl.setPreferredSize(new java.awt.Dimension(0, 30));
        pnControl.setLayout(new java.awt.GridLayout());

        btnExecuteStatistic.setToolTipText("Common Statistic");
        btnExecuteStatistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteStatisticActionPerformed(evt);
            }
        });
        pnControl.add(btnExecuteStatistic);
        ImageIcon statisticicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/piecharticon.png")).getScaledInstance(27, 23, Image.SCALE_SMOOTH);
            statisticicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnExecuteStatistic.setIcon(statisticicon);

        btnExecuteIncome.setToolTipText("Income");
        btnExecuteIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteIncomeActionPerformed(evt);
            }
        });
        pnControl.add(btnExecuteIncome);
        ImageIcon incomeicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/linecharticon.png")).getScaledInstance(27, 23, Image.SCALE_SMOOTH);
            incomeicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnExecuteIncome.setIcon(incomeicon);

        pnMain.add(pnControl);

        pnDisplay.setBackground(new java.awt.Color(153, 153, 153));
        pnDisplay.setPreferredSize(new java.awt.Dimension(694, 400));
        pnDisplay.setLayout(new java.awt.CardLayout());

        pnShowStatistic.setLayout(new java.awt.GridLayout());

        pnFoodAndDrink.setBackground(new java.awt.Color(204, 204, 204));
        pnFoodAndDrink.setLayout(new java.awt.BorderLayout());
        pnShowStatistic.add(pnFoodAndDrink);

        pnFoodDrinkAvg.setBackground(new java.awt.Color(204, 204, 204));
        pnFoodDrinkAvg.setLayout(new java.awt.BorderLayout());
        pnShowStatistic.add(pnFoodDrinkAvg);

        pnDisplay.add(pnShowStatistic, "card2");

        pnShowIncome.setBackground(new java.awt.Color(204, 204, 204));

        btngOrderStyle.add(rbDayinmonth);
        rbDayinmonth.setText("Day in month");
        rbDayinmonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDayinmonthActionPerformed(evt);
            }
        });

        btngOrderStyle.add(rbMonthinyear);
        rbMonthinyear.setText("Month in year");
        rbMonthinyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMonthinyearActionPerformed(evt);
            }
        });

        btngOrderStyle.add(rbYeartoyear);
        rbYeartoyear.setText("Year to year");
        rbYeartoyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbYeartoyearActionPerformed(evt);
            }
        });

        pnShowControl.setLayout(new java.awt.CardLayout());

        pnDayinmonth.setLayout(new java.awt.BorderLayout());
        pnShowControl.add(pnDayinmonth, "card2");

        pnMonthinyear.setLayout(new java.awt.BorderLayout());
        pnShowControl.add(pnMonthinyear, "card3");

        pnYeartoyear.setLayout(new java.awt.BorderLayout());
        pnShowControl.add(pnYeartoyear, "card4");

        javax.swing.GroupLayout pnBlankLayout = new javax.swing.GroupLayout(pnBlank);
        pnBlank.setLayout(pnBlankLayout);
        pnBlankLayout.setHorizontalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 751, Short.MAX_VALUE)
        );
        pnBlankLayout.setVerticalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        pnShowControl.add(pnBlank, "card5");

        javax.swing.GroupLayout pnShowIncomeLayout = new javax.swing.GroupLayout(pnShowIncome);
        pnShowIncome.setLayout(pnShowIncomeLayout);
        pnShowIncomeLayout.setHorizontalGroup(
            pnShowIncomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnShowIncomeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbDayinmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rbMonthinyear)
                .addGap(18, 18, 18)
                .addComponent(rbYeartoyear, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201))
            .addGroup(pnShowIncomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnShowControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnShowIncomeLayout.setVerticalGroup(
            pnShowIncomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnShowIncomeLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnShowIncomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDayinmonth)
                    .addComponent(rbMonthinyear)
                    .addComponent(rbYeartoyear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnShowControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnDisplay.add(pnShowIncome, "card3");

        pnMain.add(pnDisplay);

        getContentPane().add(pnMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecuteStatisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteStatisticActionPerformed
        // TODO add your handling code here:
        this.show_mode = STATISTIC_SHOW;
        this.initDisplayData();
    }//GEN-LAST:event_btnExecuteStatisticActionPerformed

    private void btnExecuteIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteIncomeActionPerformed
        // TODO add your handling code here:
        this.show_mode = INCOME_SHOW;
        this.initDisplayData();
    }//GEN-LAST:event_btnExecuteIncomeActionPerformed

    private void rbDayinmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDayinmonthActionPerformed

        if(this.rbDayinmonth.isSelected()){
            // lấy dữ liệu từ database
            HashMap<Integer, Float> incomeDayofMonth = (HashMap<Integer, Float>) OrderDAO.getlist_dayinmonth(this.day.getYear(), this.day.getMonth().getValue());

            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : incomeDayofMonth.entrySet()){
                dataset.addValue(iter.getValue(), "Income", String.valueOf(iter.getKey()));
            }

            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Total Day of "+ this.day.getYear() + "-" + this.day.getMonth() + " Income", "Day", "kVND", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            int seriesCount = plot.getRendererCount();
            for (int i = 0; i < seriesCount; i++) {
                plot.getRenderer().setSeriesStroke(i, new BasicStroke(2));
            }
            
            ChartPanel pndayinmonthchart = new ChartPanel(chart);
            this.pnDayinmonth.add(pndayinmonthchart, BorderLayout.CENTER);
            CardLayout c = (CardLayout) this.pnShowControl.getLayout();
            c.show(this.pnShowControl, "card5");
            c.show(this.pnShowControl, "card2");
        }
    }//GEN-LAST:event_rbDayinmonthActionPerformed

    private void rbMonthinyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMonthinyearActionPerformed
        
        if(this.rbMonthinyear.isSelected()){
            // lấy dữ liệu từ database
            HashMap<Integer, Float> incomeMonthofYear = (HashMap<Integer, Float>) OrderDAO.getlist_monthinyear(this.day.getYear());
            
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : incomeMonthofYear.entrySet()){
                dataset.addValue(iter.getValue(), "Income", String.valueOf(iter.getKey()));
            }

            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Total Month of "+ this.day.getYear() + " Income", "Month", "kVND", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            int seriesCount = plot.getRendererCount();
            for (int i = 0; i < seriesCount; i++) {
                plot.getRenderer().setSeriesStroke(i, new BasicStroke(2));
            }
            
            ChartPanel pnmonthinyearchart = new ChartPanel(chart);
            this.pnMonthinyear.add(pnmonthinyearchart, BorderLayout.CENTER);
            CardLayout c = (CardLayout) this.pnShowControl.getLayout();
            c.show(this.pnShowControl, "card5");
            c.show(this.pnShowControl, "card3");
        }
    }//GEN-LAST:event_rbMonthinyearActionPerformed

    private void rbYeartoyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbYeartoyearActionPerformed
        
        if(this.rbYeartoyear.isSelected()){
            // lấy dữ liệu từ database
            HashMap<Integer, Float> incomeYeartoyear = (HashMap<Integer, Float>) OrderDAO.getlist_yeartoyear(this.day.getYear());
            
            // khởi tạo dataset cho chart
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for(Entry<Integer, Float> iter : incomeYeartoyear.entrySet()){
                dataset.addValue(iter.getValue(), "Income", String.valueOf(iter.getKey()));
            }

            // tạo chart
            JFreeChart chart = ChartFactory.createLineChart("Total Year Income", "Year", "kVND", dataset, PlotOrientation.VERTICAL, true, true, false);
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            int seriesCount = plot.getRendererCount();
            for (int i = 0; i < seriesCount; i++) {
                plot.getRenderer().setSeriesStroke(i, new BasicStroke(2));
            }
            
            ChartPanel pnyeartoyearchart = new ChartPanel(chart);
            this.pnYeartoyear.add(pnyeartoyearchart, BorderLayout.CENTER);
            CardLayout c = (CardLayout) this.pnShowControl.getLayout();
            c.show(this.pnShowControl, "card5");
            c.show(this.pnShowControl, "card4");
        }
    }//GEN-LAST:event_rbYeartoyearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaOrderChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaOrderChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaOrderChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaOrderChart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaOrderChart dialog = new DiaOrderChart(new FrAdminWorkspace(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecuteIncome;
    private javax.swing.JButton btnExecuteStatistic;
    private javax.swing.ButtonGroup btngOrderStyle;
    private javax.swing.JPanel pnBlank;
    private javax.swing.JPanel pnControl;
    private javax.swing.JPanel pnDayinmonth;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnFoodAndDrink;
    private javax.swing.JPanel pnFoodDrinkAvg;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnMonthinyear;
    private javax.swing.JPanel pnShowControl;
    private javax.swing.JPanel pnShowIncome;
    private javax.swing.JPanel pnShowStatistic;
    private javax.swing.JPanel pnYeartoyear;
    private javax.swing.JRadioButton rbDayinmonth;
    private javax.swing.JRadioButton rbMonthinyear;
    private javax.swing.JRadioButton rbYeartoyear;
    // End of variables declaration//GEN-END:variables



// CUSTOM VARIABLE DECLARATION
    FrAdminWorkspace parent;
    LocalDate day = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    
    int STATISTIC_SHOW = 0;
    int INCOME_SHOW = 1;
    int ORDERTIMING_SHOW = 2;
    int show_mode = 0;
// END CUSTOM VARIABLE DECLARATION



// CUSTOM CODE
    private void initDisplayData(){
        CardLayout c;
        switch(this.show_mode){
            case 0:
                c = (CardLayout) this.pnDisplay.getLayout();
                c.show(this.pnDisplay,"card2");
                this.defaultStatistic();
                break;
            case 1:
                c = (CardLayout) this.pnDisplay.getLayout();
                c.show(this.pnDisplay,"card3");
                break;
        }
    }
    
    
    private void defaultStatistic(){
        // lấy dữ liệu từ database
        HashMap<Order, ArrayList<OrderDetails>> orderdata = OrderDAO.getlist_indate(java.sql.Date.valueOf(this.day));
        ArrayList<Customer> cuslist = (ArrayList<Customer>) CustomerDAO.getList();
        ArrayList<Food> foodlist = (ArrayList<Food>) FoodDAO.getList();
        double foodamount = 0;
        double drinkamount = 0;
        double otheramount = 0;
        double foodcount = 0;
        double drinkcount = 0;
        double othercount = 0;
        for(Entry<Order, ArrayList<OrderDetails>> iter : orderdata.entrySet()){
            int discount = 0;
            double curfoodamt = 0;
            double curdrinkamt = 0;
            double curotheramt = 0;
            for(Customer cusitem : cuslist){
                if(cusitem.getCus_id().equals(iter.getKey().getCus_id())){
                    discount = cusitem.getDiscount();
                    break;
                }
            }
            
            for(OrderDetails detailitem : iter.getValue()){
                float foodprice = 0;
                byte isdrink = 1;
                for(Food fitem : foodlist){
                    if(detailitem.getFood_id().equals(fitem.getFood_id())){
                        foodprice = fitem.getPrice();
                        isdrink = fitem.getIsdrink();
                        break;
                    }
                }
                
                switch(isdrink){
                    case 0:
                        curdrinkamt +=foodprice * detailitem.getQuan();
                        drinkcount++;
                        continue;
                    case 1:
                        curfoodamt += foodprice * detailitem.getQuan();
                        foodcount++;
                        continue;
                    case 2:
                        curotheramt += foodprice * detailitem.getQuan();
                        othercount++;
                }
            }
            
            foodamount += curfoodamt * (double)(100 - discount)/(double)(100);
            drinkamount += curdrinkamt * (double)(100 - discount)/(double)(100);
            otheramount += curotheramt * (double)(100 - discount)/(double)(100);
        }
        
        
        
        // food and drink amount
        // khởi tạo dataset cho chart
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Food Amt", foodamount);
        dataset.setValue("Drink Amt", drinkamount);
        dataset.setValue("Other Amt", otheramount);
        
        // tạo chart
        JFreeChart chart = ChartFactory.createPieChart("Today Total Amount", dataset, true, true, false);
        Plot chartplot = chart.getPlot();
        chartplot.setDrawingSupplier(new ChartDrawingSupplier());
        
        // tạo chart panel
        JPanel pnchart = new ChartPanel(chart);
        this.pnFoodAndDrink.add(pnchart, BorderLayout.CENTER);
        
        
        
        // food and drink average
        DefaultPieDataset dataset2 = new DefaultPieDataset();
        dataset2.setValue("Foods", foodcount);
        dataset2.setValue("Drinks", drinkcount);
        dataset2.setValue("Others", othercount);
        
        // tạo chart
        JFreeChart chart2 = ChartFactory.createPieChart("Today Order Number", dataset2, true, true, false);
        Plot chartplot2 = chart2.getPlot();
        chartplot2.setDrawingSupplier(new ChartDrawingSupplier());
        
        // tạo chart panel
        JPanel pnchart2 = new ChartPanel(chart2);
        this.pnFoodDrinkAvg.add(pnchart2, BorderLayout.CENTER);
    }
// END CUSTOM CODE
}
