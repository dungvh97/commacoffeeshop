/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.employee;

import entities.Food;
import entities.Order;
import entities.OrderDetails;
import entities.ReceiptNote;
import entities.ReceiptNoteDetails;
import java.io.File;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.OrderDAO;
import model.ReceiptNoteDAO;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.swing.JRViewer;
import supportclass.FoodReport;
import static supportclass.printing.PrintTextForm.localizedFormat;
import supportclass.printing.PrintWithoutDialog;
import supportclass.printing.ReportPrintTextForm;
import supportclass.printing.TableItem;

/**
 *
 * @author DELL
 */
public class DiaEndofdayreport extends javax.swing.JDialog {

    /**
     * Creates new form DiaEndofdayreport
     */
    public DiaEndofdayreport(FrEmployeeWorkspace parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        this.setLocationRelativeTo(this.parent);
        this.setLocation(400, 200);
        this.setModal(true);
        
        initComponents();
        
        initDefaultSetting();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngStyle = new javax.swing.ButtonGroup();
        pnInput = new javax.swing.JPanel();
        pnControl = new javax.swing.JPanel();
        btnGenerate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBegincash = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbPrint = new javax.swing.JCheckBox();
        txtDayreport = new javax.swing.JTextField();
        cbTextfile = new javax.swing.JCheckBox();
        pnOption = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        rdShortreport = new javax.swing.JRadioButton();
        rdLongreport = new javax.swing.JRadioButton();
        lbBegincashState = new javax.swing.JLabel();
        lbDayreportState = new javax.swing.JLabel();
        lbTextoutputState = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("End of Report");

        pnInput.setBackground(new java.awt.Color(204, 204, 204));

        pnControl.setBackground(new java.awt.Color(0, 0, 0));
        pnControl.setLayout(new java.awt.GridLayout(1, 0));

        btnGenerate.setBackground(new java.awt.Color(0, 153, 0));
        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        pnControl.add(btnGenerate);

        btnReset.setBackground(new java.awt.Color(153, 153, 0));
        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        pnControl.add(btnReset);

        btnClose.setBackground(new java.awt.Color(153, 0, 0));
        btnClose.setText("CLOSE");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        pnControl.add(btnClose);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Report");

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Begin of day Cash (kVND):");

        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Day report (yyyy-mm-dd):");

        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Text output:");

        cbPrint.setText("Print");

        cbTextfile.setText("Text file");

        pnOption.setBackground(new java.awt.Color(153, 153, 153));
        pnOption.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 153))); // NOI18N

        jLabel5.setText("Style:");

        btngStyle.add(rdShortreport);
        rdShortreport.setText("Short report");

        btngStyle.add(rdLongreport);
        rdLongreport.setText("Long report");

        javax.swing.GroupLayout pnOptionLayout = new javax.swing.GroupLayout(pnOption);
        pnOption.setLayout(pnOptionLayout);
        pnOptionLayout.setHorizontalGroup(
            pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOptionLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5)
                .addGap(45, 45, 45)
                .addComponent(rdShortreport)
                .addGap(18, 18, 18)
                .addComponent(rdLongreport)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        pnOptionLayout.setVerticalGroup(
            pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rdShortreport)
                    .addComponent(rdLongreport))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        lbBegincashState.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbBegincashState.setForeground(new java.awt.Color(204, 0, 0));

        lbDayreportState.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbDayreportState.setForeground(new java.awt.Color(204, 0, 0));

        lbTextoutputState.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbTextoutputState.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout pnInputLayout = new javax.swing.GroupLayout(pnInput);
        pnInput.setLayout(pnInputLayout);
        pnInputLayout.setHorizontalGroup(
            pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnInputLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(37, 37, 37)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnInputLayout.createSequentialGroup()
                        .addComponent(cbPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(cbTextfile))
                    .addComponent(txtDayreport)
                    .addComponent(txtBegincash))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbBegincashState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbDayreportState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbTextoutputState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(pnOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnInputLayout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        pnInputLayout.setVerticalGroup(
            pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnInputLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBegincash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbBegincashState, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDayreport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDayreportState, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbPrint)
                    .addComponent(cbTextfile)
                    .addComponent(lbTextoutputState, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(pnControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(pnInput, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        this.lbBegincashState.setText("");
        this.lbDayreportState.setText("");
        this.lbTextoutputState.setText("");
        
        // kiểm tra và lấy dữ liệu begincash
        try{
            this.begincash = Float.parseFloat(this.txtBegincash.getText());
            
            if(this.begincash < 0){
                this.lbBegincashState.setText("!");
                this.txtBegincash.requestFocus();
                return;
            }
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            this.lbBegincashState.setText("!");
            this.txtBegincash.requestFocus();
            return;
        }
        
        // kiểm tra và lấy dữ liệu reportday
        int day, month, year;
        if(this.txtDayreport.getText().length() != 10){
            this.lbDayreportState.setText("!");
            this.txtDayreport.requestFocus();
            return;
        }
        try{
            year = Integer.parseInt(this.txtDayreport.getText().substring(0, 4));
            month = Integer.parseInt(this.txtDayreport.getText().substring(5, 7));
            day = Integer.parseInt(this.txtDayreport.getText().substring(8, 10));
            this.dayreport = LocalDate.of(year, month, day);
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            this.lbDayreportState.setText("!");
            this.txtDayreport.requestFocus();
            return;
        }
        
        // kiểu tra chọn hình thức xuất report
        if(!this.cbPrint.isSelected() && !this.cbTextfile.isSelected()){
            this.lbTextoutputState.setText("!");
            return;
        }
        
        
        
        this.orderlist = OrderDAO.getlist_indate(java.sql.Date.valueOf(dayreport));
        this.rnlist = ReceiptNoteDAO.getlist_indate(java.sql.Date.valueOf(dayreport));
        
        // tiến hành in report
        if(this.cbPrint.isSelected()){
            int totalorder = this.orderlist.size();
            int totalorderamount = 0;
            int totalcustomerpay = 0;
            int totalchange = 0;
            int totalfoodpurchase = 0;
            int totalotherpurchase = 0;
            int beginofday = (int) (this.begincash * 1000);
            int endofday;
            int totaldiscount;

            for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
                totalorderamount += iter.getKey().getPrice() * 1000;
                totalcustomerpay += iter.getKey().getCustomerpay() * 1000;
                totalchange += iter.getKey().getPayback() * 1000;
            }


            for(Entry<ReceiptNote, ArrayList<ReceiptNoteDetails>> iter : this.rnlist.entrySet()){
                for(ReceiptNoteDetails rnditem : iter.getValue()){
                    if(rnditem.getFm_id().equals("FM00000000")){
                        totalotherpurchase += rnditem.getItem_price() * rnditem.getQuan() * 1000;
                    }else{
                        totalfoodpurchase += rnditem.getItem_price() * rnditem.getQuan() * 1000;
                    }
                }
            }

            endofday = beginofday + totalcustomerpay - totalchange - (totalfoodpurchase + totalotherpurchase);

            int realamount = 0;
            for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
                for(OrderDetails oditem : iter.getValue()){
                    for(Food fitem : this.parent.menufood_list){
                        if(fitem.getFood_id().equals(oditem.getFood_id())){
                            realamount += fitem.getPrice() * oditem.getQuan() * 1000;
                            break;
                        }
                    }
                }
            }
            totaldiscount = realamount - totalorderamount;
        
            
            
            ArrayList<TableItem> tabledata = this.toReportTable();
            ReportPrintTextForm printtext = new ReportPrintTextForm(totalorder, totalorderamount, totalcustomerpay, totalchange, totalfoodpurchase, totalotherpurchase, beginofday, endofday, totaldiscount, dayreport);
            printtext.prepareTextForPrint();
            String[] dummy = new String[0];
            String[] pretext = printtext.getPretext().toArray(dummy);
            String[] posttext = printtext.getPosttext().toArray(dummy);
            Integer[] boldline = printtext.getBoldline();
            
            
            if(this.rdLongreport.isSelected()){
                PrintWithoutDialog printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, tabledata, posttext, PrintWithoutDialog.REPORT_PRINT);
            }else{
                PrintWithoutDialog printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, new ArrayList<>(), posttext, PrintWithoutDialog.REPORT_PRINT);
            }
            
        }
        
        
        
        // tiến hành tạo file report pdf
        if(this.cbTextfile.isSelected()){
            if(this.rdLongreport.isSelected()){
                this.generateLongTextReport();
            }else{
                this.generateShortTextReport();
            }
        }
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        this.initDefaultSetting();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiaEndofdayreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiaEndofdayreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiaEndofdayreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiaEndofdayreport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiaEndofdayreport dialog = new DiaEndofdayreport(new FrEmployeeWorkspace(null), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnReset;
    private javax.swing.ButtonGroup btngStyle;
    private javax.swing.JCheckBox cbPrint;
    private javax.swing.JCheckBox cbTextfile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lbBegincashState;
    private javax.swing.JLabel lbDayreportState;
    private javax.swing.JLabel lbTextoutputState;
    private javax.swing.JPanel pnControl;
    private javax.swing.JPanel pnInput;
    private javax.swing.JPanel pnOption;
    private javax.swing.JRadioButton rdLongreport;
    private javax.swing.JRadioButton rdShortreport;
    private javax.swing.JTextField txtBegincash;
    private javax.swing.JTextField txtDayreport;
    // End of variables declaration//GEN-END:variables




// CUSTOM VARIABLE REPORT
    FrEmployeeWorkspace parent;
    
    
    // default setting info
    LocalDate dayreport = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    float begincash = 2000;
    
    
    ArrayList<FoodReport> tabledata;
    HashMap<Order, ArrayList<OrderDetails>> orderlist;
    HashMap<ReceiptNote, ArrayList<ReceiptNoteDetails>> rnlist;
// END CUSTOM VARIABLE REPORT
    
    
    
// CUSTOM CODE
    private void initDefaultSetting() {
        this.lbBegincashState.setText("");
        this.lbDayreportState.setText("");
        this.lbTextoutputState.setText("");
        
        this.txtBegincash.setText(String.valueOf(this.begincash));
        this.txtDayreport.setText(String.valueOf(this.dayreport));
        
        this.cbPrint.setSelected(true);
        this.cbTextfile.setSelected(false);
        
        this.rdLongreport.setSelected(true);
        this.rdShortreport.setSelected(false);
    }
    
    private void generateLongTextReport(){
        // lấy dữ liệu là các record từ database
        try{
            // tạo datasource cho tập tin report
            List<Map<String, ?>> dataSource = new ArrayList<Map<String, ?>>();
            
            // đưa dữ liệu vào datasource
            this.generateTableData(dataSource);
            this.generateOtherData(dataSource);
            
            
            

            // khởi tạo jasperreport datasource
            JRDataSource jrdata = new JRBeanCollectionDataSource(dataSource);
            String reportlink = "src/report/eod_report.jrxml";
            
            // biên dịch tập tin jasperreport xml đã được thiết kết trước
            JasperReport report = JasperCompileManager.compileReport(reportlink);
            
            // nạp dữ liệu vào tập tin jasperreport xml
            JasperPrint filledReport = JasperFillManager.fillReport(report, null, jrdata);
            
            // xuất report trong frame
            new FrShowReport(new JRViewer(filledReport)).setVisible(true);
            
            
            // xuất report ra file pdf
            /*JasperExportManager.exportReportToPdfFile(filledReport,
            "C:/csystemreport/eodreport" + this.dayreport.toString() +".pdf");*/
        } catch (JRException ex) {
            Logger.getLogger(DiaEndofdayreport.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Somethings went wrong, can not generate the report file", "REPORT WARNNING", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void generateShortTextReport(){
        try{
            List<Map<String, ?>> dataSource = new ArrayList<Map<String, ?>>();
            
            this.generateOtherData(dataSource);
            
            // khởi tạo jasperreport datasource
            JRDataSource jrdata = new JRBeanCollectionDataSource(dataSource);
            String reportlink = "src/report/short_eod_report.jrxml";
            
            // biên dịch tập tin jasperreport xml đã được thiết kết trước
            JasperReport report = JasperCompileManager.compileReport(reportlink);
            
            // nạp dữ liệu vào tập tin jasperreport xml
            JasperPrint filledReport = JasperFillManager.fillReport(report, null, jrdata);
            
            // xuất report trong frame
            new FrShowReport(new JRViewer(filledReport)).setVisible(true);
            
            
            // xuất report ra file pdf
            /*JasperExportManager.exportReportToPdfFile(filledReport,
            "C:/csystemreport/eodreport" + this.dayreport.toString() +".pdf");*/
        } catch (JRException ex) {
            Logger.getLogger(DiaEndofdayreport.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Somethings went wrong, can not generate the report file", "REPORT WARNNING", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    
    /*
    * this function is generate another field for jasperreport, these field need to calculate/query before add to datasource
    */
    private void generateOtherData(List<Map<String, ?>> dataSource) {
        int totalorder = this.orderlist.size();
        int totalorderamount = 0;
        int totalcustomerpay = 0;
        int totalchange = 0;
        int totalfoodpurchase = 0;
        int totalotherpurchase = 0;
        int beginofday = (int) (this.begincash * 1000);
        int endofday;
        int totaldiscount;
        
        for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
            totalorderamount += iter.getKey().getPrice() * 1000;
            totalcustomerpay += iter.getKey().getCustomerpay() * 1000;
            totalchange += iter.getKey().getPayback() * 1000;
        }

        
        for(Entry<ReceiptNote, ArrayList<ReceiptNoteDetails>> iter : this.rnlist.entrySet()){
            for(ReceiptNoteDetails rnditem : iter.getValue()){
                if(rnditem.getFm_id().equals("FM00000000")){
                    totalotherpurchase += rnditem.getItem_price() * rnditem.getQuan() * 1000;
                }else{
                    totalfoodpurchase += rnditem.getItem_price() * rnditem.getQuan() * 1000;
                }
            }
        }
        
        endofday = beginofday + totalcustomerpay - totalchange - (totalfoodpurchase + totalotherpurchase);
        
        int realamount = 0;
        for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
            for(OrderDetails oditem : iter.getValue()){
                for(Food fitem : this.parent.menufood_list){
                    if(fitem.getFood_id().equals(oditem.getFood_id())){
                        realamount += fitem.getPrice() * oditem.getQuan() * 1000;
                        break;
                    }
                }
            }
        }
        totaldiscount = realamount - totalorderamount;
        
        
        
        // prepare data before add to datasource
        HashMap<String, Object> calculatefield = new HashMap<String, Object>();
        calculatefield.put("totalorder", totalorder);
        calculatefield.put("totalorderamount", totalorderamount);
        calculatefield.put("totalcustomerpay", totalcustomerpay);
        calculatefield.put("totalchange", totalchange);
        calculatefield.put("totalfoodpurchase", totalfoodpurchase);
        calculatefield.put("totalotherpurchase", totalotherpurchase);
        calculatefield.put("beginofday", beginofday);
        calculatefield.put("endofday", endofday);
        calculatefield.put("dayreport", this.dayreport.toString());
        calculatefield.put("totaldiscount", totaldiscount);
        
        // add data to datasource
        dataSource.add(calculatefield);
    }
    
    
    /*
    * this function is generate field for table in jasperreport
    */
    private void generateTableData(List<Map<String, ?>> dataSource) {
        
        this.tabledata = new ArrayList<>();
        for(Food fitem : this.parent.menufood_list){
            int quan = 0;
            int orderamount = 0;
            
            FoodReport newitem = new FoodReport();
            newitem.setName(fitem.getName());                                                   // tên món
            switch(fitem.getIsdrink()){                                                         // loại món
                case 0:
                    newitem.setIsdrink("drink");
                    break;
                case 1:
                    newitem.setIsdrink("food");
                    break;
                case 2:
                    newitem.setIsdrink("other");
            }
            
            for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
                for(OrderDetails oditem : iter.getValue()){
                    if(oditem.getFood_id().equals(fitem.getFood_id())){
                        quan += oditem.getQuan();
                    }
                }
            }
            
            newitem.setQuan(quan);                                                              // số lượng đã order
            
            orderamount = (int) (quan * fitem.getPrice() * 1000);                               // tống tiền đẵ order
            newitem.setOrderamount(orderamount);
            tabledata.add(newitem);
        }
        
        
        for(FoodReport item : tabledata){
            if(item.getQuan() > 0){
                HashMap<String, Object> newrecord = new HashMap<>();
                newrecord.put("foodname", item.getName());
                newrecord.put("isdrink", item.getIsdrink());
                newrecord.put("quan", item.getQuan());
                newrecord.put("orderamount", item.getOrderamount());

                dataSource.add(newrecord);
            }
        }
    }
    
    private ArrayList<TableItem> toReportTable() {
        ArrayList<FoodReport> data = new ArrayList<>();
        for(Food fitem : this.parent.menufood_list){
            int quan = 0;
            int orderamount = 0;
            
            FoodReport newitem = new FoodReport();
            newitem.setName(fitem.getName());                                                   // tên món
            switch(fitem.getIsdrink()){                                                         // loại món
                case 0:
                    newitem.setIsdrink("drink");
                    break;
                case 1:
                    newitem.setIsdrink("food");
                    break;
                case 2:
                    newitem.setIsdrink("other");
            }
            
            for(Entry<Order, ArrayList<OrderDetails>> iter : this.orderlist.entrySet()){
                for(OrderDetails oditem : iter.getValue()){
                    if(oditem.getFood_id().equals(fitem.getFood_id())){
                        quan += oditem.getQuan();
                    }
                }
            }
            
            newitem.setQuan(quan);                                                              // số lượng đã order
            
            orderamount = (int) (quan * fitem.getPrice() * 1000);                               // tống tiền đẵ order
            newitem.setOrderamount(orderamount);
            data.add(newitem);
        }
        
        
        ArrayList<TableItem> r = new ArrayList<>();
        
        // tiêu dề table
        r.add(new TableItem("Name", "Quan", "", "Amt"));
        
        // dữ liệu table
        for(FoodReport iter : data){
            if(iter.getQuan() > 0){
                TableItem newitem = new TableItem();
                newitem.setProduct(iter.getName());
                newitem.setQuan(String.valueOf(iter.getQuan()));
                String sAmt = localizedFormat("###,###.###", iter.getOrderamount(), Locale.US);
                newitem.setAmt(sAmt);

                r.add(newitem);
            }
        }
        
        // tổng kết table
        int totalamount = 0;
        for(FoodReport iter : data){
            totalamount += iter.getOrderamount();
        }
        r.add(new TableItem("Total: ", "", "", localizedFormat("###,###.###", totalamount, Locale.US)));
        r.add(new TableItem("", "", "", ""));
        
        return r;
    }
// END CUSTOM CODE
}
