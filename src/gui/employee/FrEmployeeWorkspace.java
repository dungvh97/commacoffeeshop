/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui.employee;

import supportclass.printing.TableItem;
import supportclass.printing.PrintTextForm;
import supportclass.printing.ReceiptPrintTextForm;
import supportclass.printing.PrintWithoutDialog;
import supportclass.printing.KitchenPrintTextForm;
import entities.*;
import gui.FrLogin;
import supportclass.*;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.CustomerDAO;
import model.FoodDAO;
import model.FoodMaterialDAO;
import model.SalaryNoteDAO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.DateTimeException;
import java.time.Month;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import model.AdminDAO;
import model.EmployeeDAO;
import model.OrderDAO;
import model.ReceiptNoteDAO;
import static supportclass.printing.PrintTextForm.localizedFormat;

/**
 *
 * @author Administrator
 */
public class FrEmployeeWorkspace extends javax.swing.JFrame {

    /** Creates new form FrEmployeeWorkspace */
    public FrEmployeeWorkspace(Employee e) {
        if(e != null){
            this.working_emp.add(e);                                // Thêm nhân viên vào danh sách login
            String salaryid = SalaryNoteDAO.insert(e);
            if(salaryid == null){                        // tạo và lưu bảng lương trong tháng/năm cho nhân viên vào database
                // thất bại
                JOptionPane.showConfirmDialog(null, "Some problem cause! Can not create the new SalaryNote for Employee", "DATABASE WARNING", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                this.dispose();
                return;
            }else{
                // tạo mới thành công hoặc đã có sẵn
                EmpSchedule emschedule = new EmpSchedule();             // tạo lịch cho nv trong ngày hiện tại
                emschedule.setEm_id(e.getEm_id());
                this.setScheduleDate(emschedule);
                this.setScheduleTime(emschedule, true);
                emschedule.setResult_salary(salaryid);
                this.working_schedule.add(emschedule);
            }
        }
        
        this.getsetting();              // lấy thông tin tuỳ chỉnh của chương trình từ file txt
        
        this.setMenuPanelSize();        // thiết lập kích thước khung menu cho vừa với số menu item
        this.setTablePanelSize();       // thiết lập khích thước khung table cho vừa với số bàn
        this.initCustomer();
        this.initComponents();
       
        this.setFrameIcon();
        
        this.setLocationRelativeTo(this);
        
        this.titleSetting();
        
        this.initMenu();
        this.showDrinkmenu("[\\w ]*");
        this.isDrinkshow = true;
        
        this.initOrderTable();
        
        this.initInvoice();
        
        this.initSettingForm();
        
        this.loadLastWorkingInfo();
        this.saveCurrentInfo(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnShow = new javax.swing.JPanel();
        pnShowControl = new javax.swing.JPanel();
        btnMenu = new javax.swing.JToggleButton();
        btnEmployee = new javax.swing.JToggleButton();
        btnSetting = new javax.swing.JToggleButton();
        pnDisplay = new javax.swing.JPanel();
        pnBlank = new javax.swing.JPanel(){
            @Override
            protected void paintComponent(Graphics g) {
                Image image = null;
                try{
                    image = ImageIO.read(new File("src/image/blank_picture.jpg")).getScaledInstance(830, 680, Image.SCALE_SMOOTH);
                }catch(IOException ex){
                    ex.printStackTrace();
                }
                super.paintComponent(g);
                g.drawImage(image, 50, 0, this); // see javadoc for more info on the parameters
            }
        };
        pnDisplayMenu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        pnMenuSwitch = new javax.swing.JPanel();
        btnDrink = new javax.swing.JButton();
        btnEat = new javax.swing.JButton();
        btnOtherthing = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnAddReceiptNote = new javax.swing.JButton();
        pnMenuSkip = new javax.swing.JPanel();
        btnAll = new javax.swing.JButton();
        btnA = new javax.swing.JButton();
        btnB = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        btnD = new javax.swing.JButton();
        btnE = new javax.swing.JButton();
        btnF = new javax.swing.JButton();
        btnG = new javax.swing.JButton();
        btnH = new javax.swing.JButton();
        btnI = new javax.swing.JButton();
        btnJ = new javax.swing.JButton();
        btnK = new javax.swing.JButton();
        btnL = new javax.swing.JButton();
        btnM = new javax.swing.JButton();
        btnN = new javax.swing.JButton();
        btnO = new javax.swing.JButton();
        btnP = new javax.swing.JButton();
        btnQ = new javax.swing.JButton();
        btnR = new javax.swing.JButton();
        btnS = new javax.swing.JButton();
        btnT = new javax.swing.JButton();
        btnU = new javax.swing.JButton();
        btnV = new javax.swing.JButton();
        btnW = new javax.swing.JButton();
        btnX = new javax.swing.JButton();
        btnY = new javax.swing.JButton();
        btnZ = new javax.swing.JButton();
        pnMenuDisplayDetails = new javax.swing.JPanel();
        pnDrink = new javax.swing.JPanel();
        pnEat = new javax.swing.JPanel();
        pnOther = new javax.swing.JPanel();
        pnStock = new javax.swing.JPanel();
        pnWait = new javax.swing.JPanel();
        pnDisplayEmployee = new javax.swing.JPanel();
        pnEmpdefaultinfo = new javax.swing.JPanel();
        cboEmpName = new javax.swing.JComboBox<>();
        lbAvatar = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbManager = new javax.swing.JLabel();
        lbEmpRole = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lbEmphourwage = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbEmpStartday = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEmpUsername = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEmpPass = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        txtEmpBirth = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEmpPhone = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmpEmail = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtEmpAddress = new javax.swing.JTextArea();
        btnEmpChangeInfo = new javax.swing.JButton();
        pnDisplaySetting = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtMenutablenumber = new javax.swing.JTextField();
        txtMenuitemnumber = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtTodaydiscount = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        listFood = new javax.swing.JList<>();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        listFoodDiscount = new javax.swing.JList<>();
        btnAddtodiscount = new javax.swing.JButton();
        btnAddAlltodiscount = new javax.swing.JButton();
        btnRemovefromdiscount = new javax.swing.JButton();
        btnRemoveAllfromdiscount = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnSavesetting = new javax.swing.JButton();
        btnResetsetting = new javax.swing.JButton();
        lbSettingstate = new javax.swing.JLabel();
        pnUsing = new javax.swing.JPanel();
        pnOrderTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnShowTable = new javax.swing.JPanel();
        pnBill = new javax.swing.JPanel();
        pnBillBlank = new javax.swing.JPanel();
        pnOrderBill = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cboChooseCustomer = new javax.swing.JComboBox<>();
        lbCustomer = new javax.swing.JLabel();
        lbShowOrderTable = new supportclass.RollLabel();
        jLabel20 = new javax.swing.JLabel();
        txtCustomernumber = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbOrderFood = new javax.swing.JTable();
        pnOrderNote = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnAddnote = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtOrderNote = new javax.swing.JTextArea();
        pnOrderControl = new javax.swing.JPanel();
        btnPay = new javax.swing.JButton();
        btnKitchenPrint = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnReceiptBill = new javax.swing.JPanel();
        pnReceitpInput = new javax.swing.JPanel();
        rlbShowReceiptBill = new supportclass.RollLabel();
        cbEmployeeInput = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbTotalAmount = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbInvoice = new javax.swing.JTable();
        pnReceiptControl = new javax.swing.JPanel();
        btnOtherReceipt = new javax.swing.JButton();
        btnReceiptSave = new javax.swing.JButton();
        btnDeleteReceiptItem = new javax.swing.JButton();
        btnReceiptReset = new javax.swing.JButton();
        mnbMain = new javax.swing.JMenuBar();
        mnEdit = new javax.swing.JMenu();
        mniEndofdayreport = new javax.swing.JMenuItem();
        mniSwapTable = new javax.swing.JMenuItem();
        mniGeneratePDFBill = new javax.swing.JCheckBoxMenuItem();
        mnSystem = new javax.swing.JMenu();
        miAddemp = new javax.swing.JMenuItem();
        miLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee Workplace");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        pnShow.setBackground(new java.awt.Color(0, 153, 204));
        pnShow.setPreferredSize(new java.awt.Dimension(1000, 479));
        pnShow.setLayout(new javax.swing.BoxLayout(pnShow, javax.swing.BoxLayout.LINE_AXIS));

        pnShowControl.setBackground(new java.awt.Color(0, 0, 0));
        pnShowControl.setPreferredSize(new java.awt.Dimension(80, 487));
        pnShowControl.setLayout(new java.awt.GridLayout(3, 0));

        btnMenu.setBackground(new java.awt.Color(204, 204, 204));
        btnMenu.setToolTipText("menu display");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        pnShowControl.add(btnMenu);
        ImageIcon Menuicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/menu_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Menuicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnMenu.setIcon(Menuicon);

        btnEmployee.setBackground(new java.awt.Color(204, 204, 204));
        btnEmployee.setToolTipText("employee display");
        btnEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployeeActionPerformed(evt);
            }
        });
        pnShowControl.add(btnEmployee);
        ImageIcon Employeeicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/employee_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Employeeicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnEmployee.setIcon(Employeeicon);

        btnSetting.setBackground(new java.awt.Color(204, 204, 204));
        btnSetting.setToolTipText("setting display");
        btnSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingActionPerformed(evt);
            }
        });
        pnShowControl.add(btnSetting);
        ImageIcon Settingicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/setting_icon.png")).getScaledInstance(70, 70, Image.SCALE_SMOOTH);
            Settingicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSetting.setIcon(Settingicon);

        pnShow.add(pnShowControl);

        pnDisplay.setBackground(new java.awt.Color(149, 175, 216));
        pnDisplay.setPreferredSize(new java.awt.Dimension(900, 487));
        pnDisplay.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnBlankLayout = new javax.swing.GroupLayout(pnBlank);
        pnBlank.setLayout(pnBlankLayout);
        pnBlankLayout.setHorizontalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 919, Short.MAX_VALUE)
        );
        pnBlankLayout.setVerticalGroup(
            pnBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );

        pnDisplay.add(pnBlank, "card5");

        pnDisplayMenu.setBackground(new java.awt.Color(11, 34, 66));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        pnMenuSwitch.setBackground(new java.awt.Color(51, 51, 51));
        pnMenuSwitch.setPreferredSize(new java.awt.Dimension(100, 32));
        pnMenuSwitch.setLayout(new java.awt.GridLayout(1, 0));

        btnDrink.setToolTipText("drink");
        btnDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinkActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnDrink);
        ImageIcon Drinkicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/drink_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Drinkicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnDrink.setIcon(Drinkicon);

        btnEat.setToolTipText("food");
        btnEat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEatActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnEat);
        ImageIcon Eaticon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/eat_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Eaticon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnEat.setIcon(Eaticon);

        btnOtherthing.setToolTipText("other");
        btnOtherthing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherthingActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnOtherthing);
        ImageIcon Othericon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/other_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Othericon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnOtherthing.setIcon(Othericon);

        btnStock.setToolTipText("stock materials");
        btnStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnStock);
        ImageIcon Stockicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/stock_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Stockicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnStock.setIcon(Stockicon);

        btnSearch.setToolTipText("search food");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnSearch);
        ImageIcon Searchicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/search_icon.png")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            Searchicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnSearch.setIcon(Searchicon);

        btnAddReceiptNote.setBackground(new java.awt.Color(0, 0, 0));
        btnAddReceiptNote.setToolTipText("input receipt note");
        btnAddReceiptNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddReceiptNoteActionPerformed(evt);
            }
        });
        pnMenuSwitch.add(btnAddReceiptNote);
        ImageIcon AddBillicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/addbill_icon.jpg")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
            AddBillicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnAddReceiptNote.setIcon(AddBillicon);

        jPanel1.add(pnMenuSwitch);

        pnMenuSkip.setBackground(new java.awt.Color(204, 204, 255));
        pnMenuSkip.setPreferredSize(new java.awt.Dimension(0, 30));
        pnMenuSkip.setLayout(new java.awt.GridLayout(1, 0));
        pnMenuSkip.add(btnAll);
        this.btnAll.setBorderPainted(false);
        this.btnAll.setFocusPainted(false);
        this.btnAll.setContentAreaFilled(false);

        ImageIcon Allicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/all_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Allicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnAll.setIcon(Allicon);

        this.btnAll.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "[\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnA);
        this.btnA.setBorderPainted(false);
        this.btnA.setFocusPainted(false);
        this.btnA.setContentAreaFilled(false);

        ImageIcon Aicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/a_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Aicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnA.setIcon(Aicon);

        this.btnA.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[aA][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnB);
        this.btnB.setBorderPainted(false);
        this.btnB.setFocusPainted(false);
        this.btnB.setContentAreaFilled(false);

        ImageIcon Bicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/b_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Bicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnB.setIcon(Bicon);

        this.btnB.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[bB][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnC);
        this.btnC.setBorderPainted(false);
        this.btnC.setFocusPainted(false);
        this.btnC.setContentAreaFilled(false);

        ImageIcon Cicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/c_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Cicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnC.setIcon(Cicon);

        this.btnC.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[cC][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnD);
        ImageIcon Dicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/d_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Dicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnD.setIcon(Dicon);

        this.btnD.setBorderPainted(false);
        this.btnD.setFocusPainted(false);
        this.btnD.setContentAreaFilled(false);

        this.btnD.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[dD][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnE);
        ImageIcon Eicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/e_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Eicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnE.setIcon(Eicon);
        this.btnE.setBorderPainted(false);
        this.btnE.setFocusPainted(false);
        this.btnE.setContentAreaFilled(false);

        this.btnE.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[eE][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnF);
        ImageIcon Ficon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/f_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ficon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnF.setIcon(Ficon);
        this.btnF.setBorderPainted(false);
        this.btnF.setFocusPainted(false);
        this.btnF.setContentAreaFilled(false);

        this.btnF.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[fF][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnG);
        ImageIcon Gicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/g_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Gicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnG.setIcon(Gicon);
        this.btnG.setBorderPainted(false);
        this.btnG.setFocusPainted(false);
        this.btnG.setContentAreaFilled(false);
        this.btnG.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[gG][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnH);
        ImageIcon Hicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/h_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Hicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnH.setIcon(Hicon);
        this.btnH.setBorderPainted(false);
        this.btnH.setFocusPainted(false);
        this.btnH.setContentAreaFilled(false);
        this.btnH.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[hH][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnI);
        ImageIcon Iicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/i_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Iicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnI.setIcon(Iicon);
        this.btnI.setBorderPainted(false);
        this.btnI.setFocusPainted(false);
        this.btnI.setContentAreaFilled(false);
        this.btnI.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[iI][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnJ);
        ImageIcon Jicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/j_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Jicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnJ.setIcon(Jicon);
        this.btnJ.setBorderPainted(false);
        this.btnJ.setFocusPainted(false);
        this.btnJ.setContentAreaFilled(false);
        this.btnJ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[jJ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnK);
        ImageIcon Kicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/k_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Kicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnK.setIcon(Kicon);
        this.btnK.setBorderPainted(false);
        this.btnK.setFocusPainted(false);
        this.btnK.setContentAreaFilled(false);
        this.btnK.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[kK][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnL);
        ImageIcon Licon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/l_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Licon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnL.setIcon(Licon);
        this.btnL.setBorderPainted(false);
        this.btnL.setFocusPainted(false);
        this.btnL.setContentAreaFilled(false);
        this.btnL.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[lL][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnM);
        ImageIcon Micon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/m_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Micon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnM.setIcon(Micon);
        this.btnM.setBorderPainted(false);
        this.btnM.setFocusPainted(false);
        this.btnM.setContentAreaFilled(false);
        this.btnM.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[mM][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnN);
        ImageIcon Nicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/n_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Nicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnN.setIcon(Nicon);
        this.btnN.setBorderPainted(false);
        this.btnN.setFocusPainted(false);
        this.btnN.setContentAreaFilled(false);
        this.btnN.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[nN][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnO);
        ImageIcon Oicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/o_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Oicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnO.setIcon(Oicon);
        this.btnO.setBorderPainted(false);
        this.btnO.setFocusPainted(false);
        this.btnO.setContentAreaFilled(false);
        this.btnO.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[oO][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnP);
        ImageIcon Picon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/p_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Picon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnP.setIcon(Picon);
        this.btnP.setBorderPainted(false);
        this.btnP.setFocusPainted(false);
        this.btnP.setContentAreaFilled(false);
        this.btnP.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[pP][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnQ);
        ImageIcon Qicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/q_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Qicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnQ.setIcon(Qicon);
        this.btnQ.setBorderPainted(false);
        this.btnQ.setFocusPainted(false);
        this.btnQ.setContentAreaFilled(false);
        this.btnQ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[qQ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnR);
        ImageIcon Ricon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/r_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ricon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnR.setIcon(Ricon);
        this.btnR.setBorderPainted(false);
        this.btnR.setFocusPainted(false);
        this.btnR.setContentAreaFilled(false);
        this.btnR.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[rR][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnS);
        ImageIcon Sicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/s_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Sicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnS.setIcon(Sicon);
        this.btnS.setBorderPainted(false);
        this.btnS.setFocusPainted(false);
        this.btnS.setContentAreaFilled(false);
        this.btnS.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[sS][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnT);
        ImageIcon Ticon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/t_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Ticon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnT.setIcon(Ticon);
        this.btnT.setBorderPainted(false);
        this.btnT.setFocusPainted(false);
        this.btnT.setContentAreaFilled(false);
        this.btnT.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[tT][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnU);
        ImageIcon Uicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/u_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Uicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnU.setIcon(Uicon);
        this.btnU.setBorderPainted(false);
        this.btnU.setFocusPainted(false);
        this.btnU.setContentAreaFilled(false);
        this.btnU.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[uU][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnV);
        ImageIcon Vicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/v_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Vicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnV.setIcon(Vicon);
        this.btnV.setBorderPainted(false);
        this.btnV.setFocusPainted(false);
        this.btnV.setContentAreaFilled(false);
        this.btnV.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[vV][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnW);
        ImageIcon Wicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/w_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Wicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnW.setIcon(Wicon);
        this.btnW.setBorderPainted(false);
        this.btnW.setFocusPainted(false);
        this.btnW.setContentAreaFilled(false);
        this.btnW.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[wW][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnX);
        ImageIcon Xicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/x_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Xicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnX.setIcon(Xicon);
        this.btnX.setBorderPainted(false);
        this.btnX.setFocusPainted(false);
        this.btnX.setContentAreaFilled(false);
        this.btnX.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[xX][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnY);
        ImageIcon Yicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/y_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Yicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnY.setIcon(Yicon);
        this.btnY.setBorderPainted(false);
        this.btnY.setFocusPainted(false);
        this.btnY.setContentAreaFilled(false);
        this.btnY.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[yY][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });
        pnMenuSkip.add(btnZ);
        ImageIcon Zicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/z_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            Zicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnZ.setIcon(Zicon);
        this.btnZ.setBorderPainted(false);
        this.btnZ.setFocusPainted(false);
        this.btnZ.setContentAreaFilled(false);
        this.btnZ.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String regex = "^[zZ][\\w ]*";

                if(isDrinkshow){
                    pnDrink.removeAll();
                    showDrinkmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card3");
                }
                if(isEatshow){
                    pnEat.removeAll();
                    showEatmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card2");
                }
                if(isOthershow){
                    pnOther.removeAll();
                    showOthermenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card4");
                }
                if(isStockshow){
                    pnStock.removeAll();
                    showStockmenu(regex);
                    CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
                    cl.show(pnMenuDisplayDetails, "card7");
                    cl.show(pnMenuDisplayDetails, "card5");
                }
            }
        });

        jPanel1.add(pnMenuSkip);

        pnMenuDisplayDetails.setBackground(new java.awt.Color(204, 204, 204));
        pnMenuDisplayDetails.setPreferredSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnMenuDisplayDetails.setLayout(new java.awt.CardLayout());

        pnDrink.setBackground(new java.awt.Color(232, 146, 0));
        pnDrink.setPreferredSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnDrink.setMaximumSize(new java.awt.Dimension(this.Menupn_width, this.Menupn_height));
        pnDrink.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnDrink, "card3");

        pnEat.setBackground(new java.awt.Color(232, 146, 0));
        pnEat.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnEat, "card2");

        pnOther.setBackground(new java.awt.Color(232, 146, 0));
        pnOther.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnOther, "card4");

        pnStock.setBackground(new java.awt.Color(232, 146, 0));
        pnStock.setLayout(new java.awt.GridLayout(0, 6, 20, 20));
        pnMenuDisplayDetails.add(pnStock, "card5");

        pnWait.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnWaitLayout = new javax.swing.GroupLayout(pnWait);
        pnWait.setLayout(pnWaitLayout);
        pnWaitLayout.setHorizontalGroup(
            pnWaitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 916, Short.MAX_VALUE)
        );
        pnWaitLayout.setVerticalGroup(
            pnWaitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        pnMenuDisplayDetails.add(pnWait, "card7");

        jPanel1.add(pnMenuDisplayDetails);

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout pnDisplayMenuLayout = new javax.swing.GroupLayout(pnDisplayMenu);
        pnDisplayMenu.setLayout(pnDisplayMenuLayout);
        pnDisplayMenuLayout.setHorizontalGroup(
            pnDisplayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE)
        );
        pnDisplayMenuLayout.setVerticalGroup(
            pnDisplayMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);

        pnDisplay.add(pnDisplayMenu, "card2");

        pnDisplayEmployee.setBackground(new java.awt.Color(204, 204, 204));

        pnEmpdefaultinfo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 255), null, new java.awt.Color(204, 255, 255)));

        String[] currentemployee_name2 = new String[this.working_emp.size()];
        for(int i = 0; i < this.working_emp.size(); i++){
            currentemployee_name2[i] = this.working_emp.get(i).getName();
        }
        cboEmpName.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name2));
        cboEmpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboEmpNameActionPerformed(evt);
            }
        });

        jLabel5.setText("Name:");

        jLabel6.setText("Manager:");

        jLabel7.setText("Role:");

        lbManager.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbManager.setForeground(new java.awt.Color(204, 0, 0));

        lbEmpRole.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbEmpRole.setForeground(new java.awt.Color(204, 0, 0));

        jLabel10.setText("Wage per hour (kVND):");

        lbEmphourwage.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbEmphourwage.setForeground(new java.awt.Color(204, 0, 0));

        jLabel14.setText("Start day:");

        lbEmpStartday.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbEmpStartday.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout pnEmpdefaultinfoLayout = new javax.swing.GroupLayout(pnEmpdefaultinfo);
        pnEmpdefaultinfo.setLayout(pnEmpdefaultinfoLayout);
        pnEmpdefaultinfoLayout.setHorizontalGroup(
            pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmpdefaultinfoLayout.createSequentialGroup()
                .addComponent(lbAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel14))
                .addGap(39, 39, 39)
                .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboEmpName, 0, 150, Short.MAX_VALUE)
                    .addComponent(lbManager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbEmpRole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbEmphourwage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbEmpStartday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnEmpdefaultinfoLayout.setVerticalGroup(
            pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmpdefaultinfoLayout.createSequentialGroup()
                .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnEmpdefaultinfoLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lbManager, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lbEmpRole, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lbAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lbEmphourwage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnEmpdefaultinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEmpStartday, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("EMPLOYEE INFOMATION");

        jLabel4.setText("Username:");

        txtEmpUsername.setEditable(false);
        txtEmpUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpUsernameActionPerformed(evt);
            }
        });
        txtEmpUsername.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtEmpUsernamePropertyChange(evt);
            }
        });

        jLabel8.setText("Password");

        txtEmpPass.setEditable(false);
        txtEmpPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpPassActionPerformed(evt);
            }
        });

        jLabel9.setText("Birth :");

        txtEmpBirth.setEditable(false);
        txtEmpBirth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpBirthActionPerformed(evt);
            }
        });

        jLabel11.setText("Phone:");

        txtEmpPhone.setEditable(false);
        txtEmpPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpPhoneActionPerformed(evt);
            }
        });

        jLabel12.setText("Email:");

        txtEmpEmail.setEditable(false);
        txtEmpEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpEmailActionPerformed(evt);
            }
        });

        jLabel13.setText("Address:");

        txtEmpAddress.setEditable(false);
        txtEmpAddress.setColumns(20);
        txtEmpAddress.setRows(5);
        jScrollPane6.setViewportView(txtEmpAddress);

        btnEmpChangeInfo.setBackground(new java.awt.Color(153, 153, 0));
        btnEmpChangeInfo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnEmpChangeInfo.setForeground(new java.awt.Color(0, 0, 0));
        btnEmpChangeInfo.setText("Change Information");
        btnEmpChangeInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpChangeInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnDisplayEmployeeLayout = new javax.swing.GroupLayout(pnDisplayEmployee);
        pnDisplayEmployee.setLayout(pnDisplayEmployeeLayout);
        pnDisplayEmployeeLayout.setHorizontalGroup(
            pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDisplayEmployeeLayout.createSequentialGroup()
                .addComponent(pnEmpdefaultinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btnEmpChangeInfo)
                .addGap(0, 234, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDisplayEmployeeLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGap(71, 71, 71)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtEmpUsername)
                        .addComponent(txtEmpPass)
                        .addComponent(txtEmpPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addComponent(txtEmpBirth)
                        .addComponent(txtEmpEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                .addContainerGap(415, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDisplayEmployeeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(304, 304, 304))
        );
        pnDisplayEmployeeLayout.setVerticalGroup(
            pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDisplayEmployeeLayout.createSequentialGroup()
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDisplayEmployeeLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnEmpdefaultinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDisplayEmployeeLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnEmpChangeInfo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEmpUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmpPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtEmpBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtEmpPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtEmpEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnDisplayEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pnDisplay.add(pnDisplayEmployee, "card3");

        pnDisplaySetting.setBackground(new java.awt.Color(51, 51, 51));

        jLabel15.setForeground(new java.awt.Color(204, 255, 255));
        jLabel15.setText("Table Number:");

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(204, 204, 0));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("SETTING");

        jLabel17.setForeground(new java.awt.Color(204, 255, 255));
        jLabel17.setText("Maximum Menu Item:");

        jLabel18.setForeground(new java.awt.Color(204, 255, 255));
        jLabel18.setText("Today Discount (%):");

        jScrollPane7.setViewportView(listFood);
        this.listFood.setDragEnabled(true);

        jLabel19.setForeground(new java.awt.Color(204, 255, 255));
        jLabel19.setText("Choose Food you want to discount today:");

        jScrollPane8.setViewportView(listFoodDiscount);
        this.listFoodDiscount.setDropMode(javax.swing.DropMode.INSERT);

        btnAddtodiscount.setForeground(new java.awt.Color(0, 153, 204));
        btnAddtodiscount.setText("ADD");
        btnAddtodiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddtodiscountActionPerformed(evt);
            }
        });

        btnAddAlltodiscount.setForeground(new java.awt.Color(0, 153, 204));
        btnAddAlltodiscount.setText("ADD ALL");
        btnAddAlltodiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAlltodiscountActionPerformed(evt);
            }
        });

        btnRemovefromdiscount.setForeground(new java.awt.Color(0, 153, 204));
        btnRemovefromdiscount.setText("REMOVE");
        btnRemovefromdiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovefromdiscountActionPerformed(evt);
            }
        });

        btnRemoveAllfromdiscount.setForeground(new java.awt.Color(0, 153, 204));
        btnRemoveAllfromdiscount.setText("REMOVE ALL");
        btnRemoveAllfromdiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllfromdiscountActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        btnSavesetting.setBackground(new java.awt.Color(0, 153, 0));
        btnSavesetting.setText("SAVE");
        btnSavesetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavesettingActionPerformed(evt);
            }
        });
        jPanel5.add(btnSavesetting);

        btnResetsetting.setBackground(new java.awt.Color(153, 153, 0));
        btnResetsetting.setText("RESET");
        btnResetsetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetsettingActionPerformed(evt);
            }
        });
        jPanel5.add(btnResetsetting);

        lbSettingstate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbSettingstate.setForeground(new java.awt.Color(255, 0, 0));
        lbSettingstate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnDisplaySettingLayout = new javax.swing.GroupLayout(pnDisplaySetting);
        pnDisplaySetting.setLayout(pnDisplaySettingLayout);
        pnDisplaySettingLayout.setHorizontalGroup(
            pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(33, 33, 33)
                        .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMenutablenumber, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(txtMenuitemnumber)
                            .addComponent(txtTodaydiscount)))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddAlltodiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemovefromdiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveAllfromdiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddtodiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(lbSettingstate, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(255, Short.MAX_VALUE))
        );
        pnDisplaySettingLayout.setVerticalGroup(
            pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtMenutablenumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtMenuitemnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtTodaydiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel19)
                .addGroup(pnDisplaySettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnAddtodiscount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddAlltodiscount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemovefromdiscount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveAllfromdiscount))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDisplaySettingLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(lbSettingstate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnDisplay.add(pnDisplaySetting, "card4");

        pnShow.add(pnDisplay);

        getContentPane().add(pnShow);

        pnUsing.setBackground(new java.awt.Color(0, 204, 153));
        pnUsing.setPreferredSize(new java.awt.Dimension(350, 400));
        pnUsing.setLayout(new javax.swing.BoxLayout(pnUsing, javax.swing.BoxLayout.PAGE_AXIS));

        pnOrderTable.setBackground(new java.awt.Color(204, 204, 204));
        pnOrderTable.setPreferredSize(new java.awt.Dimension(300, 250));

        pnShowTable.setBackground(new java.awt.Color(33, 30, 30));
        pnShowTable.setPreferredSize(new java.awt.Dimension(this.Tablepn_width, this.Tablepn_height));
        pnShowTable.setLayout(new java.awt.GridLayout(0, 3, 10, 10));
        jScrollPane2.setViewportView(pnShowTable);

        javax.swing.GroupLayout pnOrderTableLayout = new javax.swing.GroupLayout(pnOrderTable);
        pnOrderTable.setLayout(pnOrderTableLayout);
        pnOrderTableLayout.setHorizontalGroup(
            pnOrderTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        pnOrderTableLayout.setVerticalGroup(
            pnOrderTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(16);

        pnUsing.add(pnOrderTable);

        pnBill.setBackground(new java.awt.Color(45, 66, 99));
        pnBill.setPreferredSize(new java.awt.Dimension(100, 300));
        pnBill.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout pnBillBlankLayout = new javax.swing.GroupLayout(pnBillBlank);
        pnBillBlank.setLayout(pnBillBlankLayout);
        pnBillBlankLayout.setHorizontalGroup(
            pnBillBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        pnBillBlankLayout.setVerticalGroup(
            pnBillBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 623, Short.MAX_VALUE)
        );

        pnBill.add(pnBillBlank, "card4");

        pnOrderBill.setLayout(new javax.swing.BoxLayout(pnOrderBill, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setBackground(new java.awt.Color(3, 22, 38));
        jPanel2.setPreferredSize(new java.awt.Dimension(201, 90));

        String[] cus_name = new String[this.cus_list.size()];
        for(int i = 0; i < this.cus_list.size(); i++){
            cus_name[i] = this.cus_list.get(i).getName();
        }
        cboChooseCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(cus_name));
        cboChooseCustomer.setToolTipText("customer for discount");
        this.cboChooseCustomer.setSelectedIndex(16);
        cboChooseCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChooseCustomerActionPerformed(evt);
            }
        });

        lbCustomer.setForeground(new java.awt.Color(204, 204, 204));
        lbCustomer.setText("Customer:");

        lbShowOrderTable.setBackground(new java.awt.Color(0, 0, 0));
        lbShowOrderTable.setForeground(new java.awt.Color(0, 204, 0));
        lbShowOrderTable.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbShowOrderTable.setOpaque(true);
        this.lbShowOrderTable.setText("Current Table: "+ this.cur_table + " ----- Day: " + this.today);

        jLabel20.setForeground(new java.awt.Color(204, 204, 204));
        jLabel20.setText("#Cus:");

        txtCustomernumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomernumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbCustomer)
                .addGap(18, 18, 18)
                .addComponent(cboChooseCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCustomernumber, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lbShowOrderTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lbShowOrderTable, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboChooseCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCustomer)
                    .addComponent(jLabel20)
                    .addComponent(txtCustomernumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pnOrderBill.add(jPanel2);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(453, 303));

        tbOrderFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Quantity", "Discount", "Price", "Close"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tbOrderFood);
        if (tbOrderFood.getColumnModel().getColumnCount() > 0) {
            tbOrderFood.getColumnModel().getColumn(0).setMinWidth(100);
            tbOrderFood.getColumnModel().getColumn(0).setPreferredWidth(100);
        }
        this.tbOrderFood.setRowHeight(20);

        pnOrderBill.add(jScrollPane4);

        pnOrderNote.setPreferredSize(new java.awt.Dimension(428, 100));
        pnOrderNote.setLayout(new javax.swing.BoxLayout(pnOrderNote, javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setPreferredSize(new java.awt.Dimension(80, 110));
        jPanel3.setLayout(new java.awt.BorderLayout());

        btnAddnote.setToolTipText("Add note for selected food");
        btnAddnote.setPreferredSize(new java.awt.Dimension(80, 150));
        btnAddnote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddnoteActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddnote, java.awt.BorderLayout.CENTER);
        ImageIcon Addnoteicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/addnote_icon.png")).getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            Addnoteicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.btnAddnote.setIcon(Addnoteicon);

        pnOrderNote.add(jPanel3);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(250, 96));

        txtOrderNote.setEditable(false);
        txtOrderNote.setColumns(20);
        txtOrderNote.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        txtOrderNote.setRows(5);
        jScrollPane5.setViewportView(txtOrderNote);

        pnOrderNote.add(jScrollPane5);

        pnOrderBill.add(pnOrderNote);

        pnOrderControl.setPreferredSize(new java.awt.Dimension(201, 70));
        pnOrderControl.setLayout(new java.awt.GridLayout(1, 0));

        btnPay.setBackground(new java.awt.Color(0, 153, 0));
        btnPay.setText("PAY");
        btnPay.setToolTipText("pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        pnOrderControl.add(btnPay);

        btnKitchenPrint.setBackground(new java.awt.Color(204, 204, 0));
        btnKitchenPrint.setText("KITCHEN PRINT");
        btnKitchenPrint.setToolTipText("kitchen print");
        btnKitchenPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKitchenPrintActionPerformed(evt);
            }
        });
        pnOrderControl.add(btnKitchenPrint);

        btnPrint.setBackground(new java.awt.Color(204, 204, 0));
        btnPrint.setText("PRINT");
        btnPrint.setToolTipText("bar print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        pnOrderControl.add(btnPrint);

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setText("DELETE");
        btnDelete.setToolTipText("delete order");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnOrderControl.add(btnDelete);

        pnOrderBill.add(pnOrderControl);

        pnBill.add(pnOrderBill, "card2");

        pnReceiptBill.setLayout(new javax.swing.BoxLayout(pnReceiptBill, javax.swing.BoxLayout.PAGE_AXIS));

        pnReceitpInput.setBackground(new java.awt.Color(3, 22, 38));
        pnReceitpInput.setPreferredSize(new java.awt.Dimension(428, 130));

        rlbShowReceiptBill.setBackground(new java.awt.Color(0, 0, 0));
        rlbShowReceiptBill.setForeground(new java.awt.Color(0, 204, 0));
        rlbShowReceiptBill.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        rlbShowReceiptBill.setOpaque(true);

        String[] currentemployee_name = new String[this.working_emp.size()];
        for(int i = 0; i < this.working_emp.size(); i++){
            currentemployee_name[i] = this.working_emp.get(i).getName();
        }
        cbEmployeeInput.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name));
        cbEmployeeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmployeeInputActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Employee input:");

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Total Amount (kVND):");

        lbTotalAmount.setBackground(new java.awt.Color(153, 153, 153));
        lbTotalAmount.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lbTotalAmount.setForeground(new java.awt.Color(204, 0, 0));
        lbTotalAmount.setOpaque(true);

        javax.swing.GroupLayout pnReceitpInputLayout = new javax.swing.GroupLayout(pnReceitpInput);
        pnReceitpInput.setLayout(pnReceitpInputLayout);
        pnReceitpInputLayout.setHorizontalGroup(
            pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rlbShowReceiptBill, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
            .addGroup(pnReceitpInputLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(59, 59, 59)
                .addGroup(pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbEmployeeInput, 0, 165, Short.MAX_VALUE)
                    .addComponent(lbTotalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnReceitpInputLayout.setVerticalGroup(
            pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnReceitpInputLayout.createSequentialGroup()
                .addComponent(rlbShowReceiptBill, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbEmployeeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnReceitpInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnReceitpInputLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2))
                    .addGroup(pnReceitpInputLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        this.rlbShowReceiptBill.setText("Invoice Note" + " --------- Day:" + this.today);

        pnReceiptBill.add(pnReceitpInput);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(453, 300));

        tbInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "quantity", "Unit", "Price per unit", "Edit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbInvoice);
        this.tbInvoice.setRowHeight(25);

        pnReceiptBill.add(jScrollPane3);

        pnReceiptControl.setBackground(new java.awt.Color(102, 102, 102));
        pnReceiptControl.setPreferredSize(new java.awt.Dimension(428, 70));
        pnReceiptControl.setLayout(new java.awt.GridLayout(1, 0));

        btnOtherReceipt.setBackground(new java.awt.Color(0, 51, 204));
        btnOtherReceipt.setText("<html>ORTHER</br> RECEIPT</html>");
        btnOtherReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherReceiptActionPerformed(evt);
            }
        });
        pnReceiptControl.add(btnOtherReceipt);

        btnReceiptSave.setBackground(new java.awt.Color(0, 153, 0));
        btnReceiptSave.setText("SAVE");
        btnReceiptSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceiptSaveActionPerformed(evt);
            }
        });
        pnReceiptControl.add(btnReceiptSave);

        btnDeleteReceiptItem.setBackground(new java.awt.Color(255, 153, 0));
        btnDeleteReceiptItem.setText("DELETE");
        btnDeleteReceiptItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReceiptItemActionPerformed(evt);
            }
        });
        pnReceiptControl.add(btnDeleteReceiptItem);

        btnReceiptReset.setBackground(new java.awt.Color(204, 0, 0));
        btnReceiptReset.setText("RESET");
        btnReceiptReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceiptResetActionPerformed(evt);
            }
        });
        pnReceiptControl.add(btnReceiptReset);

        pnReceiptBill.add(pnReceiptControl);

        pnBill.add(pnReceiptBill, "card3");

        pnUsing.add(pnBill);

        getContentPane().add(pnUsing);

        mnEdit.setText("Edit");

        mniEndofdayreport.setText("End of day report");
        mniEndofdayreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniEndofdayreportActionPerformed(evt);
            }
        });
        mnEdit.add(mniEndofdayreport);
        ImageIcon eodicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/eod_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            eodicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.mniEndofdayreport.setIcon(eodicon);

        mniSwapTable.setText("Swap table");
        mniSwapTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSwapTableActionPerformed(evt);
            }
        });
        mnEdit.add(mniSwapTable);
        ImageIcon swaptableicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/swaptable_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            swaptableicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.mniSwapTable.setIcon(swaptableicon);

        mniGeneratePDFBill.setText("Generate PDF Bill");
        mnEdit.add(mniGeneratePDFBill);

        mnbMain.add(mnEdit);

        mnSystem.setText("System");

        miAddemp.setText("Add Employee");
        miAddemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddempActionPerformed(evt);
            }
        });
        mnSystem.add(miAddemp);
        ImageIcon addempicon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/addemployee_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            addempicon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.miAddemp.setIcon(addempicon);

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        mnSystem.add(miLogout);
        ImageIcon logouticon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/logout_icon.png")).getScaledInstance(20, 20, Image.SCALE_SMOOTH);
            logouticon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.miLogout.setIcon(logouticon);

        mnbMain.add(mnSystem);

        setJMenuBar(mnbMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miAddempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddempActionPerformed
        // TODO add your handling code here:
        //new FrEmpLogin(this).setVisible(true);
        new DiaEmpLogin(this, true).setVisible(true);
        this.titleSetting();        // cập nhật nhân viên trên thanh tiêu đề
        
        String[] currentemployee_name = new String[this.working_emp.size()];            // cập nhật nhân viên trong combobox add receiptnote
        for(int i = 0; i < this.working_emp.size(); i++){
            currentemployee_name[i] = this.working_emp.get(i).getName();
        }
        this.cbEmployeeInput.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name));
        this.cboEmpName.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name));
    }//GEN-LAST:event_miAddempActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        // TODO add your handling code here:
        new DiaEmpLogout(this, true).setVisible(true);
        if(this.working_emp.isEmpty()){
            new FrLogin().setVisible(true);
            setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
            this.dispose();
            return;
        }
        this.titleSetting();        // cập nhật nhân viên trên thanh tiêu dề
        
        String[] currentemployee_name = new String[this.working_emp.size()];            // cập nhật nhân viên trong combobox add receiptnote
        for(int i = 0; i < this.working_emp.size(); i++){
            currentemployee_name[i] = this.working_emp.get(i).getName();
        }
        this.cbEmployeeInput.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name));
        this.cboEmpName.setModel(new javax.swing.DefaultComboBoxModel<>(currentemployee_name));
    }//GEN-LAST:event_miLogoutActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        if(this.btnMenu.isSelected()){
            this.btnMenu.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            this.btnSetting.setSelected(false);
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card2");

            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());          // buông bàn hiện tại
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }else{
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");
        }
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployeeActionPerformed
        // TODO add your handling code here:
        if(this.btnEmployee.isSelected()){
            this.btnEmployee.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnMenu.setSelected(false);
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            this.btnSetting.setSelected(false);
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card3");
            this.initEmployeeEditForm();
            
            this.isDrinkshow = false;
            this.isEatshow = false;
            this.isOthershow = false;
            this.isStockshow = false;
            
            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());          // buông bàn hiện tại
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }else{
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");

            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());          // buông bàn hiện tại
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }
    }//GEN-LAST:event_btnEmployeeActionPerformed

    private void btnSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingActionPerformed
        // TODO add your handling code here:
        if(this.btnSetting.isSelected()){
            this.btnSetting.setBackground(new java.awt.Color(84, 96, 153));
            
            this.btnEmployee.setSelected(false);
            this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
            this.btnMenu.setSelected(false);
            this.btnMenu.setBackground(new java.awt.Color(255,255,255));
            
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card4");

            this.isDrinkshow = false;
            this.isEatshow = false;
            this.isOthershow = false;
            this.isStockshow = false;
            
            
            CardLayout c2 = (CardLayout)(this.pnBill.getLayout());       // buông bàn hiện tại
            c2.show(this.pnBill, "card4");
            this.refreshTable();
            this.cur_table = 0;
        }else{
            this.btnSetting.setBackground(new java.awt.Color(255,255,255));
            CardLayout cl = (CardLayout)(this.pnDisplay.getLayout());
            cl.show(this.pnDisplay, "card5");
        }
    }//GEN-LAST:event_btnSettingActionPerformed

    private void btnDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinkActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card3");
        this.isDrinkshow = true;
        this.isEatshow = false;
        this.isOthershow = false;
        this.isStockshow = false;
        
        this.pnDrink.removeAll();
        this.showDrinkmenu("[\\w ]*");
    }//GEN-LAST:event_btnDrinkActionPerformed

    private void btnEatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEatActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card2");
        this.isDrinkshow = false;
        this.isEatshow = true;
        this.isOthershow = false;
        this.isStockshow = false;
        
        this.pnEat.removeAll();
        this.showEatmenu("[\\w ]*");
    }//GEN-LAST:event_btnEatActionPerformed

    private void btnOtherthingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherthingActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card4");
        this.isDrinkshow = false;
        this.isEatshow = false;
        this.isOthershow = true;
        this.isStockshow = false;
        
        this.pnOther.removeAll();
        this.showOthermenu("[\\w ]*");
    }//GEN-LAST:event_btnOtherthingActionPerformed

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) this.pnMenuDisplayDetails.getLayout();
        cl.show(this.pnMenuDisplayDetails, "card5");
        this.isDrinkshow = false;
        this.isEatshow = false;
        this.isOthershow = false;
        this.isStockshow = true;
        
        this.pnStock.removeAll();
        this.showStockmenu("[\\w ]*");
    }//GEN-LAST:event_btnStockActionPerformed

    String namesearching;
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String regex = "[\\w ]*"; 
        this.namesearching = "";
        new DiaSearch(this, true).setVisible(true);
        if(this.namesearching != null){
            regex += this.namesearching;
            regex += "[\\w ]*";
        }
        
        if(isDrinkshow){
            pnDrink.removeAll();
            showDrinkmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card3");
        }
        if(isEatshow){
            pnEat.removeAll();
            showEatmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card2");
        }
        if(isOthershow){
            pnOther.removeAll();
            showOthermenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card4");
        }
        if(isStockshow){
            pnStock.removeAll();
            showStockmenu(regex);
            CardLayout cl = (CardLayout) pnMenuDisplayDetails.getLayout();
            cl.show(pnMenuDisplayDetails, "card7");
            cl.show(pnMenuDisplayDetails, "card5");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cboChooseCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChooseCustomerActionPerformed
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0){
            this.cur_order = this.getOrderofTable(this.cur_table);
            this.cur_order.getKey().setCus_id(this.cus_list.get(this.cboChooseCustomer.getSelectedIndex()).getCus_id());
            
            this.ShowCurrentOrderBill();
            this.saveCurrentInfo(false);
        }
    }//GEN-LAST:event_cboChooseCustomerActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0){

            //printing code
            this.cur_order = this.getOrderofTable(this.cur_table);
            int discount = 0;
            for(Customer iter : this.cus_list){
                if(iter.getCus_id().equals(this.cur_order.getKey().getCus_id())){
                    discount =iter.getDiscount();
                }
            }
            
            String[] dummy = new String[1];
            PrintTextForm ptext = new PrintTextForm(this.cur_table, Integer.parseInt(this.txtCustomernumber.getText()), this.working_emp.size(), this.cur_order.getKey().getOrder_id(), discount);
            ptext.prepareTextForPrint();
            Integer[] boldline = ptext.getBoldline();
            String[] pretext = ptext.getPretext().toArray(dummy);
            String[] posttext = ptext.getPosttext().toArray(dummy);
            ArrayList<TableItem> table = this.toTemporaryTable(cur_order);
            
            PrintWithoutDialog printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, table, posttext, PrintWithoutDialog.TEMPORARY_PRINT);
            
            if(this.mniGeneratePDFBill.isSelected()){
                GenerateOrderReport.generateTemporaryBill(ptext, this.cur_order, this.getTableCustomerNumber(this.cur_table), this.working_emp.size());
            }
            
            this.setTableState(this.cur_table, 2);
            this.refreshTable();
            this.saveCurrentInfo(false);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnAddnoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddnoteActionPerformed
        // TODO add your handling code here:
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0 && this.tbOrderFood.getSelectedRow()%2 != 0){
            // chỉ mở cửa sổ note khi bàn hiện tại khác 0, tình trạng bàn đang orderring, và dòng được chọn trên bảng là dòng lẻ
            
            new DiaNote(this, true).setVisible(true);
            this.ShowCurrentOrderBill();
            this.saveCurrentInfo(isDrinkshow);
        }
    }//GEN-LAST:event_btnAddnoteActionPerformed

    private void btnKitchenPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKitchenPrintActionPerformed
        // TODO add your handling code here:
        if(this.cur_table != 0 && this.getTableState(this.cur_table) == 2){
            
            // printing code
            String[] dummy = new String[1];
            KitchenPrintTextForm ptext = new KitchenPrintTextForm(this.cur_order.getKey().getOrder_id(), this.cur_table, Integer.parseInt(this.txtCustomernumber.getText()), KitchenPrintTextForm.KITCHEN_MODE);
            ptext.prepareTextForPrint();
            Integer[] boldline = ptext.getBoldLine();
            String[] pretext = ptext.getPretext().toArray(dummy);
            String[] posttext = ptext.getPosttext().toArray(dummy);
            ArrayList<TableItem> kittable = this.toKitchenTable(cur_order);
            
            PrintWithoutDialog printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, kittable, posttext, PrintWithoutDialog.KITCHEN_PRINT);
            
            
            ptext = new KitchenPrintTextForm(this.cur_order.getKey().getOrder_id(), this.cur_table, Integer.parseInt(this.txtCustomernumber.getText()), KitchenPrintTextForm.BAR_MODE);
            ptext.prepareTextForPrint();
            boldline = ptext.getBoldLine();
            pretext = ptext.getPretext().toArray(dummy);
            posttext = ptext.getPosttext().toArray(dummy);
            ArrayList<TableItem> bartable = this.toBarTable(cur_order);
            
            printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, bartable, posttext, PrintWithoutDialog.KITCHEN_PRINT);
            
            if(this.mniGeneratePDFBill.isSelected()){
                GenerateOrderReport.generateKitchenBill(ptext, this.cur_order, this.cur_ordernote, this.getTableCustomerNumber(this.cur_table));
            }
        }
    }//GEN-LAST:event_btnKitchenPrintActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if(this.cur_table != 0 && this.getTableState(this.cur_table) != 0){
            // làm mới trạng thái bàn hiện tại
            this.setTableState(this.cur_table, 0);
            
            // làm mới số khách bàn hiện tại
            this.setTableCustomerNumber(this.cur_table, 0);

            // làm mới order và orderdetails bàn hiện tại
            this.cur_order = this.getOrderofTable(this.cur_table);
            this.cur_order.getKey().setOrder_id("");
            this.cur_order.getKey().setCus_id(this.cus_list.get(16).getCus_id());
            this.cur_order.getKey().setPrice(0);
            this.cur_order.getKey().setCustomerpay(0);
            this.cur_order.getKey().setPayback(0);
            this.cur_order.setValue(new ArrayList<OrderDetails>());
            
            // làm mới note bàn hiện tại
            this.cur_ordernote = this.getNoteofTable(this.cur_table);
            this.cur_ordernote.setValue(new ArrayList<String>());

           
            ImageIcon icon = null;
            try{
                Image scaled = ImageIO.read(new File("src/image/table_icon.png")).getScaledInstance(90, 50, Image.SCALE_SMOOTH);
                icon = new ImageIcon(scaled);
            }catch(IOException io_ex){
                io_ex.printStackTrace();
            }
            this.tablebtn_list.get(this.cur_table-1).setIcon(icon);
           

            this.cur_table = 0;
            this.refreshTable();
            this.ShowCurrentOrderBill();
            this.saveCurrentInfo(false);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        //
        if(this.cur_table != 0 && this.getTableState(this.cur_table) == 2){
            // thu tiền và thối tiền
            this.ispay = false;
            new DiaPay(this, true).setVisible(true);
            if(this.ispay){

                // printing code
                this.cur_order = this.getOrderofTable(this.cur_table);
                int discount = 0;
                for(Customer iter : this.cus_list){
                    if(iter.getCus_id().equals(this.cur_order.getKey().getCus_id())){
                        discount =iter.getDiscount();
                    }
                }

                String[] dummy = new String[1];
                ReceiptPrintTextForm ptext = new ReceiptPrintTextForm(this.cur_table, Integer.parseInt(this.txtCustomernumber.getText()), this.working_emp.size(), this.cur_order.getKey().getOrder_id(), discount);
                ptext.prepareTextForPrint();
                Integer[] boldline = ptext.getBoldline();
                String[] pretext = ptext.getPretext().toArray(dummy);
                String[] posttext = ptext.getPosttext().toArray(dummy);
                ArrayList<TableItem> table = this.toPayTable(cur_order);

                PrintWithoutDialog printer = new PrintWithoutDialog("BIXOLON SRP-350II", boldline, pretext, table, posttext, PrintWithoutDialog.PAY_PRINT);
                
                if(this.mniGeneratePDFBill.isSelected()){
                    GenerateOrderReport.generateReceiptBill(ptext, this.cur_order, this.getTableCustomerNumber(this.cur_table), this.working_emp.size());
                }
                
                // thêm dữ liệu vào database
                OrderDAO.insert(this.getOrderofTable(this.cur_table));


                // làm mới trạng thái bàn hiện tại
                this.setTableState(this.cur_table, 0);
                
                // làm mới số khách bàn hiện tại
                this.setTableCustomerNumber(this.cur_table, 0);

                // làm mới order và orderdetails bàn hiện tại
                this.cur_order = this.getOrderofTable(this.cur_table);
                this.cur_order.getKey().setOrder_id("");
                this.cur_order.getKey().setCus_id(this.cus_list.get(16).getCus_id());
                this.cur_order.getKey().setOrdertime(java.sql.Date.valueOf(this.today));
                this.cur_order.getKey().setPrice(0);
                this.cur_order.getKey().setCustomerpay(0);
                this.cur_order.getKey().setPayback(0);
                this.cur_order.setValue(new ArrayList<OrderDetails>());

                // làm mới note bàn hiện tại
                this.cur_ordernote = this.getNoteofTable(this.cur_table);
                this.cur_ordernote.setValue(new ArrayList<String>());

                ImageIcon icon = null;
                try{
                    Image scaled = ImageIO.read(new File("src/image/table_icon.png")).getScaledInstance(90, 50, Image.SCALE_SMOOTH);
                    icon = new ImageIcon(scaled);
                }catch(IOException io_ex){
                    io_ex.printStackTrace();
                }
                this.tablebtn_list.get(this.cur_table-1).setIcon(icon);
               

                this.cur_table = 0;
                this.refreshTable();
                this.ShowCurrentOrderBill();
                this.saveCurrentInfo(false);
            }
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnAddReceiptNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddReceiptNoteActionPerformed
        // leaving the Order form
        this.cur_table = 0;
        this.isOrdershow = false;
        this.isReceiptshow = true;
        this.refreshTable();
        this.pnStock.removeAll();
        this.showStockmenu("[\\w ]*");
        this.ShowCurrentInvoice();
        
        CardLayout billlayout = (CardLayout) pnBill.getLayout();
        billlayout.show(pnBill, "card3");
        CardLayout displaylayout = (CardLayout) this.pnDisplay.getLayout();
        displaylayout.show(this.pnDisplay, "card2");
        CardLayout menudisplaylayout = (CardLayout) pnMenuDisplayDetails.getLayout();
        menudisplaylayout.show(pnMenuDisplayDetails, "card5");
        this.isDrinkshow = false;
        this.isEatshow = false;
        this.isOthershow = false;
        this.isStockshow = true;
        
    }//GEN-LAST:event_btnAddReceiptNoteActionPerformed

    private void btnReceiptResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceiptResetActionPerformed
        // TODO add your handling code here:
        this.initInvoice();
        this.ShowCurrentInvoice();
        this.saveCurrentInfo(false);
    }//GEN-LAST:event_btnReceiptResetActionPerformed

    private void btnReceiptSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceiptSaveActionPerformed
        // TODO add your handling code here
        
        if(this.tbInvoicemodel.getRowCount() != 0){         // nếu hoá đơn đã có nguyên liệu nhập
            // kiểm tra xác nhập người nhập hoá đơn
            this.checkpassword = "";
            new DiaComfirmPassword(this, ispay).setVisible(true);
            for(Employee iter : this.working_emp){
                if(iter.getEm_id().equals(this.cur_invoice.getFirst().getEm_id())){
                    if(iter.getPass().equals(this.checkpassword)){
                        // tiến hành nhập thông tin đơn hàng vào database
                        ReceiptNoteDAO.insert(this.cur_invoice);

                        // reset đơn hàng mới
                        this.initInvoice();
                        this.ShowCurrentInvoice();
                        this.saveCurrentInfo(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnReceiptSaveActionPerformed

    private void cbEmployeeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmployeeInputActionPerformed
        // TODO add your handling code here:
        this.cur_invoice.getFirst().setEm_id(this.working_emp.get(this.cbEmployeeInput.getSelectedIndex()).getEm_id());
    }//GEN-LAST:event_cbEmployeeInputActionPerformed

    private void btnDeleteReceiptItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReceiptItemActionPerformed
        // TODO add your handling code here:
        int[] slrows = this.tbInvoice.getSelectedRows();
        int numitemdeleted = 0;
        for(int i = 0; i < slrows.length; i++){
            this.cur_invoice.getSecond().remove(slrows[i]-numitemdeleted);
            ++numitemdeleted;
        }
        this.ShowCurrentInvoice();
        this.saveCurrentInfo(false);
    }//GEN-LAST:event_btnDeleteReceiptItemActionPerformed

    private void cboEmpNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboEmpNameActionPerformed
        // TODO add your handling code here:
        this.initEmployeeEditForm();
    }//GEN-LAST:event_cboEmpNameActionPerformed

    
    private void txtEmpUsernamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtEmpUsernamePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpUsernamePropertyChange

    
    private void txtEmpUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpUsernameActionPerformed

    private void txtEmpPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpPassActionPerformed

    private void txtEmpBirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpBirthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpBirthActionPerformed

    private void txtEmpPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpPhoneActionPerformed

    private void txtEmpEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpEmailActionPerformed

    private void btnAddtodiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddtodiscountActionPerformed
        // TODO add your handling code here:
        int[] slitem = this.listFood.getSelectedIndices();
        
        for(int i = 0; i < slitem.length; i++)
            this.listdisfoodmodel.addElement(this.listfoodmodel.get(slitem[i]));
        
        int removenumber = 0;
        for(int i = 0; i < slitem.length; i++){
            this.listfoodmodel.remove(slitem[i] - removenumber);
            ++removenumber;
        }
    }//GEN-LAST:event_btnAddtodiscountActionPerformed

    private void btnAddAlltodiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAlltodiscountActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < this.listfoodmodel.getSize(); i++){
            this.listdisfoodmodel.addElement(this.listfoodmodel.get(i));
        }
        
        this.listfoodmodel.removeAllElements();
    }//GEN-LAST:event_btnAddAlltodiscountActionPerformed

    private void btnRemovefromdiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovefromdiscountActionPerformed
        // TODO add your handling code here:
        int[] slitem = this.listFoodDiscount.getSelectedIndices();
        
        for(int i = 0; i < slitem.length; i++)
            this.listfoodmodel.addElement(this.listdisfoodmodel.get(slitem[i]));
        
        int removenumber = 0;
        for(int i = 0; i < slitem.length; i++){
            this.listdisfoodmodel.remove(slitem[i] - removenumber);
            ++removenumber;
        }
    }//GEN-LAST:event_btnRemovefromdiscountActionPerformed

    private void btnRemoveAllfromdiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllfromdiscountActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < this.listdisfoodmodel.getSize(); i++){
            this.listfoodmodel.addElement(this.listdisfoodmodel.get(i));
        }
        
        this.listdisfoodmodel.removeAllElements();
    }//GEN-LAST:event_btnRemoveAllfromdiscountActionPerformed

    private void btnSavesettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavesettingActionPerformed
        // TODO add your handling code here:
        int tbnumber;
        int itemnumber;
        int dis;
        
        try{
            tbnumber = Integer.parseInt(this.txtMenutablenumber.getText());
            if(tbnumber < 40){
                JOptionPane.showMessageDialog(null, "Table number must more than 40!", "INPUT WARNING", JOptionPane.WARNING_MESSAGE);
                this.txtMenutablenumber.requestFocus();
                return;
            }
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            JOptionPane.showMessageDialog(null, "Table number is not correct. Please input it again", "INPUT WARNING", JOptionPane.ERROR_MESSAGE);
            this.txtMenutablenumber.requestFocus();
            return;
        }
        
        try{
            itemnumber = Integer.parseInt(this.txtMenuitemnumber.getText());
            if(itemnumber < 40){
                JOptionPane.showMessageDialog(null, "The maximum menu item must more than 40!", "INPUT WARNING", JOptionPane.WARNING_MESSAGE);
                this.txtMenuitemnumber.requestFocus();
                return;
            }
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            JOptionPane.showMessageDialog(null, "Item number is not correct. Please input it again", "INPUT WARNING", JOptionPane.ERROR_MESSAGE);
            this.txtMenuitemnumber.requestFocus();
            return;
        }
        
        try{
            dis = Integer.parseInt(this.txtTodaydiscount.getText());
            if(dis < 0 || dis > 100){
                JOptionPane.showMessageDialog(null, "0% < Discount < 100%", "INPUT WARNING", JOptionPane.WARNING_MESSAGE);
                this.txtTodaydiscount.requestFocus();
                return;
            }
        }catch(NumberFormatException ex){
            ex.getStackTrace();
            JOptionPane.showMessageDialog(null, "Discount is not correct. Please input it again", "INPUT WARNING", JOptionPane.ERROR_MESSAGE);
            this.txtTodaydiscount.requestFocus();
            return;
        }
        
        
        this.savesetting();
        this.lbSettingstate.setText("You need to reset the application for active the setting");
    }//GEN-LAST:event_btnSavesettingActionPerformed

    private void btnResetsettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetsettingActionPerformed
        // TODO add your handling code here:
        this.listfoodmodel.removeAllElements();
        this.listdisfoodmodel.removeAllElements();
        this.initSettingForm();
    }//GEN-LAST:event_btnResetsettingActionPerformed

    private void txtCustomernumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomernumberActionPerformed
        // TODO add your handling code here:
        if(this.getTableState(this.cur_table) == 2 || this.getTableState(this.cur_table) == 1){
            try{
                int cusnum = Integer.parseInt(this.txtCustomernumber.getText());
                if(cusnum < 0)
                    return;
                this.cusnumber_list.set(this.cur_table-1, Integer.parseInt(this.txtCustomernumber.getText()));
                this.saveCurrentInfo(false);
            }catch(NumberFormatException ex){
                ex.getStackTrace();
                JOptionPane.showMessageDialog(null, "Customer number is not correct. Please input it again", "INPUT WARNING", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtCustomernumberActionPerformed

    private void btnOtherReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherReceiptActionPerformed
        // TODO add your handling code here:
        new DiaOrtherReceiptNote((this), true).setVisible(true);
    }//GEN-LAST:event_btnOtherReceiptActionPerformed

    private void mniEndofdayreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniEndofdayreportActionPerformed
        // TODO add your handling code here:
        new DiaEndofdayreport((this), true).setVisible(true);
    }//GEN-LAST:event_mniEndofdayreportActionPerformed
    
    String checkpassword;
    private void btnEmpChangeInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpChangeInfoActionPerformed

        Employee cur_emp = this.working_emp.get(this.cboEmpName.getSelectedIndex());
        // kiểm tra trước khi cho phép thay đổi thông tin
        this.checkpassword = "";
        new DiaComfirmPassword(this, true).setVisible(true);
        if(cur_emp.getPass().equals(this.checkpassword)){
            new DiaEmpChangeInfo(this, cur_emp, true).setVisible(true);
            this.initEmployeeEditForm();
        }
    }//GEN-LAST:event_btnEmpChangeInfoActionPerformed

    private void mniSwapTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSwapTableActionPerformed
        new DiaSwapTable(this, true).setVisible(true);
        
        this.refreshTable();
        this.cur_table = 0;
        this.ShowCurrentOrderBill();
        this.saveCurrentInfo(false);
    }//GEN-LAST:event_mniSwapTableActionPerformed
    


    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {*/
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrEmployeeWorkspace(null).setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnAddAlltodiscount;
    private javax.swing.JButton btnAddReceiptNote;
    private javax.swing.JButton btnAddnote;
    private javax.swing.JButton btnAddtodiscount;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnB;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnD;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteReceiptItem;
    private javax.swing.JButton btnDrink;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEat;
    private javax.swing.JButton btnEmpChangeInfo;
    private javax.swing.JToggleButton btnEmployee;
    private javax.swing.JButton btnF;
    private javax.swing.JButton btnG;
    private javax.swing.JButton btnH;
    private javax.swing.JButton btnI;
    private javax.swing.JButton btnJ;
    private javax.swing.JButton btnK;
    private javax.swing.JButton btnKitchenPrint;
    private javax.swing.JButton btnL;
    private javax.swing.JButton btnM;
    private javax.swing.JToggleButton btnMenu;
    private javax.swing.JButton btnN;
    private javax.swing.JButton btnO;
    private javax.swing.JButton btnOtherReceipt;
    private javax.swing.JButton btnOtherthing;
    private javax.swing.JButton btnP;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnQ;
    private javax.swing.JButton btnR;
    private javax.swing.JButton btnReceiptReset;
    private javax.swing.JButton btnReceiptSave;
    private javax.swing.JButton btnRemoveAllfromdiscount;
    private javax.swing.JButton btnRemovefromdiscount;
    private javax.swing.JButton btnResetsetting;
    private javax.swing.JButton btnS;
    private javax.swing.JButton btnSavesetting;
    private javax.swing.JButton btnSearch;
    private javax.swing.JToggleButton btnSetting;
    private javax.swing.JButton btnStock;
    private javax.swing.JButton btnT;
    private javax.swing.JButton btnU;
    private javax.swing.JButton btnV;
    private javax.swing.JButton btnW;
    private javax.swing.JButton btnX;
    private javax.swing.JButton btnY;
    private javax.swing.JButton btnZ;
    private javax.swing.JComboBox<String> cbEmployeeInput;
    private javax.swing.JComboBox<String> cboChooseCustomer;
    private javax.swing.JComboBox<String> cboEmpName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lbAvatar;
    private javax.swing.JLabel lbCustomer;
    private javax.swing.JLabel lbEmpRole;
    private javax.swing.JLabel lbEmpStartday;
    private javax.swing.JLabel lbEmphourwage;
    private javax.swing.JLabel lbManager;
    private javax.swing.JLabel lbSettingstate;
    private supportclass.RollLabel lbShowOrderTable;
    private javax.swing.JLabel lbTotalAmount;
    private javax.swing.JList<String> listFood;
    private javax.swing.JList<String> listFoodDiscount;
    private javax.swing.JMenuItem miAddemp;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnSystem;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniEndofdayreport;
    private javax.swing.JCheckBoxMenuItem mniGeneratePDFBill;
    private javax.swing.JMenuItem mniSwapTable;
    private javax.swing.JPanel pnBill;
    private javax.swing.JPanel pnBillBlank;
    private javax.swing.JPanel pnBlank;
    private javax.swing.JPanel pnDisplay;
    private javax.swing.JPanel pnDisplayEmployee;
    private javax.swing.JPanel pnDisplayMenu;
    private javax.swing.JPanel pnDisplaySetting;
    private javax.swing.JPanel pnDrink;
    private javax.swing.JPanel pnEat;
    private javax.swing.JPanel pnEmpdefaultinfo;
    private javax.swing.JPanel pnMenuDisplayDetails;
    private javax.swing.JPanel pnMenuSkip;
    private javax.swing.JPanel pnMenuSwitch;
    private javax.swing.JPanel pnOrderBill;
    private javax.swing.JPanel pnOrderControl;
    private javax.swing.JPanel pnOrderNote;
    private javax.swing.JPanel pnOrderTable;
    private javax.swing.JPanel pnOther;
    private javax.swing.JPanel pnReceiptBill;
    private javax.swing.JPanel pnReceiptControl;
    private javax.swing.JPanel pnReceitpInput;
    private javax.swing.JPanel pnShow;
    private javax.swing.JPanel pnShowControl;
    private javax.swing.JPanel pnShowTable;
    private javax.swing.JPanel pnStock;
    private javax.swing.JPanel pnUsing;
    private javax.swing.JPanel pnWait;
    private supportclass.RollLabel rlbShowReceiptBill;
    private javax.swing.JTable tbInvoice;
    private javax.swing.JTable tbOrderFood;
    private javax.swing.JTextField txtCustomernumber;
    private javax.swing.JTextArea txtEmpAddress;
    private javax.swing.JTextField txtEmpBirth;
    private javax.swing.JTextField txtEmpEmail;
    private javax.swing.JPasswordField txtEmpPass;
    private javax.swing.JTextField txtEmpPhone;
    private javax.swing.JTextField txtEmpUsername;
    private javax.swing.JTextField txtMenuitemnumber;
    private javax.swing.JTextField txtMenutablenumber;
    private javax.swing.JTextArea txtOrderNote;
    private javax.swing.JTextField txtTodaydiscount;
    // End of variables declaration//GEN-END:variables

    
    
    
//  CUSTOM DECLARATION
    int discountevent = 0;
    
    private ArrayList<Admin>manager_list = (ArrayList<Admin>) AdminDAO.getList();
    ArrayList<Employee> working_emp = new ArrayList<>();
    ArrayList<EmpSchedule> working_schedule = new ArrayList<>();
    ArrayList<Food> menufood_list = new ArrayList<>();
    ArrayList<FoodMaterial> menumaterial_list = new ArrayList<>();
    ArrayList<Customer> cus_list = new ArrayList<>();
    boolean isDrinkshow = false;
    boolean isEatshow = false;
    boolean isOthershow = false;
    boolean isStockshow = false;
    
    // Điều chỉnh xuất các nút table
    int tableitem_number;           // số bàn mặc định của quán
    int tablerow_number;            // số dòng
    int tablecol_number = 3;        // số cột
    int Tablepn_width;              // kích thước khung table được điều chỉnh cho phù hợp với số dòng số cột
    int Tablepn_height;
    
    // Điều chỉnh xuất các nút menu
    int menuitem_number;           // số sản phẩm mặc định cho một menu
    int row_number;                // số dòng
    int col_number = 6;            // số cột
    int Menupn_width;              // kích thước khung menu được điều chỉnh cho phù hợp với số dòng số cột
    int Menupn_height;
    
    
    
    ArrayList<JButton> tablebtn_list = new ArrayList<>();                       // danh sách bàn
    ArrayList<Integer> cusnumber_list = new ArrayList<>();                      // danh sách số lượng khách hàng từng bàn
    ArrayList<Integer> tablestate_list = new ArrayList<>();                     // danh sách trạng thái của bàn          0: chưa order, 1: đã order, 2: đã lưu
    HashMap<Integer, ArrayList<String>> ordernote_list = new HashMap<>();       // danh sách note của order hiện tại              mỗi bàn tương ứng với một danh sách note
    HashMap<Order, ArrayList<OrderDetails>> order_list = new HashMap<>();       // danh sách order hiện tại
    boolean isOrdershow = false;
    boolean isReceiptshow = false;
    DefaultTableModel tbmodel;
    
    LocalDate today = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
    public int cur_table = 0;
    Entry<Order, ArrayList<OrderDetails>> cur_order;
    Entry<Integer, ArrayList<String>> cur_ordernote;
    
    boolean ispay = false;
    
    
    
    Pair<ReceiptNote, ArrayList<ReceiptNoteDetails>> cur_invoice;
    DefaultTableModel tbInvoicemodel;
//  END CUSTOM DECLARATION




    
    
// CUSTOM CODE
    public int getSelectRowxofTable(){
        return this.tbOrderFood.getSelectedRow();
    }
    
    private void setFrameIcon() {
        Image scaled = null;
        try{
            scaled = ImageIO.read(new File("src/image/comma_icon.jpg")).getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        }catch(IOException io_ex){
            io_ex.printStackTrace();
        }
        this.setIconImage(scaled);
    }

    private void titleSetting() {
        String title = "Employee: ";
        for(Employee iter : this.working_emp){
            title += iter.getName();
            title += ", ";
        }
        this.setTitle(title);
    }
    
    public void setScheduleTime(EmpSchedule schedule, boolean isstart){
        if(isstart){
            Calendar calendar = Calendar.getInstance();
            int hours = calendar.get(Calendar.HOUR_OF_DAY);
            int minutes = calendar.get(Calendar.MINUTE);
            
            schedule.setStarthour(hours);
            schedule.setStartminute(minutes);
        }else{
            Calendar calendar = Calendar.getInstance();
            int hours = calendar.get(Calendar.HOUR_OF_DAY);
            int minutes = calendar.get(Calendar.MINUTE);
            
            schedule.setEndhour(hours);
            schedule.setEndminute(minutes);
        }
    }
    
    public void setScheduleDate(EmpSchedule schedule){
        LocalDate todayLocalDate = LocalDate.now( ZoneId.of( "Asia/Ho_Chi_Minh" ) );
        java.sql.Date workDate = java.sql.Date.valueOf( todayLocalDate );
        
        schedule.setWorkday(workDate);
    }
    
    private void initCustomer(){
        this.cus_list = (ArrayList<Customer>) CustomerDAO.getList();
    }
// END CUSTOM CODE





// MENU DISPLAY CODE
    private void initMenu() {
        this.menufood_list = (ArrayList<Food>) FoodDAO.getList();
        this.menumaterial_list = (ArrayList<FoodMaterial>) FoodMaterialDAO.getList();
    }
    
    private ImageIcon getMenuButtonIcon(String foodid){
        ImageIcon icon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/"+ foodid +".jpg")).getScaledInstance(120, 70, Image.SCALE_SMOOTH);
            icon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            //io_ex.printStackTrace();
        }
        
        return icon;
    }
    
    
    private void setMenuPanelSize(){
        if(this.menuitem_number % 6 != 0){
            this.row_number = (this.menuitem_number/6) + 1;
        }else{
            this.row_number = this.menuitem_number/6;
        }
        
        Menupn_width = (this.col_number * 100) + ((this.col_number-1) * 20);
        Menupn_height = (this.row_number * 100) + ((this.row_number-1) * 20);
    }
    
    private void showDrinkmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 0 && m.matches()){
                JButton b = new JButton();
                b.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                b.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                if(itemfood.getName().length() > 13){
                    String[] words = itemfood.getName().split(" ");
                    String text = "<html>";
                    for(String iter : words){
                        text += iter;
                        text += "<br />";
                    }
                    text += "</html>";
                    b.setText(text);
                }else
                    b.setText(itemfood.getName());
                
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = itemfood.getName();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        this.cur_ordernote = this.getNoteofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                            this.cur_ordernote.getValue().add(new String());
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                        this.saveCurrentInfo(false);
                    }
                    
                });
                b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
                b.setSize(40, 40);
                
                
                
                this.pnDrink.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnDrink.add(l);
        }
    }
    
    private void showEatmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 1 && m.matches()){
                JButton b = new JButton();
                b.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                b.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ImageIcon icon = this.getMenuButtonIcon(itemfood.getFood_id());
                if(icon != null)
                    b.setIcon(icon);
                b.setText(itemfood.getName());
                
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = itemfood.getName();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        this.cur_ordernote = this.getNoteofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                            this.cur_ordernote.getValue().add(new String());
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                        this.saveCurrentInfo(false);
                    }
                });
                b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
                b.setSize(40, 40);
                
                this.pnEat.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnEat.add(l);
        }
    }
    
    private void showOthermenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(Food itemfood : this.menufood_list){
            Matcher m = p.matcher(itemfood.getName());
            if(itemfood.getIsdrink() == 2 && m.matches()){
                JButton b = new JButton();
                b.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                b.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                b.setText(itemfood.getName());
                
                b.addActionListener((ActionEvent e) -> {
                    if(this.cur_table != 0){
                        String foodname = itemfood.getName();
                        String foodid = "";
                        for(Food iter : this.menufood_list){                        // lấy id của food vừa bấm
                            if(iter.getName().equals(foodname)){
                                foodid = iter.getFood_id();
                                break;
                            }
                        }
                        
                        this.cur_order = this.getOrderofTable(this.cur_table);
                        this.cur_ordernote = this.getNoteofTable(this.cur_table);
                        // cập food vừa bấm vào current orderdetails
                        boolean isexisted = false;
                        for(OrderDetails iter : this.cur_order.getValue()){
                            if(iter.getFood_id().equals(foodid)){                   // nếu nó đã được order rồi
                                iter.setQuan(iter.getQuan() + 1);
                                isexisted = true;
                                break;
                            }
                        }
                        if(!isexisted){
                            OrderDetails newod = new OrderDetails("", foodid, 1);
                            this.cur_order.getValue().add(newod);
                            this.cur_ordernote.getValue().add(new String());
                        }
                        
                        // cập nhật food vừa bấm vào cửa sổ order
                        this.ShowCurrentOrderBill();
                        if(this.getTableState(this.cur_table) == 0 || this.getTableState(this.cur_table) == 2){
                            this.setTableState(this.cur_table, 1);
                            this.refreshTable();
                        }
                        this.saveCurrentInfo(false);
                    }
                });
                b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
                b.setSize(40, 40);
                
                this.pnOther.add(b);
                ++numberadd;
            }
        }
        
        // TIME BUTTON
        JButton b = new JButton();
        b.addActionListener((ActionEvent e) ->{
            if(this.getTableState(this.cur_table) == 2 || this.getTableState(this.cur_table) == 1){
                int cusnum = Integer.parseInt(this.txtCustomernumber.getText());
                cusnum++;
                this.txtCustomernumber.setText(String.valueOf(cusnum));
                this.cusnumber_list.set(this.cur_table-1, Integer.parseInt(this.txtCustomernumber.getText()));
                this.saveCurrentInfo(false);
            }
        });
        b.setText("CHECK IN");
        b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
        b.setSize(40, 40);
        
        this.pnOther.add(b);
        ++numberadd;
        // END TIME BUTTON
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnOther.add(l);
        }
    }
    
    private void showStockmenu(String regex){
        int numberadd = 0;
        
        Pattern p = Pattern.compile(regex);
        for(FoodMaterial itemmaterial : this.menumaterial_list){
            if(itemmaterial.getFm_id().equals("FM00000000")){
                continue;
            }
            
            
            Matcher m = p.matcher(itemmaterial.getName());
            if(m.matches()){
                JButton b = new JButton();
                b.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                b.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                if(itemmaterial.getName().length() > 13){
                    String[] words = itemmaterial.getName().split(" ");
                    String text = "<html>";
                    for(String iter : words){
                        text += iter;
                        text += "<br />";
                    }
                    text += "</html>";
                    b.setText(text);
                }else
                    b.setText(itemmaterial.getName());
                
                
                b.addActionListener((ActionEvent e) -> {
                    
                    boolean isfmexisted = false;
                    for(ReceiptNoteDetails rndetails : this.cur_invoice.getSecond()){
                        if(itemmaterial.getFm_id().equals(rndetails.getFm_id())){           // nếu nguyên liệu đã có sẵn trong hoá đơn
                            rndetails.setQuan(rndetails.getQuan()+1);
                            isfmexisted = true;
                            break;
                        }
                    }
                    
                    if(!isfmexisted){       // nếu nguyên liệu chưa có trong hoá đơn
                        ReceiptNoteDetails newdetails = new ReceiptNoteDetails("", itemmaterial.getFm_id(), 1, itemmaterial.getStandard_price(), "");
                        this.cur_invoice.getSecond().add(newdetails);
                    }
                    
                    this.ShowCurrentInvoice();
                    this.saveCurrentInfo(false);
                });
                
                /*b.addMouseListener(new java.awt.event.MouseListener(){
                    @Override
                    public void mousePressed(MouseEvent e) {}

                    @Override
                    public void mouseReleased(MouseEvent e) {}

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        JPopupMenu detailsinfo = new JPopupMenu();
                        detailsinfo.add("Name: " + itemmaterial.getName());
                        detailsinfo.add("Info: " + itemmaterial.getInfo());
                        switch(itemmaterial.getUsefor()){
                            case 0:
                                detailsinfo.add("User for: drink");
                                break;
                            case 1:
                                detailsinfo.add("User for: food");
                                break;
                            case 2:
                                detailsinfo.add("User for: daily service");
                                break;
                            case 3:
                                detailsinfo.add("User for: other");
                        }
                        detailsinfo.add("Type: " + itemmaterial.getFmtype());
                        detailsinfo.add("Supplier: " + itemmaterial.getSupplier());
                        
                        detailsinfo.show(b, b.getWidth()/2, b.getHeight()/2);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {}

                    @Override
                    public void mouseClicked(MouseEvent e) {}
                });*/
                b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
                b.setSize(40, 40);
                
                this.pnStock.add(b);
                ++numberadd;
            }
        }
        
        for(int i = 0; i < (this.menuitem_number-numberadd); i++){          // xuất những khoảng trống
            JLabel l = new JLabel();
            l.setSize(40, 40);
            this.pnStock.add(l);
        }
        
    }
    
    
    private void setTablePanelSize(){
        if(this.tableitem_number % 3 != 0){
            this.tablerow_number = (this.tableitem_number/3) + 1;
        }else{
            this.tablerow_number = this.tableitem_number/3;
        }

        this.Tablepn_width = (this.tablecol_number * 100) + ((this.tablecol_number-1) * 10);
        this.Tablepn_height = (this.tablerow_number * 50) + ((this.tablerow_number-1) * 10);
    }
    
    private void initOrderTable() {
        for(int i = 1; i <= this.tableitem_number; i++){
            JButton b = new JButton();
            b.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
            b.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            ImageIcon icon = null;
            try{
                Image scaled = ImageIO.read(new File("src/image/table_icon.png")).getScaledInstance(90, 50, Image.SCALE_SMOOTH);
                icon = new ImageIcon(scaled);
            }catch(IOException io_ex){
                io_ex.printStackTrace();
            }
            b.setIcon(icon);
            
            b.addActionListener((ActionEvent e) -> {
                this.refreshTable();                                                    // làm mới mỗi lần bấm bàn mới
                this.cur_table = Integer.parseInt(b.getText());                         // lấy bàn hiện tại vừa bấm
                int state = this.getTableState(this.cur_table);                         // lấy trạng thái của bàn đó
                if(state == 0){
                    b.setBackground(new Color(56, 216, 28));
                    int rs = JOptionPane.showConfirmDialog(null, "Are you sure to create a new Order?");
                    if(rs == JOptionPane.YES_OPTION){
                        this.isOrdershow =true;
                        this.isReceiptshow = false;
                        
                        CardLayout c1 = (CardLayout) this.pnDisplay.getLayout();
                        CardLayout c2 = (CardLayout) this.pnMenuDisplayDetails.getLayout();
                        CardLayout c3 = (CardLayout) this.pnBill.getLayout();
                        c1.show(this.pnDisplay, "card2");
                        c3.show(this.pnBill, "card2");                                  // hiện màn hình nhập Orderbill
                        if(!this.isDrinkshow && !this.isEatshow && !this.isStockshow && !this.isOthershow){
                            c2.show(this.pnMenuDisplayDetails, "card3");                    // hiện màn hình menu drink
                            this.isDrinkshow = true;
                            this.isEatshow = false;
                            this.isStockshow = false;
                            this.isOthershow = false;
                        }
                    }else{
                        this.cur_table = 0;
                        b.setBackground(new Color(104, 104, 104));
                    }
                }else{
                    if(state == 1 || state == 2){
                        CardLayout c1 = (CardLayout) this.pnDisplay.getLayout();
                        CardLayout c2 = (CardLayout) this.pnMenuDisplayDetails.getLayout();
                        CardLayout c3 = (CardLayout) this.pnBill.getLayout();

                        c1.show(this.pnDisplay, "card2");

                        c2.show(this.pnMenuDisplayDetails, "card3");                    // hiện màn hình menu drink
                        this.isDrinkshow = true;
                        this.isEatshow = false;
                        this.isStockshow = false;
                        this.isOthershow = false;

                        c3.show(this.pnBill, "card2");                                  // hiện màn hình nhập Orderbill
                        this.isOrdershow =true;
                        this.isReceiptshow = false;
                    }
                }
                this.btnEmployee.setSelected(false);
                this.btnSetting.setSelected(false);
                this.btnEmployee.setBackground(new java.awt.Color(255,255,255));
                this.btnSetting.setBackground(new java.awt.Color(255,255,255));
   
                this.ShowCurrentOrderBill();
            });
            b.setText(String.valueOf(i));
            b.setFont(b.getFont().deriveFont(14f).deriveFont(Font.BOLD));
            b.setSize(100, 50);
            b.setBackground(new Color(104, 104, 104));
            b.setForeground(new Color(106, 158, 237));
            this.pnShowTable.add(b);
            
            
            this.tablebtn_list.add(b);
            this.tablestate_list.add(0);
            // mặc định khách hàng của order ban đầu luôn là CUS0000017 normal customer
            this.order_list.put(new Order("", "CUS0000017", Integer.parseInt(b.getText()), java.sql.Date.valueOf(this.today), 0, 0, 0), new ArrayList<>());
            this.ordernote_list.put(Integer.parseInt(b.getText()), new ArrayList<>());
            this.cusnumber_list.add(0);
        }
    }
// END MENU DISPLAY CODE






// ORDER PROCESSION
    public int getTableState(int tablenumber){
        return this.tablestate_list.get(tablenumber-1);
    }
    
    public void setTableState(int tablenumber, int newstate){
        this.tablestate_list.set(tablenumber-1, newstate);
    }
    
    
    
    public Entry<Order, ArrayList<OrderDetails>> getOrderofTable(int tablenumber){
        for(Entry<Order, ArrayList<OrderDetails>> iter : this.order_list.entrySet()){
            if(iter.getKey().getOrdertable() == tablenumber)
                return iter;
        }
        
        return null;
    }
    
    public void setOrderofTable(int tablenumber, Entry<Order, ArrayList<OrderDetails>> newtableorder){
        for(Entry<Order, ArrayList<OrderDetails>> iter : this.order_list.entrySet()){
            if(iter.getKey().getOrdertable() == tablenumber){
                    
                    Order neworder = new Order();
                    neworder.setCus_id(newtableorder.getKey().getCus_id());
                    neworder.setOrder_id(newtableorder.getKey().getOrder_id());
                    neworder.setOrdertable(iter.getKey().getOrdertable());
                    neworder.setOrdertime(newtableorder.getKey().getOrdertime());
                    neworder.setPrice(newtableorder.getKey().getPrice());
                    neworder.setCustomerpay(newtableorder.getKey().getCustomerpay());
                    neworder.setPayback(newtableorder.getKey().getPayback());
                    
                    
                    ArrayList<OrderDetails> newdetails = new ArrayList<>();
                    for(OrderDetails oditem : newtableorder.getValue()){
                        newdetails.add(oditem);
                    }
                    
                    this.order_list.remove(iter.getKey());
                    this.order_list.put(neworder, newdetails);
                    
                    break;
            }
        }
    }
    
    public Entry<Integer, ArrayList<String>> getNoteofTable(int tablenumber){
        for(Entry<Integer, ArrayList<String>> iter : this.ordernote_list.entrySet()){
            if(iter.getKey() == tablenumber)
                return iter;
        }
        return null;
    }
    
    public void setNoteofTable(int tablenumber, Entry<Integer, ArrayList<String>> newtablenote){
        for(Entry<Integer, ArrayList<String>> iter : this.ordernote_list.entrySet()){
            if(iter.getKey() == tablenumber){
                iter.setValue(new ArrayList<>());
                for(String note : newtablenote.getValue()){
                    iter.getValue().add(note);
                }
                break;
            }
        }
    }
    
    public int getTableCustomerNumber(int tablenumber){
        return this.cusnumber_list.get(tablenumber - 1);
    }
    
    public void setTableCustomerNumber(int tablenumber, int newnum){
        this.cusnumber_list.set(tablenumber-1, newnum);
    }
    
    public void refreshTable(){
        for(int i = 0; i < this.tablestate_list.size(); i++){
            switch(this.tablestate_list.get(i)){
                case 0:
                    this.tablebtn_list.get(i).setBackground(new Color(104, 104, 104));
                    break;
                case 1:
                    this.tablebtn_list.get(i).setBackground(new Color(56, 216, 28));
                    break;
                case 2:
                    this.tablebtn_list.get(i).setBackground(new Color(175, 17, 17));
                    ImageIcon icon = null;
                    try{
                        Image scaled = ImageIO.read(new File("src/image/reserved_icon.png")).getScaledInstance(90, 50, Image.SCALE_SMOOTH);
                        icon = new ImageIcon(scaled);
                    }catch(IOException io_ex){
                        io_ex.printStackTrace();
                    }
                    this.tablebtn_list.get(i).setIcon(icon);
            }
        }
    }
    
    public void ShowCurrentOrderBill(){
        if(this.cur_table != 0){
            this.cur_order = this.getOrderofTable(this.cur_table);
            this.cur_ordernote = this.getNoteofTable(this.cur_table);
            
            // xuất số khách ở bàn hiện tại
            this.txtCustomernumber.setText(String.valueOf(this.cusnumber_list.get(this.cur_table-1)));
            
            // xuất trạng thái của order
            switch(this.getTableState(this.cur_table)){
                case 0:
                    
                    this.lbShowOrderTable.setText("Current Table: "+ this.cur_table + ", State: EMPTY" + " ----- Day: " + this.today);
                    
                    break;
                case 1:
                    
                    this.lbShowOrderTable.setText("Current Table: "+ this.cur_table + ", State: ORDERRING" + " ----- Day: " + this.today);
                    
                    break;
                case 2:
                    
                    this.lbShowOrderTable.setText("Current Table: "+ this.cur_table + ", State: PRINTED" + " ----- Day: " + this.today);
                    
            }
            
            
            // xuất khách hàng của order
            for(int i = 0; i < this.cus_list.size(); i++){
                if(this.cus_list.get(i).getCus_id().equals(this.cur_order.getKey().getCus_id())){
                    this.cboChooseCustomer.setSelectedIndex(i);
                }
            }
            
            // xuất danh sách món của order
            this.tbmodel = (DefaultTableModel) this.tbOrderFood.getModel();
            this.tbmodel.setRowCount(0);
            int numberfood_appear = 0;
            for(OrderDetails iter : this.cur_order.getValue()){
                for(Food fiter : this.menufood_list){
                    if(fiter.getFood_id().equals(iter.getFood_id())){
                        
                        // xuất thông tin món trên order bill
                        boolean isdis = false;
                        for(int i = 0; i < this.listdisfoodmodel.getSize(); i++){
                            if(fiter.getName().equals(this.listdisfoodmodel.get(i))){
                                Object[] newrow = {fiter.getName(), iter.getQuan(), this.discountevent, fiter.getPrice(), "X"};
                                this.tbmodel.addRow(newrow);
                                ++numberfood_appear;
                                isdis = true;
                            }
                        }
                        if(!isdis){
                            Object[] newrow = {fiter.getName(), iter.getQuan(), 0, fiter.getPrice(), "X"};
                            this.tbmodel.addRow(newrow);
                            ++numberfood_appear;
                        }
                        
                        // xuất note của order bill
                        Object[] newrownote = {this.cur_ordernote.getValue().get(numberfood_appear-1)};
                        this.tbmodel.addRow(newrownote);
                        
                        
                        this.tbOrderFood.getColumn("Close").setCellRenderer(new CloseButtonRenderer());                  // tạo render cho các cell button trong cột "Button"
                        this.tbOrderFood.getColumn("Close").setCellEditor(new CloseButtonEditor(this, new JCheckBox()));       // tạo editor cho các cell button trong cột "Button"
                    }
                }
            }
            
            // xuất tổng giá của order
            this.updateOrderPrice();
            String noteshow = "Total Price: " + this.cur_order.getKey().getPrice() + " (kVND)\n";
            noteshow += "--------------------------------------\n";
            for(Customer iter : this.cus_list){
                if(iter.getCus_id().equals(this.cur_order.getKey().getCus_id())){
                    noteshow += "Customer discount: " + iter.getDiscount() + "%";
                    break;
                }
            }
            
            this.txtOrderNote.setText(noteshow);
        }else{
            CardLayout c = (CardLayout) this.pnBill.getLayout();
            c.show(this.pnBill, "card4");                                  // hiện màn hình nhập Orderbill
            this.isOrdershow =false;
            this.isReceiptshow = false;
        }
    }
    
    private void updateOrderPrice(){
        float totalprice = 0;
        for(int i = 0; i < this.tbmodel.getRowCount(); i++){
            if(i % 2 == 0){
                int item_quan = (int)this.tbmodel.getValueAt(i, 1);
                int item_discount = (int)this.tbmodel.getValueAt(i, 2);
                float item_price = (float)this.tbmodel.getValueAt(i, 3);
                totalprice += new Float(((100 - item_discount)/100.0) * item_price * item_quan);
            }
        }
        
        float cus_discount = new Float((100 - this.cus_list.get(this.cboChooseCustomer.getSelectedIndex()).getDiscount())/100.0);
        totalprice *= cus_discount;
        this.cur_order.getKey().setPrice(totalprice);
    }
// END ORDER PROCESSION

    
    
    
    
    
    
// INPUT INVOICE PROCESSION
    private void initInvoice(){
        this.cur_invoice = new Pair<>(new ReceiptNote("", this.working_emp.get(0).getEm_id(), java.sql.Date.valueOf(today), 0), new ArrayList<>());
    }
    
    
    public void ShowCurrentInvoice(){
        if(this.isReceiptshow){
            // xuất người nhập của đơn hàng hiện tại
            for(int i = 0; i < this.working_emp.size(); i++){
                if(this.working_emp.get(i).getEm_id().equals(this.cur_invoice.getFirst().getEm_id())){
                    this.cbEmployeeInput.setSelectedIndex(i);
                }
            }
            
            // xuất danh sách các nguyên liệu trong đơn hàng
            this.tbInvoicemodel = (DefaultTableModel) this.tbInvoice.getModel();
            this.tbInvoicemodel.setRowCount(0);
            for(ReceiptNoteDetails rndetails : this.cur_invoice.getSecond()){
                for(FoodMaterial fmitem : this.menumaterial_list){
                    if(fmitem.getFm_id().equals(rndetails.getFm_id())){
                        Object[] newrow = {fmitem.getName(), rndetails.getQuan(), fmitem.getUnit_buy(), rndetails.getItem_price(), "Expand"};
                        this.tbInvoicemodel.addRow(newrow);
                        
                        this.tbInvoice.getColumn("Edit").setCellRenderer(new ExpandButtonRender());                  // tạo render cho các cell button trong cột "Button"
                        this.tbInvoice.getColumn("Edit").setCellEditor(new ExpandButtonEditor(this, new JCheckBox()));       // tạo editor cho các cell button trong cột "Button"
                    }
                }
            }
            
            
            // xuất tổng tiền
            float totalamount = 0;
            for(ReceiptNoteDetails rndetails : this.cur_invoice.getSecond()){
                totalamount += rndetails.getItem_price() * rndetails.getQuan();
            }
            this.cur_invoice.getFirst().setTotal_amount(totalamount);
            this.lbTotalAmount.setText(String.valueOf(this.cur_invoice.getFirst().getTotal_amount()));
        }
    }
// END INPUT INVOICE PROCESSION

    
    
    
    
    
// EMPLOYEE EDIT INFORMATION FORM
    private void initEmployeeEditForm() {
        Employee cur_emp = this.working_emp.get(this.cboEmpName.getSelectedIndex());
        
        // hiển thị avatar
        ImageIcon avataricon = null;
        try{
            Image scaled = ImageIO.read(new File("src/image/"+ cur_emp.getEm_id() +".png")).getScaledInstance(this.lbAvatar.getWidth(), this.lbAvatar.getHeight(), Image.SCALE_SMOOTH);
            avataricon = new ImageIcon(scaled);
        }catch(IOException io_ex){
            io_ex.getStackTrace();
            try {               // nếu ko có avatar thì lấy avatar mặc định
                Image scaled = ImageIO.read(new File("src/avatar/default_avatar.png")).getScaledInstance(this.lbAvatar.getWidth(), this.lbAvatar.getHeight(), Image.SCALE_SMOOTH);
                avataricon = new ImageIcon(scaled);
            } catch (IOException ex) {
                Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }
        this.lbAvatar.setIcon(avataricon);

        
        // hiển thị thông tin mặc định không thể sửa
        for(Admin iter : this.manager_list){
            if(iter.getAd_id().equals(cur_emp.getManager())){
                this.lbManager.setText(iter.getName());
                break;
            }
        }
        this.lbEmpRole.setText((cur_emp.getEm_role() == 1)? "In bar" : "In kitchen");
        this.lbEmphourwage.setText(String.valueOf(cur_emp.getHour_wage()));
        this.lbEmpStartday.setText(String.valueOf(cur_emp.getStartday()));
        
        // hiển thị thông tin có thể sửa
        this.txtEmpUsername.setText(cur_emp.getUsername());
        this.txtEmpPass.setText(cur_emp.getPass());
        this.txtEmpBirth.setText(String.valueOf(cur_emp.getBirth()));
        this.txtEmpPhone.setText(cur_emp.getPhone());
        this.txtEmpEmail.setText(cur_emp.getEmail());
        this.txtEmpAddress.setText(cur_emp.getAddr());
        
        
    }
    
// END EMPLOYEE EDIT INFORMATION FORM

    
    
    
    
    
    
//  SETTING FORM
    ArrayList<String> strfood = new ArrayList<>();
    ArrayList<String> strdisfood = new ArrayList<>();
    DefaultListModel listfoodmodel = new DefaultListModel();
    DefaultListModel listdisfoodmodel = new DefaultListModel();
    
    private void initSettingForm() {
        this.txtMenutablenumber.setText(String.valueOf(this.tableitem_number));
        this.txtMenuitemnumber.setText(String.valueOf(this.menuitem_number));
        this.txtTodaydiscount.setText(String.valueOf(this.discountevent));
        
        for(String iter : this.strfood){
            this.listfoodmodel.addElement(iter);
        }
        
        for(String iter : this.strdisfood){
            this.listdisfoodmodel.addElement(iter);
        }
        
        this.listFood.setModel(this.listfoodmodel);
        this.listFoodDiscount.setModel(this.listdisfoodmodel);
    }
    
    private void getsetting(){
        BufferedReader instream = null;
        try {
            instream = Files.newBufferedReader(Paths.get("src/textfile/settinginfo.txt"));
            LineNumberReader in = new LineNumberReader(instream);
            
            this.tableitem_number = Integer.parseInt(in.readLine());
            this.menuitem_number = Integer.parseInt(in.readLine());
            this.discountevent = Integer.parseInt(in.readLine());
            
            while(true){
                String food = in.readLine();
                if(food.equals("-"))
                    break;
                this.strfood.add(food);
            }
            
            while(true){
                String disfood = in.readLine();
                if(disfood.equals("-"))
                    break;
                this.strdisfood.add(disfood);
            }
        } catch (IOException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                instream.close();
            } catch (IOException ex) {
                Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    private void savesetting(){
        PrintWriter out = null;
        try {
            out = new PrintWriter(new File("src/textfile/settinginfo.txt"));
            
            out.println(this.txtMenutablenumber.getText());
            out.println(this.txtMenuitemnumber.getText());
            out.println(this.txtTodaydiscount.getText());
            
            for(int i = 0; i < this.listfoodmodel.getSize(); i++){
                out.println(this.listfoodmodel.get(i));
            }
            
            out.println("-");
            
            for(int i = 0; i < this.listdisfoodmodel.getSize(); i++){
                out.println(this.listdisfoodmodel.get(i));
            }
            
            out.println("-");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            out.flush();
            out.close();
        }
    }
    
//  END SETTING FORM
    
    
    

    
// PRINTING CODE
    
    private String[] toFoodName(Entry<Order, ArrayList<OrderDetails>> curorder){
        String[] result = new String[curorder.getValue().size()];
        
        for(int i = 0; i < result.length; i++){
            for(Food iter : this.menufood_list){
                if(iter.getFood_id().equals(curorder.getValue().get(i).getFood_id())){
                    result[i] = iter.getName();
                    break;
                }
            }
        }
        
        return  result;
    }
    
    private int[] toFoodQuan(Entry<Order, ArrayList<OrderDetails>> curorder){
        int[] result = new int[curorder.getValue().size()];
        
        for(int i = 0; i < result.length; i++){
            result[i] = curorder.getValue().get(i).getQuan();
        }
        
        return result;
    }
    
    private float[] toFoodPrice(Entry<Order, ArrayList<OrderDetails>> curorder){
        float[] result = new float[curorder.getValue().size()];
        
        for(int i = 0; i < result.length; i++){
            for(Food iter : this.menufood_list){
                if(iter.getFood_id().equals(curorder.getValue().get(i).getFood_id())){
                    result[i] = iter.getPrice();
                    break;
                }
            }
        }
        
        return result;
    }
    
    private ArrayList<TableItem> toTemporaryTable(Entry<Order, ArrayList<OrderDetails>> curorder){
        ArrayList<TableItem> r = new ArrayList<>();
        
        r.add(new TableItem("Product", "Q", "Price", "Amt"));
        for(OrderDetails iter : curorder.getValue()){
            for(Food fitem : this.menufood_list){
                if(fitem.getFood_id().equals(iter.getFood_id())){
                    String name = fitem.getName();
                    int quan = iter.getQuan();
                    int price = (int) (fitem.getPrice() * 1000);
                    String sprice = localizedFormat("###,###.###", price, Locale.US);

                    int totalprice = price * quan;
                    String stotalprice = localizedFormat("###,###.###", totalprice, Locale.US);
                    
                    r.add(new TableItem(name, String.valueOf(quan), sprice, stotalprice));
                }
            }
        }
        
        // 2 dòng cuối
        r.add(new TableItem(" ", " ", " ", " "));
        int totalprice = (int) (curorder.getKey().getPrice() * 1000);
        String stotalprice = localizedFormat("###,###.###", totalprice, Locale.US);
        r.add(new TableItem("Total Amount:", "", "" , stotalprice));
        
        return r;
    }
    
    
    private ArrayList<TableItem> toPayTable(Entry<Order, ArrayList<OrderDetails>> curorder) {
        ArrayList<TableItem> r = new ArrayList<>();
        
        r.add(new TableItem("Product", "Q", "Price", "Amt"));
        for(OrderDetails iter : curorder.getValue()){
            for(Food fitem : this.menufood_list){
                if(fitem.getFood_id().equals(iter.getFood_id())){
                    String name = fitem.getName();
                    int quan = iter.getQuan();
                    int price = (int) (fitem.getPrice() * 1000);
                    String sprice = localizedFormat("###,###.###", price, Locale.US);

                    int totalprice = price * quan;
                    String stotalprice = localizedFormat("###,###.###", totalprice, Locale.US);
                    
                    r.add(new TableItem(name, String.valueOf(quan), sprice, stotalprice));
                }
            }
        }
        
        // 4 dòng cuối
        r.add(new TableItem(" ", " ", " ", " "));
        int totalprice = (int) (curorder.getKey().getPrice() * 1000);
        String stotalprice = localizedFormat("###,###.###", totalprice, Locale.US);
        r.add(new TableItem("Total Amount:", "", "" , stotalprice));
        int customerpay = (int) (curorder.getKey().getCustomerpay()* 1000);
        String scustomerpay = localizedFormat("###,###.###", customerpay, Locale.US);
        r.add(new TableItem("Pay Amount:", "", "" , scustomerpay));
        int payback = (int) (curorder.getKey().getPayback()* 1000);
        String spayback = localizedFormat("###,###.###", payback, Locale.US);
        r.add(new TableItem("Change:", "", "" , spayback));
        
        return r;
    }
    
    private ArrayList<TableItem> toKitchenTable(Entry<Order, ArrayList<OrderDetails>> curorder) {
        ArrayList<TableItem> r = new ArrayList<>();
        
        this.cur_ordernote = this.getNoteofTable(this.cur_table);
        for(int i = 0; i < this.cur_order.getValue().size(); i++){
            for(Food fitem : this.menufood_list){
                if(fitem.getFood_id().equals(this.cur_order.getValue().get(i).getFood_id()) && fitem.getIsdrink() == 1){
                    String name = fitem.getName();
                    int quan = this.cur_order.getValue().get(i).getQuan();
                    
                    r.add(new TableItem(name, String.valueOf(quan), "", ""));
                    // thêm note kèm sau món
                    String[] noteline = this.cur_ordernote.getValue().get(i).split("\n");
                    for(String line : noteline){
                        r.add(new TableItem("- " + line, "", "", "")); 
                    }
                }
            }
        }
        
        return r;
    }
    
    private ArrayList<TableItem> toBarTable(Entry<Order, ArrayList<OrderDetails>> curorder) {
        ArrayList<TableItem> r = new ArrayList<>();
        
        this.cur_ordernote = this.getNoteofTable(this.cur_table);
        for(int i = 0; i < this.cur_order.getValue().size(); i++){
            for(Food fitem : this.menufood_list){
                if(fitem.getFood_id().equals(this.cur_order.getValue().get(i).getFood_id()) && fitem.getIsdrink() == 0){
                    String name = fitem.getName();
                    int quan = this.cur_order.getValue().get(i).getQuan();
                    
                    r.add(new TableItem(name, String.valueOf(quan), "", ""));
                    // thêm note kèm sau món
                    String[] noteline = this.cur_ordernote.getValue().get(i).split("\n");
                    for(String line : noteline){
                        r.add(new TableItem("- " + line, "", "", "")); 
                    }
                }
            }
        }
        
        return r;
    }
// END PRINTING CODE
    
    
    
    
    
    
// HISTORY TRACKING
    public void saveCurrentInfo(boolean finishwork){
        FileOutputStream fos;
        ObjectOutputStream oos;
        try {
            fos = new FileOutputStream("src/textfile/history.txt");
            oos = new ObjectOutputStream(fos);

            // tiến hành lưu các dữ liệu
            oos.writeBoolean(finishwork);
                
            if(!finishwork){    // nếu công việc chưa hoàn thành
                oos.writeObject(this.cusnumber_list);
                oos.writeObject(this.tablestate_list);
                oos.writeObject(this.ordernote_list);
                oos.writeObject(this.order_list);
                oos.writeObject(this.cur_invoice);
                oos.writeObject(this.today);
            }
            
            oos.close();
            fos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void loadLastWorkingInfo(){
        try {
            FileInputStream fis = new FileInputStream("src/textfile/history.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            boolean isfinish = ois.readBoolean();
            if(!isfinish){
                this.cusnumber_list = (ArrayList<Integer>) ois.readObject();
                this.tablestate_list = (ArrayList<Integer>) ois.readObject();
                this.ordernote_list = (HashMap<Integer, ArrayList<String>>) ois.readObject();
                this.order_list = (HashMap<Order, ArrayList<OrderDetails>>) ois.readObject();
                this.cur_invoice = (Pair<ReceiptNote, ArrayList<ReceiptNoteDetails>>) ois.readObject();
                LocalDate saveday = (LocalDate) ois.readObject();
                
                this.refreshTable();
                JOptionPane.showMessageDialog(null, "We have a program sudden turning off in day: " + saveday + ". Please check emloyees's schedule in that day!", "HISTORY CHECK WARNNING", JOptionPane.WARNING_MESSAGE);
            }
            
            ois.close();
            fis.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrEmployeeWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
// END HISTORY TRACKING
}